// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using JomarHealthCare.Repository.Database;

#nullable disable

namespace JomarHealthCare.Repository.Migrations
{
    [DbContext(typeof(MyCareDbContext))]
    [Migration("20250611145859_updatethismodel")]
    partial class updatethismodel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("tbl_Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "93be1e09-c686-4bb2-8e1b-8594f5585dd9",
                            ConcurrencyStamp = "32a5a6e8-0ade-45fb-a751-f469e975b66d",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "acac7fb6-7c4a-4da8-a22e-47caab9928a9",
                            ConcurrencyStamp = "2fca74f5-8568-4b34-ac21-5b8a91de0372",
                            Name = "Company",
                            NormalizedName = "COMPANY"
                        },
                        new
                        {
                            Id = "3d2c49d5-639c-4e86-abd1-c7da88561541",
                            ConcurrencyStamp = "d8c9e243-4f54-4b1f-9d1b-6449cb907522",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("tbl_RoleClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("tbl_UserClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("tbl_UserLogin", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("tbl_UserRole", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("tbl_UserToken", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.AddressHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("Address");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("FromDate");

                    b.Property<string>("LandLordContactNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LandLordContactNumber");

                    b.Property<string>("NoOfLandlord")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("NoOfLandlord");

                    b.Property<string>("PostCode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("PostCode");

                    b.Property<string>("Remarks")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("Remarks");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffId");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ToDate");

                    b.HasKey("Id");

                    b.ToTable("tbl_AddressHistory", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.AdlObsOfficerToAct", b =>
                {
                    b.Property<int>("AdlObsOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AdlObsOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdlObsOfficerToActId"));

                    b.Property<int>("ObservationId")
                        .HasColumnType("int")
                        .HasColumnName("ObservationId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("AdlObsOfficerToActId");

                    b.HasIndex("ObservationId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_AdlObs_OfficerToAct", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.AdminAdvertisement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(1025)
                        .HasColumnType("nvarchar(1025)")
                        .HasColumnName("Image");

                    b.Property<bool>("IsForAll")
                        .HasColumnType("bit")
                        .HasColumnName("IsForAll");

                    b.HasKey("Id");

                    b.ToTable("tbl_AdminAdvertisement", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.AdminMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdminsMessage")
                        .IsRequired()
                        .HasMaxLength(1025)
                        .HasColumnType("nvarchar(1025)")
                        .HasColumnName("AdminsMessage");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<bool>("IsForAll")
                        .HasColumnType("bit")
                        .HasColumnName("IsForAll");

                    b.HasKey("Id");

                    b.ToTable("tbl_AdminMessage", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.AmountRateType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("tbl_AmountRateType", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.AppMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("FromDate");

                    b.Property<string>("Message")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("Message");

                    b.Property<bool>("PauseOrStart")
                        .HasColumnType("bit");

                    b.Property<string>("Subject")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("Subject");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ToDate");

                    b.Property<int>("ToWhom")
                        .HasColumnType("int")
                        .HasColumnName("ToWhom");

                    b.HasKey("Id");

                    b.ToTable("tbl_AppMessage", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("StaffId")
                        .IsUnique()
                        .HasFilter("[StaffId] IS NOT NULL");

                    b.ToTable("tbl_User", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.AreaCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CompanyId")
                        .HasMaxLength(38)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompanyId");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("tbl_AreaCode", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.AssignAlertStaff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasColumnName("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("StaffAlertId")
                        .HasColumnType("int");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("StaffAlertId");

                    b.HasIndex("StaffId");

                    b.ToTable("tbl_assignalertstaff", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.AuditTrail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Duration")
                        .HasColumnType("datetime2")
                        .HasColumnName("Duration");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Email");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UserId");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UserName");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_AuditTrail", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.BMIChartOfficerToAct", b =>
                {
                    b.Property<int>("BMIChartOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BMIChartOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BMIChartOfficerToActId"));

                    b.Property<int>("BMIChartId")
                        .HasColumnType("int")
                        .HasColumnName("BMIChartId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("BMIChartOfficerToActId");

                    b.HasIndex("BMIChartId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_BMIChart_OfficerToAct", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.BMIChartPhysician", b =>
                {
                    b.Property<int>("BMIChartPhysicianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BMIChartPhysicianId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BMIChartPhysicianId"));

                    b.Property<int>("BMIChartId")
                        .HasColumnType("int")
                        .HasColumnName("BMIChartId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("BMIChartPhysicianId");

                    b.HasIndex("BMIChartId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_BMIChart_Physician", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.BMIChartStaffName", b =>
                {
                    b.Property<int>("BMIChartStaffNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BMIChartStaffNameId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BMIChartStaffNameId"));

                    b.Property<int>("BMIChartId")
                        .HasColumnType("int")
                        .HasColumnName("BMIChartId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("BMIChartStaffNameId");

                    b.HasIndex("BMIChartId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_BMIChart_StaffName", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.Balance", b =>
                {
                    b.Property<int>("BalanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BalanceId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BalanceId"));

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Mobility")
                        .HasColumnType("int")
                        .HasColumnName("Mobility");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.HasKey("BalanceId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_Balance", null, t =>
                        {
                            t.Property("ClientId")
                                .HasColumnName("ClientId1");
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.BaseRecordItemModel", b =>
                {
                    b.Property<int>("BaseRecordItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BaseRecordItemId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BaseRecordItemId"));

                    b.Property<string>("AddLink")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AddLink");

                    b.Property<int>("BaseRecordId")
                        .HasColumnType("int")
                        .HasColumnName("BaseRecordId");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasColumnName("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExpiryInMonths")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("ExpiryInMonths");

                    b.Property<bool>("HasGoogleForm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("HasGoogleForm");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ValueName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ValueName");

                    b.Property<string>("ViewLink")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ViewLink");

                    b.HasKey("BaseRecordItemId");

                    b.HasIndex("BaseRecordId");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_BaseRecordItem_Model", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.BaseRecordItems", b =>
                {
                    b.Property<Guid>("BaseRecordItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BaseRecordId")
                        .HasMaxLength(38)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .HasMaxLength(38)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ValueName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("BaseRecordItemId");

                    b.HasIndex("BaseRecordId");

                    b.ToTable("tbl_BaseRecordItem", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.BaseRecordModel", b =>
                {
                    b.Property<int>("BaseRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BaseRecordId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BaseRecordId"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Description");

                    b.Property<string>("KeyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("KeyName");

                    b.HasKey("BaseRecordId");

                    b.ToTable("tbl_BaseRecord_Model", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.BaseRecords", b =>
                {
                    b.Property<Guid>("BaseRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("Description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("KeyName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("KeyName");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("BaseRecordId");

                    b.ToTable("tbl_BaseRecord", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.BelieveTask", b =>
                {
                    b.Property<int>("BelieveTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BelieveTaskId"));

                    b.Property<int>("BestId")
                        .HasColumnType("int")
                        .HasColumnName("BestId");

                    b.Property<int>("ReasonableBelieve")
                        .HasColumnType("int")
                        .HasColumnName("ReasonableBelieve");

                    b.HasKey("BelieveTaskId");

                    b.HasIndex("BestId");

                    b.ToTable("tbl_BelieveTask", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.BestInterestAssessment", b =>
                {
                    b.Property<int>("BestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BestId"));

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Name");

                    b.Property<string>("Position")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Position");

                    b.Property<string>("Signature")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("Signature");

                    b.HasKey("BestId");

                    b.HasIndex("ClientId")
                        .IsUnique()
                        .HasFilter("[ClientId] IS NOT NULL");

                    b.ToTable("tbl_BestInterestAssessment", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.BloodCoagOfficerToAct", b =>
                {
                    b.Property<int>("BloodCoagOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BloodCoagOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BloodCoagOfficerToActId"));

                    b.Property<int>("BloodRecordId")
                        .HasColumnType("int")
                        .HasColumnName("BloodRecordId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("BloodCoagOfficerToActId");

                    b.HasIndex("BloodRecordId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_BloodCoag_OfficerToAct", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.BloodCoagPhysician", b =>
                {
                    b.Property<int>("BloodCoagPhysicianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BloodCoagPhysicianId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BloodCoagPhysicianId"));

                    b.Property<int>("BloodRecordId")
                        .HasColumnType("int")
                        .HasColumnName("BloodRecordId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("BloodCoagPhysicianId");

                    b.HasIndex("BloodRecordId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_BloodCoag_Physician", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.BloodCoagStaffName", b =>
                {
                    b.Property<int>("BloodCoagStaffNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BloodCoagStaffNameId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BloodCoagStaffNameId"));

                    b.Property<int>("BloodRecordId")
                        .HasColumnType("int")
                        .HasColumnName("BloodRecordId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("BloodCoagStaffNameId");

                    b.HasIndex("BloodRecordId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_BloodCoag_StaffName", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.BloodPressureOfficerToAct", b =>
                {
                    b.Property<int>("BloodPressureOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BloodPressureOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BloodPressureOfficerToActId"));

                    b.Property<int>("BloodPressureId")
                        .HasColumnType("int")
                        .HasColumnName("BloodPressureId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("BloodPressureOfficerToActId");

                    b.HasIndex("BloodPressureId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_BloodPressure_OfficerToAct", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.BloodPressurePhysician", b =>
                {
                    b.Property<int>("BloodPressurePhysicianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BloodPressurePhysicianId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BloodPressurePhysicianId"));

                    b.Property<int>("BloodPressureId")
                        .HasColumnType("int")
                        .HasColumnName("BloodPressureId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("BloodPressurePhysicianId");

                    b.HasIndex("BloodPressureId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_BloodPressure_Physician", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.BloodPressureStaffName", b =>
                {
                    b.Property<int>("BloodPressureStaffNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BloodPressureStaffNameId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BloodPressureStaffNameId"));

                    b.Property<int>("BloodPressureId")
                        .HasColumnType("int")
                        .HasColumnName("BloodPressureId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("BloodPressureStaffNameId");

                    b.HasIndex("BloodPressureId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_BloodPressure_StaffName", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.BodyMap", b =>
                {
                    b.Property<int>("BodyMapId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BodyMapId"));

                    b.Property<string>("AreaApplied")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("AreaApplied");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ClientId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreamName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("CreamName");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Escalation")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("Escalation");

                    b.Property<string>("HowToApply")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("HowToApply");

                    b.Property<string>("Instruction")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Instruction");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("PurposeOfCream")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PurposeOfCream");

                    b.Property<int?>("StaffRotaPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("StaffRotaPeriodId");

                    b.HasKey("BodyMapId");

                    b.HasIndex("ClientId1");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_BodyMap", null, t =>
                        {
                            t.Property("ClientId")
                                .HasColumnName("ClientId2");
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.BodyTempOfficerToAct", b =>
                {
                    b.Property<int>("BodyTempOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BodyTempOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BodyTempOfficerToActId"));

                    b.Property<int>("BodyTempId")
                        .HasColumnType("int")
                        .HasColumnName("BodyTempId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("BodyTempOfficerToActId");

                    b.HasIndex("BodyTempId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_BodyTemp_OfficerToAct", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.BodyTempPhysician", b =>
                {
                    b.Property<int>("BodyTempPhysicianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BodyTempPhysicianId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BodyTempPhysicianId"));

                    b.Property<int>("BodyTempId")
                        .HasColumnType("int")
                        .HasColumnName("BodyTempId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("BodyTempPhysicianId");

                    b.HasIndex("BodyTempId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_BodyTemp_Physician", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.BodyTempStaffName", b =>
                {
                    b.Property<int>("BodyTempStaffNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BodyTempStaffNameId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BodyTempStaffNameId"));

                    b.Property<int>("BodyTempId")
                        .HasColumnType("int")
                        .HasColumnName("BodyTempId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("BodyTempStaffNameId");

                    b.HasIndex("BodyTempId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_BodyTemp_StaffName", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.BowelMovementOfficerToAct", b =>
                {
                    b.Property<int>("BowelMovementOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BowelMovementOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BowelMovementOfficerToActId"));

                    b.Property<int>("BowelMovementId")
                        .HasColumnType("int")
                        .HasColumnName("BowelMovementId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("BowelMovementOfficerToActId");

                    b.HasIndex("BowelMovementId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_BowelMovement_OfficerToAct", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.BowelMovementPhysician", b =>
                {
                    b.Property<int>("BowelMovementPhysicianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BowelMovementPhysicianId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BowelMovementPhysicianId"));

                    b.Property<int>("BowelMovementId")
                        .HasColumnType("int")
                        .HasColumnName("BowelMovementId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("BowelMovementPhysicianId");

                    b.HasIndex("BowelMovementId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_BowelMovement_Physician", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.BowelMovementStaffName", b =>
                {
                    b.Property<int>("BowelMovementStaffNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BowelMovementStaffNameId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BowelMovementStaffNameId"));

                    b.Property<int>("BowelMovementId")
                        .HasColumnType("int")
                        .HasColumnName("BowelMovementId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("BowelMovementStaffNameId");

                    b.HasIndex("BowelMovementId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_BowelMovement_StaffName", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.BundleTrainingResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BundleId")
                        .HasColumnType("int")
                        .HasColumnName("BundleId");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffId");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Status");

                    b.Property<int>("TrainingId")
                        .HasColumnType("int")
                        .HasColumnName("TrainingId");

                    b.HasKey("Id");

                    b.ToTable("tbl_BundleTrainingResult", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.CallDetail", b =>
                {
                    b.Property<int>("CallDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CallDetailId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CallDetailId"));

                    b.Property<string>("Brief")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Brief");

                    b.Property<DateTime>("DateOfCall")
                        .HasColumnType("datetime2")
                        .HasColumnName("DateOfCall");

                    b.Property<string>("FeedBack")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("FeedBack");

                    b.Property<string>("NameOfCaller")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("NameOfCaller");

                    b.Property<int>("ServiceWeekId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeOfCall")
                        .HasColumnType("datetime2")
                        .HasColumnName("TimeOfCall");

                    b.HasKey("CallDetailId");

                    b.ToTable("tbl_CallDetail", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.CandidateInterview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CandidateSignature")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("CandidateSignature");

                    b.Property<string>("Comment")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("Comment");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("InterviewDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("InterviewDate");

                    b.Property<int>("InterviewType")
                        .HasColumnType("int")
                        .HasColumnName("InterviewType");

                    b.Property<string>("InterviwerStaff")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("InterviwerStaff");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("JobPositionId")
                        .HasColumnType("int")
                        .HasColumnName("JobPositionId");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("ObtainPercentage")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("ObtainPercentage");

                    b.Property<decimal?>("PassingPercentage")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("PassingPercentage");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffId");

                    b.Property<string>("Status")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_CandidateInterview", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.CandidateInterviewResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Answer");

                    b.Property<int>("CandidateInterviewId")
                        .HasColumnType("int")
                        .HasColumnName("CandidateInterviewId");

                    b.Property<int>("Point")
                        .HasColumnType("int")
                        .HasColumnName("Point");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("QuestionId");

                    b.HasKey("Id");

                    b.ToTable("tbl_CandidateInterviewResult", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.Capacity", b =>
                {
                    b.Property<int>("CapacityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CapacityId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CapacityId"));

                    b.Property<string>("Implications")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Implications");

                    b.Property<int>("PersonalDetailId")
                        .HasColumnType("int")
                        .HasColumnName("PersonalDetailId");

                    b.Property<int>("Pointer")
                        .HasColumnType("int")
                        .HasColumnName("Pointer");

                    b.HasKey("CapacityId");

                    b.HasIndex("PersonalDetailId")
                        .IsUnique();

                    b.ToTable("tbl_Capacity", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.CapacityIndicator", b =>
                {
                    b.Property<int>("CapacityIndicatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CapacityIndicatorId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CapacityIndicatorId"));

                    b.Property<int>("BaseRecordId")
                        .HasColumnType("int")
                        .HasColumnName("BaseRecordId");

                    b.Property<int>("CapacityId")
                        .HasColumnType("int")
                        .HasColumnName("CapacityId");

                    b.HasKey("CapacityIndicatorId");

                    b.HasIndex("CapacityId");

                    b.ToTable("tbl_CapacityIndicator", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.CareIssuesTask", b =>
                {
                    b.Property<int>("CareIssuesTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CareIssuesTaskId"));

                    b.Property<int>("BestId")
                        .HasColumnType("int")
                        .HasColumnName("BestId");

                    b.Property<int>("Issues")
                        .HasColumnType("int")
                        .HasColumnName("Issues");

                    b.HasKey("CareIssuesTaskId");

                    b.HasIndex("BestId");

                    b.ToTable("tbl_CareIssuesTask", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.CareObjPersonToAct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CareObjId")
                        .HasColumnType("int")
                        .HasColumnName("CareObjId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("Id");

                    b.HasIndex("CareObjId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_CareObjPersonToAct", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.CarePlanNutrition", b =>
                {
                    b.Property<int>("NutritionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NutritionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NutritionId"));

                    b.Property<string>("AvoidFood")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AvoidFood");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrinkType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DrinkType");

                    b.Property<int>("EatingDifficulty")
                        .HasColumnType("int")
                        .HasColumnName("EatingDifficulty");

                    b.Property<int>("FoodIntake")
                        .HasColumnType("int")
                        .HasColumnName("FoodIntake");

                    b.Property<int>("FoodStorage")
                        .HasColumnType("int")
                        .HasColumnName("FoodStorage");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("MealPreparation")
                        .HasColumnType("int")
                        .HasColumnName("MealPreparation");

                    b.Property<string>("RiskMitigations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RiskMitigations");

                    b.Property<string>("ServingMeal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ServingMeal");

                    b.Property<string>("SpecialDiet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SpecialDiet");

                    b.Property<int>("ThingsILike")
                        .HasColumnType("int")
                        .HasColumnName("ThingsILike");

                    b.Property<string>("WhenRestock")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WhenRestock");

                    b.Property<int>("WhoRestock")
                        .HasColumnType("int")
                        .HasColumnName("WhoRestock");

                    b.HasKey("NutritionId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_CarePlanNutrition", null, t =>
                        {
                            t.Property("ClientId")
                                .HasColumnName("ClientId1");
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.CareReview", b =>
                {
                    b.Property<Guid>("CareReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Action")
                        .HasColumnType("int")
                        .HasColumnName("Action");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ManagerSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Note");

                    b.Property<string>("StaffSignature")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CareReviewId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_CareReview", null, t =>
                        {
                            t.Property("ClientId")
                                .HasColumnName("ClientId1");
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.CareobjectMonitor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfCare")
                        .HasColumnType("datetime2")
                        .HasColumnName("DateOfCare");

                    b.Property<int?>("Day")
                        .HasColumnType("int")
                        .HasColumnName("Day");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Month")
                        .HasColumnType("int")
                        .HasColumnName("Month");

                    b.Property<int?>("Year")
                        .HasColumnType("int")
                        .HasColumnName("Year");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_CareobjectMonitor", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.CategoryOfStaff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("CategoryName");

                    b.Property<Guid?>("CompanyId")
                        .HasMaxLength(38)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompanyId");

                    b.HasKey("Id");

                    b.ToTable("tbl_CategoryOfStaff", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.Chat", b =>
                {
                    b.Property<int>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChatId"));

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Dated")
                        .HasColumnType("datetime2")
                        .HasColumnName("Dated");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Message");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int")
                        .HasColumnName("ReceiverId");

                    b.Property<int>("SenderId")
                        .HasColumnType("int")
                        .HasColumnName("SenderId");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Type");

                    b.HasKey("ChatId");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_ClientChat", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ChatNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasColumnName("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FromUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Notification");

                    b.Property<DateTime>("NotifyTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("NotifyTime");

                    b.Property<string>("ToUserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_chatNotification", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ChatSupport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChatType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ChatType");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasColumnName("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FromUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_chatsupport", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ChatSupportAssignedStaff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChatSupportId")
                        .HasColumnType("int")
                        .HasColumnName("ChatSupportId");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasColumnName("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("ToUserId")
                        .HasColumnType("int")
                        .HasColumnName("ToUserId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_ChatSupportAssignedStaff", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ChatSupportConversation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChatSupportId")
                        .HasColumnType("int");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasColumnName("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FilePath")
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)")
                        .HasColumnName("FilePath");

                    b.Property<string>("FromUserId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FromUserId");

                    b.Property<bool>("IsByStaff")
                        .HasColumnType("bit")
                        .HasColumnName("IsByStaff");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1025)
                        .HasColumnType("nvarchar(1025)")
                        .HasColumnName("Message");

                    b.Property<string>("OpenTokToken")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("OpenTokToken");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("SessionId");

                    b.Property<string>("ToUserId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ToUserId");

                    b.HasKey("Id");

                    b.HasIndex("ChatSupportId");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_chatsupportconversation", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClassOfStaff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ClassName");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.HasKey("Id");

                    b.ToTable("tbl_ClassOfStaff", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.Client", b =>
                {
                    b.Property<Guid>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("About");

                    b.Property<string>("Address")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("Address");

                    b.Property<int?>("Aid")
                        .HasColumnType("int");

                    b.Property<int?>("AreaCodeId")
                        .HasColumnType("int");

                    b.Property<string>("CallGap")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("CallGap");

                    b.Property<int?>("CapacityId")
                        .HasColumnType("int");

                    b.Property<int?>("ChoiceOfStaffId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientFacilityId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientManager")
                        .HasColumnType("int");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompanyId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Denture")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("Email");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("EndDate");

                    b.Property<string>("Firstname")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("Firstname");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("Hobbies")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Hobbies");

                    b.Property<string>("IdNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("IdNumber");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFacilityClient")
                        .HasColumnType("bit");

                    b.Property<string>("KeySafe")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("KeySafe");

                    b.Property<string>("Keyworker")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Keyworker");

                    b.Property<int?>("KeyworkerId")
                        .HasColumnType("int");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Latitude")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Latitude");

                    b.Property<double?>("LocationDistance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.01)
                        .HasColumnName("LocationDistance");

                    b.Property<string>("Longitude")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Longitude");

                    b.Property<string>("Middlename")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("Middlename");

                    b.Property<int?>("NumberOfCalls")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfStaff")
                        .HasColumnType("int");

                    b.Property<string>("PassportFilePath")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("PassportFilePath");

                    b.Property<string>("Pin")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Pin");

                    b.Property<string>("PostCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PostCode");

                    b.Property<string>("PracticalSupport")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("PracticalSupport");

                    b.Property<string>("PreferredName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("PreferredName");

                    b.Property<string>("ProviderReference")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ProviderReference");

                    b.Property<string>("ProvisionVenue")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ProvisionVenue");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Rate");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartDate");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("Surname");

                    b.Property<string>("TeamLeader")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("TeamLeader");

                    b.Property<int?>("TeamLeaderId")
                        .HasColumnType("int");

                    b.Property<string>("Telephone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Telephone");

                    b.Property<int?>("TeritoryId")
                        .HasColumnType("int");

                    b.Property<int?>("TimeMonitorHigher")
                        .HasColumnType("int");

                    b.Property<int?>("TimeMonitorLower")
                        .HasColumnType("int");

                    b.Property<string>("UniqueId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("UniqueId");

                    b.HasKey("ClientId");

                    b.HasIndex("AreaCodeId");

                    b.HasIndex("ClientFacilityId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("TeritoryId");

                    b.ToTable("tbl_Client", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientBMIChart", b =>
                {
                    b.Property<int>("BMIChartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BMIChartId"));

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Comment");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Height")
                        .HasColumnType("int")
                        .HasColumnName("Height");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberRange")
                        .HasColumnType("int")
                        .HasColumnName("NumberRange");

                    b.Property<string>("PhysicianResponse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PhysicianResponse");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<int>("SeeChart")
                        .HasColumnType("int")
                        .HasColumnName("SeeChart");

                    b.Property<string>("SeeChartAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SeeChartAttach");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2")
                        .HasColumnName("Time");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Weight");

                    b.HasKey("BMIChartId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_Client_BMIChart", null, t =>
                        {
                            t.Property("ClientId")
                                .HasColumnName("ClientId1");
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientBillTo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BillTo")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("BillTo");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Email");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_ClientBillTo", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientBloodCoagulationRecord", b =>
                {
                    b.Property<int>("BloodRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BloodRecordId"));

                    b.Property<int>("BloodStatus")
                        .HasColumnType("int")
                        .HasColumnName("BloodStatus");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Comment");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentDose")
                        .HasColumnType("int")
                        .HasColumnName("CurrentDose");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("INR")
                        .HasColumnType("int")
                        .HasColumnName("INR");

                    b.Property<int>("Indication")
                        .HasColumnType("int")
                        .HasColumnName("Indication");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("NewDose")
                        .HasColumnType("int")
                        .HasColumnName("NewDose");

                    b.Property<int>("NewINR")
                        .HasColumnType("int")
                        .HasColumnName("NewINR");

                    b.Property<string>("PhysicianResponce")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PhysicianResponce");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remark");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartDate");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<int>("TargetINR")
                        .HasColumnType("int")
                        .HasColumnName("TargetINR");

                    b.Property<string>("TargetINRAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TargetINRAttach");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2")
                        .HasColumnName("Time");

                    b.HasKey("BloodRecordId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_Client_BloodCoagulationRecord", null, t =>
                        {
                            t.Property("ClientId")
                                .HasColumnName("ClientId1");
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientBloodPressure", b =>
                {
                    b.Property<int>("BloodPressureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BloodPressureId"));

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Comment");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("GoalDiastolic")
                        .HasColumnType("int")
                        .HasColumnName("GoalDiastolic");

                    b.Property<int>("GoalSystolic")
                        .HasColumnType("int")
                        .HasColumnName("GoalSystolic");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhysicianResponse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PhysicianResponse");

                    b.Property<int>("ReadingDiastolic")
                        .HasColumnType("int")
                        .HasColumnName("ReadingDiastolic");

                    b.Property<int>("ReadingSystolic")
                        .HasColumnType("int")
                        .HasColumnName("ReadingSystolic");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("StatusAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StatusAttach");

                    b.Property<int>("StatusImage")
                        .HasColumnType("int")
                        .HasColumnName("StatusImage");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2")
                        .HasColumnName("Time");

                    b.HasKey("BloodPressureId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_Client_BloodPressure", null, t =>
                        {
                            t.Property("ClientId")
                                .HasColumnName("ClientId1");
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientBodyTemp", b =>
                {
                    b.Property<int>("BodyTempId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BodyTempId"));

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Comment");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentReading")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CurrentReading");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhysicianResponse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PhysicianResponse");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<int>("SeeChart")
                        .HasColumnType("int")
                        .HasColumnName("SeeChart");

                    b.Property<string>("SeeChartAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SeeChartAttach");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<int>("TargetTemp")
                        .HasColumnType("int")
                        .HasColumnName("TargetTemp");

                    b.Property<string>("TargetTempAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TargetTempAttach");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2")
                        .HasColumnName("Time");

                    b.HasKey("BodyTempId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_Client_BodyTemp", null, t =>
                        {
                            t.Property("ClientId")
                                .HasColumnName("ClientId1");
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientBowelMovement", b =>
                {
                    b.Property<int>("BowelMovementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BowelMovementId"));

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Color")
                        .HasColumnType("int")
                        .HasColumnName("Color");

                    b.Property<string>("ColorAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ColorAttach");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Comment");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhysicianResponse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PhysicianResponse");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<int>("Size")
                        .HasColumnType("int")
                        .HasColumnName("Size");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("StatusAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StatusAttach");

                    b.Property<int>("StatusImage")
                        .HasColumnType("int")
                        .HasColumnName("StatusImage");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2")
                        .HasColumnName("Time");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("Type");

                    b.Property<string>("TypeAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TypeAttach");

                    b.HasKey("BowelMovementId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_Client_BowelMovement", null, t =>
                        {
                            t.Property("ClientId")
                                .HasColumnName("ClientId1");
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientCareDetails", b =>
                {
                    b.Property<int>("ClientCareDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientCareDetailsId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientCareDetailsId"));

                    b.Property<int>("ClientCareDetailsTaskId")
                        .HasColumnType("int")
                        .HasColumnName("ClientCareDetailsTaskId");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Location");

                    b.Property<string>("Mitigation")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Mitigation");

                    b.Property<string>("Remark")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Remark");

                    b.Property<string>("Risk")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Risk");

                    b.HasKey("ClientCareDetailsId");

                    b.HasIndex("ClientCareDetailsTaskId");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_ClientCareDetails", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientCareDetailsHeading", b =>
                {
                    b.Property<int>("ClientCareDetailsHeadingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientCareDetailsHeadingId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientCareDetailsHeadingId"));

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Heading")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("Heading");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("ClientCareDetailsHeadingId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Heading")
                        .IsUnique()
                        .HasDatabaseName("IX_tbl_ClientCareDetailsHeading_Heading");

                    b.ToTable("tbl_ClientCareDetailsHeading", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientCareDetailsTask", b =>
                {
                    b.Property<int>("ClientCareDetailsTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientCareDetailsTaskId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientCareDetailsTaskId"));

                    b.Property<int>("ClientCareDetailsHeadingId")
                        .HasColumnType("int")
                        .HasColumnName("ClientCareDetailsHeadingId");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Task")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("Task");

                    b.HasKey("ClientCareDetailsTaskId");

                    b.HasIndex("ClientCareDetailsHeadingId");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_ClientCareDetailsTask", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientCareObj", b =>
                {
                    b.Property<int>("CareObjId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CareObjId"));

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Note");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remark");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.HasKey("CareObjId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_ClientCareObj", null, t =>
                        {
                            t.Property("ClientId")
                                .HasColumnName("ClientId1");
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientCleaning", b =>
                {
                    b.Property<int>("CleaningId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CleaningId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CleaningId"));

                    b.Property<int>("AreasAndItems")
                        .HasColumnType("int")
                        .HasColumnName("AreasAndItems");

                    b.Property<DateTime>("DATEFROM")
                        .HasColumnType("datetime2")
                        .HasColumnName("DATEFROM");

                    b.Property<DateTime>("DATETO")
                        .HasColumnType("datetime2")
                        .HasColumnName("DATETO");

                    b.Property<string>("DAYOFCLEANING")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DAYOFCLEANING");

                    b.Property<string>("DescOfItem")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DescOfItem");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Details");

                    b.Property<string>("Disposal")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Disposal");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Image");

                    b.Property<string>("LocationOfItem")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LocationOfItem");

                    b.Property<DateTime>("MinuteAlloted")
                        .HasColumnType("datetime2")
                        .HasColumnName("MinuteAlloted");

                    b.Property<int>("NutritionId")
                        .HasColumnType("int")
                        .HasColumnName("NutritionId");

                    b.Property<string>("SEEVIDEO")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("SEEVIDEO");

                    b.Property<Guid>("STAFFId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("STAFFId");

                    b.Property<string>("SafetyHazard")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SafetyHazard");

                    b.Property<int>("WhereToGet")
                        .HasColumnType("int")
                        .HasColumnName("WhereToGet");

                    b.Property<string>("WhereToKeep")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WhereToKeep");

                    b.HasKey("CleaningId");

                    b.HasIndex("NutritionId");

                    b.HasIndex("STAFFId");

                    b.ToTable("tbl_Client_Cleaning", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientComplainRegister", b =>
                {
                    b.Property<int>("ComplainId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComplainId"));

                    b.Property<string>("ACTIONTAKEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ACTIONTAKEN");

                    b.Property<string>("COMPLAINANTCONTACT")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("COMPLAINANTCONTACT");

                    b.Property<string>("CONCERNSRAISED")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CONCERNSRAISED");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DATEOFACKNOWLEDGEMENT")
                        .HasColumnType("datetime2")
                        .HasColumnName("DATEOFACKNOWLEDGEMENT");

                    b.Property<DateTime>("DATERECIEVED")
                        .HasColumnType("datetime2")
                        .HasColumnName("DATERECIEVED");

                    b.Property<DateTime>("DUEDATE")
                        .HasColumnType("datetime2")
                        .HasColumnName("DUEDATE");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("EvidenceFilePath")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EvidenceFilePath");

                    b.Property<string>("FINALRESPONSETOFAMILY")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FINALRESPONSETOFAMILY");

                    b.Property<DateTime>("INCIDENTDATE")
                        .HasColumnType("datetime2")
                        .HasColumnName("INCIDENTDATE");

                    b.Property<string>("INVESTIGATIONOUTCOME")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("INVESTIGATIONOUTCOME");

                    b.Property<string>("IRFNUMBER")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IRFNUMBER ");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LETTERTOSTAFF")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LETTERTOSTAFF");

                    b.Property<string>("LINK")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LINK");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ManagerSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("REMARK")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("REMARK");

                    b.Property<string>("ROOTCAUSE")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ROOTCAUSE");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Reference");

                    b.Property<string>("SOURCEOFCOMPLAINTS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SOURCEOFCOMPLAINTS");

                    b.Property<string>("StaffSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusId");

                    b.HasKey("ComplainId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_Client_ComplainRegister", null, t =>
                        {
                            t.Property("ClientId")
                                .HasColumnName("ClientId1");
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientCongnitive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AbilityStatus")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("AbilityStatus");

                    b.Property<string>("AboutAppetit")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AboutAppetit");

                    b.Property<string>("AboutSwallow")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AboutSwallow");

                    b.Property<string>("AfterSkinIntegrity")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AfterSkinIntegrity");

                    b.Property<string>("AssociatedWithBedrail")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AssociatedWithBedrail");

                    b.Property<string>("AssociatedWithRecliner")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AssociatedWithRecliner");

                    b.Property<string>("BedrailEscalation")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("BedrailEscalation");

                    b.Property<string>("BedrailRisk")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("BedrailRisk");

                    b.Property<bool>("Bedrails")
                        .HasColumnType("bit")
                        .HasColumnName("Bedrails");

                    b.Property<string>("BeforeSkinIntegrity")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("BeforeSkinIntegrity");

                    b.Property<string>("BreathingManage")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("BreathingManage");

                    b.Property<bool>("CCTV")
                        .HasColumnType("bit")
                        .HasColumnName("CCTV");

                    b.Property<bool>("CathataCareRequired")
                        .HasColumnType("bit")
                        .HasColumnName("CathataCareRequired");

                    b.Property<string>("CathataConnected")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CathataConnected");

                    b.Property<string>("CathataEscalation")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("CathataEscalation");

                    b.Property<string>("CathataPosition")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CathataPosition");

                    b.Property<string>("CathataRecylced")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CathataRecylced");

                    b.Property<string>("ChangeCathata")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ChangeCathata");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("ControlOfCathata")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ControlOfCathata");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DifficultyInBreathing")
                        .HasColumnType("bit")
                        .HasColumnName("DifficultyInBreathing");

                    b.Property<string>("DuesServices")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DuesServices");

                    b.Property<string>("DurationOfUse")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DurationOfUse");

                    b.Property<string>("DuringTransfer")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DuringTransfer");

                    b.Property<string>("Esclation")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Esclation");

                    b.Property<string>("GeneralSkinCondition")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("GeneralSkinCondition");

                    b.Property<string>("Hearing")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Hearing");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LocationOfMissingPersonFound")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LocationOfMissingPersonFound");

                    b.Property<string>("PositionBedrail")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PositionBedrail");

                    b.Property<string>("PositionRecliner")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PositionRecliner");

                    b.Property<string>("PossibleBreakDown")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PossibleBreakDown");

                    b.Property<string>("PossibleTriggerToLeadClient")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PossibleTriggerToLeadClient");

                    b.Property<string>("PresureRelievingDevices")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PresureRelievingDevices");

                    b.Property<string>("ProtectionOrBreakdown")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ProtectionOrBreakdown");

                    b.Property<bool>("Recliner")
                        .HasColumnType("bit")
                        .HasColumnName("Recliner");

                    b.Property<string>("ReclinerEscalation")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("ReclinerEscalation");

                    b.Property<string>("ReclinerRisk")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ReclinerRisk");

                    b.Property<string>("RequireOrCondition")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RequireOrCondition");

                    b.Property<string>("RiskLevel")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("RiskLevel");

                    b.Property<string>("RiskRubbishstorage")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RiskRubbishstorage");

                    b.Property<string>("RisktoSU")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RisktoSU");

                    b.Property<string>("RisktoStaff")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RisktoStaff");

                    b.Property<string>("Rubbishstorage")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Rubbishstorage");

                    b.Property<string>("SUBeChecked")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SUBeChecked");

                    b.Property<string>("SUawareSkinCare")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SUawareSkinCare");

                    b.Property<bool>("SkinBreakDown")
                        .HasColumnType("bit")
                        .HasColumnName("SkinBreakDown");

                    b.Property<string>("SkinInspection")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SkinInspection");

                    b.Property<string>("Speech")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Speech");

                    b.Property<string>("StaffPrepare")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StaffPrepare");

                    b.Property<string>("StaffUseTheDevice")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StaffUseTheDevice");

                    b.Property<string>("StaffWhenUserIsFound")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StaffWhenUserIsFound");

                    b.Property<string>("StaffWhenUserIsMissing")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StaffWhenUserIsMissing");

                    b.Property<string>("SupplyOFCathata")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SupplyOFCathata");

                    b.Property<string>("TypeOfDeviceAvailable")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TypeOfDeviceAvailable");

                    b.Property<string>("UTI")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UTI");

                    b.Property<string>("UseCathata")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UseCathata");

                    b.Property<bool>("UserGetMissing")
                        .HasColumnType("bit")
                        .HasColumnName("UserGetMissing");

                    b.Property<string>("Vision")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Vision");

                    b.Property<string>("WhenBathing")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WhenBathing");

                    b.Property<string>("WhenBookAppointment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WhenBookAppointment");

                    b.Property<string>("WhenCleaning")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WhenCleaning");

                    b.Property<string>("WhenCommunication")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WhenCommunication");

                    b.Property<string>("WhenEating")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WhenEating");

                    b.Property<string>("WhenMedicating")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WhenMedicating");

                    b.Property<string>("WhenShopping")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WhenShopping");

                    b.Property<string>("WhenSleeping")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WhenSleeping");

                    b.Property<string>("WhenWalking")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WhenWalking");

                    b.Property<string>("WoundCommunicating")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WoundCommunicating");

                    b.Property<string>("WoundStage")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WoundStage");

                    b.Property<string>("WoundType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WoundType");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_ClientCongnitive", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientDailyTask", b =>
                {
                    b.Property<int>("DailyTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DailyTaskId"));

                    b.Property<DateTime>("AmendmentDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("AmendmentDate");

                    b.Property<Guid?>("ClientId")
                        .HasMaxLength(38)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DailyTaskName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DailyTaskName");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("DailyTaskId");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_ClientDailyTask", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientEyeHealthMonitoring", b =>
                {
                    b.Property<int>("EyeHealthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EyeHealthId"));

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Comment");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentScore")
                        .HasColumnType("int")
                        .HasColumnName("CurrentScore");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("MethodUsed")
                        .HasColumnType("int")
                        .HasColumnName("MethodUsed");

                    b.Property<string>("MethodUsedAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MethodUsedAttach");

                    b.Property<int>("PatientGlasses")
                        .HasColumnType("int")
                        .HasColumnName("PatientGlasses");

                    b.Property<string>("PhysicianResponse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PhysicianResponse");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("StatusAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StatusAttach");

                    b.Property<int>("StatusImage")
                        .HasColumnType("int")
                        .HasColumnName("StatusImage");

                    b.Property<int>("TargetSet")
                        .HasColumnType("int")
                        .HasColumnName("TargetSet");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2")
                        .HasColumnName("Time");

                    b.Property<int>("ToolUsed")
                        .HasColumnType("int")
                        .HasColumnName("ToolUsed");

                    b.Property<string>("ToolUsedAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ToolUsedAttach");

                    b.HasKey("EyeHealthId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_Client_EyeHealthMonitoring", null, t =>
                        {
                            t.Property("ClientId")
                                .HasColumnName("ClientId1");
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientFacility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AboutClient")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("AboutClient");

                    b.Property<string>("AccessCodeNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("AccessCodeNumber");

                    b.Property<string>("Address")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Address");

                    b.Property<int>("BusinessType")
                        .HasColumnType("int")
                        .HasColumnName("BusinessType");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasColumnName("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Description");

                    b.Property<string>("Email")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Email");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FacilityManagerEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacilityManagerName")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("FacilityManagerName");

                    b.Property<string>("FacilityManagerPhoneNumber")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("FacilityManagerPhoneNumber");

                    b.Property<string>("FacilityType")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("FacilityType");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<decimal?>("HourRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("IdNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("IdNumber");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Latitude")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Latitude");

                    b.Property<string>("Longitude")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Longitude");

                    b.Property<string>("Name")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Name");

                    b.Property<int>("NumberOfRooms")
                        .HasColumnType("int")
                        .HasColumnName("NumberOfRooms");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("PhoneNumber");

                    b.Property<string>("Profile")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("Profile");

                    b.Property<string>("RegistrationType")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("RegistrationType");

                    b.Property<string>("ServiceObjective")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("ServiceObjective");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WebsiteUrl")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Website");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_ClientFacility", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientFacilityRisk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("FacilityClientId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("FacilityClientId");

                    b.ToTable("tbl_ClientFacilityRisk", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientFacilityTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BeforePerformingTask")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("BeforePerformingTask");

                    b.Property<int>("FacilityClientId")
                        .HasColumnType("int");

                    b.Property<string>("HowToMigitate")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("HowToMigitate");

                    b.Property<string>("HowToTaskPerform")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("HowToTaskPerform");

                    b.Property<string>("Location")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("Location");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Name");

                    b.Property<string>("Picture")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("Picture");

                    b.Property<string>("RiskAssociated")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("RiskAssociated");

                    b.Property<string>("Video")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("Video");

                    b.Property<string>("WhatToDoAfterTaskCompleting")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("WhatToDoAfterTaskCompleting");

                    b.HasKey("Id");

                    b.HasIndex("FacilityClientId");

                    b.ToTable("tbl_ClientFacilityTask", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientFoodIntake", b =>
                {
                    b.Property<int>("FoodIntakeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FoodIntakeId"));

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Comment");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentIntake")
                        .HasColumnType("int")
                        .HasColumnName("CurrentIntake");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Goal")
                        .HasColumnType("int")
                        .HasColumnName("Goal");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhysicianResponse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PhysicianResponse");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("StatusAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StatusAttach");

                    b.Property<int>("StatusImage")
                        .HasColumnType("int")
                        .HasColumnName("StatusImage");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2")
                        .HasColumnName("Time");

                    b.HasKey("FoodIntakeId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_Client_FoodIntake", null, t =>
                        {
                            t.Property("ClientId")
                                .HasColumnName("ClientId1");
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientHealthCondition", b =>
                {
                    b.Property<int>("CHCId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CHCId"));

                    b.Property<Guid?>("ClientId")
                        .HasMaxLength(38)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("HCId")
                        .HasColumnType("int")
                        .HasColumnName("HCId");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("CHCId");

                    b.HasIndex("ClientId");

                    b.HasIndex("HCId");

                    b.ToTable("tbl_ClientHealthCondition", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientHeartRate", b =>
                {
                    b.Property<int>("HeartRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HeartRateId"));

                    b.Property<int>("Age")
                        .HasColumnType("int")
                        .HasColumnName("Age");

                    b.Property<int>("BeatsPerSeconds")
                        .HasColumnType("int")
                        .HasColumnName("BeatsPerSeconds");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Comment");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int")
                        .HasColumnName("Gender");

                    b.Property<string>("GenderAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("GenderAttach");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhysicianResponse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PhysicianResponse");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<int>("SeeChart")
                        .HasColumnType("int")
                        .HasColumnName("SeeChart");

                    b.Property<string>("SeeChartAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SeeChartAttach");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<int>("TargetHR")
                        .HasColumnType("int")
                        .HasColumnName("TargetHR");

                    b.Property<string>("TargetHRAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TargetHRAttach");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2")
                        .HasColumnName("Time");

                    b.HasKey("HeartRateId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_Client_HeartRate", null, t =>
                        {
                            t.Property("ClientId")
                                .HasColumnName("ClientId1");
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientHobbies", b =>
                {
                    b.Property<int>("CHId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CHId"));

                    b.Property<Guid?>("ClientId")
                        .HasMaxLength(38)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("HId")
                        .HasColumnType("int")
                        .HasColumnName("HId");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("CHId");

                    b.HasIndex("ClientId");

                    b.HasIndex("HId");

                    b.ToTable("tbl_ClientHobbies", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BillTo")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("BillTo");

                    b.Property<decimal?>("Charges")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Charges");

                    b.Property<int?>("ClienBillToId")
                        .HasColumnType("int")
                        .HasColumnName("ClienBillToId");

                    b.Property<int>("ClientInvoiceSummaryId")
                        .HasColumnType("int")
                        .HasColumnName("ClientInvoiceSummaryId");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Credit")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Credit");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("InvoiceDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("InvoiceDate");

                    b.Property<long>("InvoiceNo")
                        .HasColumnType("bigint")
                        .HasColumnName("InvoiceNo");

                    b.Property<string>("InvoiceNoWithMonth")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("InvoiceNoWithMonth");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("PeriodType")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("PeriodType");

                    b.Property<decimal?>("Total")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Total");

                    b.Property<int?>("TypeOfService")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientInvoiceSummaryId");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_ClientInvoice", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientInvoiceRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Period")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Period");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Rate");

                    b.Property<int>("ServiceTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceTypeId");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_ClientInvoiceRate", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientInvoiceRecords", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientInvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("ClientInvoiceId");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("FromDate");

                    b.Property<string>("Name")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("Name");

                    b.Property<string>("Notes")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("Notes");

                    b.Property<decimal?>("Number")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Number");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ToDate");

                    b.HasKey("Id");

                    b.HasIndex("ClientInvoiceId");

                    b.ToTable("tbl_ClientInvoiceRecords", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientInvoiceSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("FromDate");

                    b.Property<string>("Period")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Period");

                    b.Property<int>("ServiceTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceTypeId");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ToDate");

                    b.HasKey("Id");

                    b.ToTable("tbl_ClientInvoiceSummary", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientInvolvingParty", b =>
                {
                    b.Property<int>("ClientInvolvingPartyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientInvolvingPartyId"));

                    b.Property<string>("Address")
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("Address");

                    b.Property<Guid?>("ClientId")
                        .HasMaxLength(38)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("ClientInvolvingPartyItem")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ClientInvolvingPartyItem");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)")
                        .HasColumnName("Email");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<string>("Relationship")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Relationship");

                    b.Property<string>("Telephone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Telephone");

                    b.HasKey("ClientInvolvingPartyId");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_ClientInvolvingParty", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientKeyWorkerVoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("EndDate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("KeyWorkerId")
                        .HasColumnType("int")
                        .HasColumnName("KeyWorkerId");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("staffId");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartDate");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_ClientKeyWorkerVoice", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientKeyworkerNotes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("KeyworkerId")
                        .HasColumnType("int")
                        .HasColumnName("KeyworkerId");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Notes");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_ClientKeyworkerNotes", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientLogAudit", b =>
                {
                    b.Property<int>("LogAuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogAuditId"));

                    b.Property<string>("ActionRecommended")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ActionRecommended");

                    b.Property<string>("ActionTaken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ActionTaken");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Communication")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Communication");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("EvidenceFilePath")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EvidenceFilePath");

                    b.Property<string>("EvidenceOfActionTaken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EvidenceOfActionTaken");

                    b.Property<string>("ImproperDocumentation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ImproperDocumentation");

                    b.Property<string>("IsCareDifference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IsCareDifference");

                    b.Property<string>("IsCareExpected")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IsCareExpected");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LessonLearntAndShared")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LessonLearntAndShared");

                    b.Property<string>("LogURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LogURL");

                    b.Property<string>("ManagerSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameOfAuditor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NameOfAuditor");

                    b.Property<DateTime>("NextDueDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("NextDueDate");

                    b.Property<string>("Observations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Observations");

                    b.Property<string>("ProperDocumentation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ProperDocumentation");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Reference");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<int>("RepeatOfIncident")
                        .HasColumnType("int")
                        .HasColumnName("RepeatOfIncident");

                    b.Property<string>("RotCause")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RotCause");

                    b.Property<Guid?>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StaffSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("ThinkingServiceUsers")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ThinkingServiceUsers");

                    b.Property<string>("ThinkingStaff")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ThinkingStaff");

                    b.Property<string>("ThinkingStaffStop")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ThinkingStaffStop");

                    b.HasKey("LogAuditId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_Client_LogAudit", null, t =>
                        {
                            t.Property("ClientId")
                                .HasColumnName("ClientId1");
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientMatrixAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuditorName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("AuditorName");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("EndDate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMedAudit")
                        .HasColumnType("bit")
                        .HasColumnName("IsMedAudit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartDate");

                    b.Property<string>("closingStatement")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("closingStatement");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_ClientMatrixAudit", null, t =>
                        {
                            t.Property("ClientId")
                                .HasColumnName("ClientId1");
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientMealDays", b =>
                {
                    b.Property<int>("ClientMealId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientMealId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientMealId"));

                    b.Property<int>("ClientMealTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ClientMealTypeId");

                    b.Property<string>("HOWTOPREPARE")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("HOWTOPREPARE");

                    b.Property<string>("MEALDETAILS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MEALDETAILS");

                    b.Property<int>("MealDayofWeekId")
                        .HasColumnType("int")
                        .HasColumnName("MealDayofWeekId");

                    b.Property<int>("NutritionId")
                        .HasColumnType("int")
                        .HasColumnName("NutritionId");

                    b.Property<string>("PICTURE")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PICTURE");

                    b.Property<string>("SEEVIDEO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SEEVIDEO");

                    b.Property<int>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("TypeId");

                    b.HasKey("ClientMealId");

                    b.HasIndex("ClientMealTypeId");

                    b.HasIndex("MealDayofWeekId");

                    b.HasIndex("NutritionId");

                    b.ToTable("tbl_Client_MealDay", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientMealType", b =>
                {
                    b.Property<int>("ClientMealTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientMealTypeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientMealTypeId"));

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasColumnName("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("MealType")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("MealType");

                    b.HasKey("ClientMealTypeId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("MealType")
                        .IsUnique()
                        .HasDatabaseName("IX_tbl_Client_MealType_MealType");

                    b.ToTable("tbl_Client_MealType", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientMedAudit", b =>
                {
                    b.Property<int>("MedAuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedAuditId"));

                    b.Property<string>("ActionRecommended")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ActionRecommended");

                    b.Property<string>("ActionTaken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ActionTaken");

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attachment");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("EvidenceOfActionTaken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EvidenceOfActionTaken");

                    b.Property<int>("GapsInAdmistration")
                        .HasColumnType("int")
                        .HasColumnName("GapsInAdmistration");

                    b.Property<int>("HardCopyReview")
                        .HasColumnType("int")
                        .HasColumnName("HardCopyReview");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LessonLearntAndShared")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LessonLearntAndShared");

                    b.Property<string>("LogURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LogURL");

                    b.Property<string>("ManagerSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MarChartReview")
                        .HasColumnType("int")
                        .HasColumnName("MarChartReview");

                    b.Property<int>("MedicationConcern")
                        .HasColumnType("int")
                        .HasColumnName("MedicationConcern");

                    b.Property<int>("MedicationInfoUploadEefficiency")
                        .HasColumnType("int")
                        .HasColumnName("MedicationInfoUploadEefficiency");

                    b.Property<int>("MedicationSupplyEfficiency")
                        .HasColumnType("int")
                        .HasColumnName("MedicationSupplyEfficiency");

                    b.Property<DateTime>("NextDueDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("NextDueDate");

                    b.Property<string>("Observations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Observations");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Reference");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<int>("RepeatOfIncident")
                        .HasColumnType("int")
                        .HasColumnName("RepeatOfIncident");

                    b.Property<string>("RightsOfMedication")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RightsOfMedication");

                    b.Property<string>("RotCause")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RotCause");

                    b.Property<Guid?>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StaffSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("ThinkingServiceUsers")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ThinkingServiceUsers");

                    b.HasKey("MedAuditId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_Client_MedAudit", null, t =>
                        {
                            t.Property("ClientId")
                                .HasColumnName("ClientId1");
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientMedication", b =>
                {
                    b.Property<int>("ClientMedicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientMedicationId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientMedicationId"));

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientMedImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ClientMedImage");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dossage")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Dossage");

                    b.Property<string>("ExpiryDate")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("ExpiryDate");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Frequency");

                    b.Property<int>("Gap_Hour")
                        .HasColumnType("int")
                        .HasColumnName("Gap_Hour");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("IsDelete");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPause")
                        .HasColumnType("bit")
                        .HasColumnName("IsPause");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Means")
                        .HasColumnType("int")
                        .HasColumnName("Means");

                    b.Property<int>("MedicationId")
                        .HasColumnType("int")
                        .HasColumnName("MedicationId");

                    b.Property<int>("MedicationManufacturerId")
                        .HasColumnType("int")
                        .HasColumnName("MedicationManufacturerId");

                    b.Property<int?>("MedicationRouteId")
                        .HasColumnType("int");

                    b.Property<string>("PRNGuideline")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PRNGuideline");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Remark");

                    b.Property<string>("Route")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Route");

                    b.Property<string>("StartDate")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("StartDate");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Status");

                    b.Property<string>("StopDate")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("StopDate");

                    b.Property<int>("TimeCritical")
                        .HasColumnType("int")
                        .HasColumnName("TimeCritical");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("Type");

                    b.HasKey("ClientMedicationId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("MedicationId");

                    b.HasIndex("MedicationManufacturerId");

                    b.HasIndex("MedicationRouteId")
                        .IsUnique()
                        .HasFilter("[MedicationRouteId] IS NOT NULL");

                    b.ToTable("tbl_ClientMedication", null, t =>
                        {
                            t.Property("ClientId")
                                .HasColumnName("ClientId1");
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientMedicationAdditional", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientMedicationPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("ClientMedicationPeriodId");

                    b.Property<string>("DoseGiven")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("DoseGiven");

                    b.Property<string>("DoseTobeGiven")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DoseTobeGiven");

                    b.Property<string>("FeedBack")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("FeedBack");

                    b.Property<string>("Instruction")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("Instruction");

                    b.Property<string>("RotaDate")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("RotaDate");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Status");

                    b.Property<TimeSpan?>("StopTime")
                        .HasColumnType("time")
                        .HasColumnName("StopTime");

                    b.Property<TimeSpan?>("Time")
                        .HasColumnType("time")
                        .HasColumnName("Time");

                    b.HasKey("Id");

                    b.ToTable("tbl_ClientMedicationAdditional", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientMedicationDay", b =>
                {
                    b.Property<int>("ClientMedicationDayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientMedicationDayId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientMedicationDayId"));

                    b.Property<int>("ClientMedicationId")
                        .HasColumnType("int")
                        .HasColumnName("ClientMedicationId");

                    b.Property<int?>("ClientMedicationId1")
                        .HasColumnType("int");

                    b.Property<int>("RotaDayofWeekId")
                        .HasColumnType("int")
                        .HasColumnName("RotaDayofWeekId");

                    b.HasKey("ClientMedicationDayId");

                    b.HasIndex("ClientMedicationId");

                    b.HasIndex("ClientMedicationId1");

                    b.HasIndex("RotaDayofWeekId")
                        .IsUnique();

                    b.ToTable("tbl_ClientMedicationDay", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientMedicationPeriod", b =>
                {
                    b.Property<int>("ClientMedicationPeriodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientMedicationPeriodId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientMedicationPeriodId"));

                    b.Property<int>("ClientMedicationDayId")
                        .HasColumnType("int")
                        .HasColumnName("ClientMedicationDayId");

                    b.Property<int>("ClientRotaTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ClientRotaTypeId");

                    b.Property<bool>("MedLiveTrackerDelete")
                        .HasColumnType("bit");

                    b.Property<int>("RotaId")
                        .HasColumnType("int");

                    b.Property<string>("StartTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StopTime")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientMedicationPeriodId");

                    b.HasIndex("ClientMedicationDayId");

                    b.HasIndex("ClientRotaTypeId");

                    b.ToTable("tbl_ClientMedicationPeriod", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientMgtVisit", b =>
                {
                    b.Property<int>("VisitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitId"));

                    b.Property<string>("ActionRequired")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ActionRequired");

                    b.Property<string>("ActionsTakenByMPCC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ActionsTakenByMPCC");

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attachment");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("EvidenceOfActionTaken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EvidenceOfActionTaken");

                    b.Property<int>("HowToComplain")
                        .HasColumnType("int")
                        .HasColumnName("HowToComplain");

                    b.Property<string>("ImprovementExpect")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ImprovementExpect");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LessonLearntAndShared")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LessonLearntAndShared");

                    b.Property<string>("ManagerSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NextCheckDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("NextCheckDate");

                    b.Property<string>("Observation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Observation");

                    b.Property<int>("RateManagers")
                        .HasColumnType("int")
                        .HasColumnName("RateManagers");

                    b.Property<int>("RateServiceRecieving")
                        .HasColumnType("int")
                        .HasColumnName("RateServiceRecieving");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Reference");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<string>("RotCause")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RotCause");

                    b.Property<int>("ServiceRecommended")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRecommended");

                    b.Property<Guid?>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StaffSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("URL");

                    b.HasKey("VisitId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_Client_MgtVisit", null, t =>
                        {
                            t.Property("ClientId")
                                .HasColumnName("ClientId1");
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientNutrition", b =>
                {
                    b.Property<int>("NutritionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NutritionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NutritionId"));

                    b.Property<string>("CleaningSpecialNote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CleaningSpecialNote");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DATEFROM")
                        .HasColumnType("datetime2")
                        .HasColumnName("DATEFROM");

                    b.Property<DateTime>("DATETO")
                        .HasColumnType("datetime2")
                        .HasColumnName("DATETO");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("MealSpecialNote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MealSpecialNote");

                    b.Property<string>("ShoppingSpecialNote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ShoppingSpecialNote");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffId");

                    b.HasKey("NutritionId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("StaffId");

                    b.ToTable("tbl_Client_Nutrition", null, t =>
                        {
                            t.Property("ClientId")
                                .HasColumnName("ClientId1");
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientOxygenLvl", b =>
                {
                    b.Property<int>("OxygenLvlId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OxygenLvlId"));

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Comment");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentReading")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CurrentReading");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhysicianResponse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PhysicianResponse");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<int>("SeeChart")
                        .HasColumnType("int")
                        .HasColumnName("SeeChart");

                    b.Property<string>("SeeChartAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SeeChartAttach");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<int>("TargetOxygen")
                        .HasColumnType("int")
                        .HasColumnName("TargetOxygen");

                    b.Property<string>("TargetOxygenAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TargetOxygenAttach");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2")
                        .HasColumnName("Time");

                    b.HasKey("OxygenLvlId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_Client_Oxygenlvl", null, t =>
                        {
                            t.Property("ClientId")
                                .HasColumnName("ClientId1");
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientPainChart", b =>
                {
                    b.Property<int>("PainChartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PainChartId"));

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Comment");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Location")
                        .HasColumnType("int")
                        .HasColumnName("Location");

                    b.Property<string>("LocationAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LocationAttach");

                    b.Property<int>("PainLvl")
                        .HasColumnType("int")
                        .HasColumnName("PainLvl");

                    b.Property<string>("PhysicianResponse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PhysicianResponse");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("StatusAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StatusAttach");

                    b.Property<int>("StatusImage")
                        .HasColumnType("int")
                        .HasColumnName("StatusImage");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2")
                        .HasColumnName("Time");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("Type");

                    b.Property<string>("TypeAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TypeAttach");

                    b.HasKey("PainChartId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_Client_PainChart", null, t =>
                        {
                            t.Property("ClientId")
                                .HasColumnName("ClientId1");
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientPerformanceIndicator", b =>
                {
                    b.Property<int>("PerformanceIndicatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PerformanceIndicatorId"));

                    b.Property<string>("ClientSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DueDate");

                    b.Property<string>("Heading")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Heading");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ManagerSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("Rating");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<string>("StaffSignature")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PerformanceIndicatorId");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_ClientPerformanceIndicator", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientPerformanceIndicatorTask", b =>
                {
                    b.Property<int>("PerformanceIndicatorTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PerformanceIndicatorTaskId"));

                    b.Property<int>("PerformanceIndicatorId")
                        .HasColumnType("int")
                        .HasColumnName("StaffCompetenceTestId");

                    b.Property<int>("Score")
                        .HasColumnType("int")
                        .HasColumnName("Score");

                    b.Property<int>("Title")
                        .HasColumnType("int")
                        .HasColumnName("Title");

                    b.HasKey("PerformanceIndicatorTaskId");

                    b.HasIndex("PerformanceIndicatorId");

                    b.ToTable("tbl_ClientPerformanceIndicatorTask", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientProgram", b =>
                {
                    b.Property<int>("ProgramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgramId"));

                    b.Property<string>("ActionRequired")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ActionRequired");

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attachment");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<int>("DaysOfChoice")
                        .HasColumnType("int")
                        .HasColumnName("DaysOfChoice");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("DetailsOfProgram")
                        .HasColumnType("int")
                        .HasColumnName("DetailsOfProgram");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ManagerSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NextCheckDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("NextCheckDate");

                    b.Property<string>("Observation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Observation");

                    b.Property<int>("PlaceLocationProgram")
                        .HasColumnType("int")
                        .HasColumnName("PlaceLocationProgram");

                    b.Property<int>("ProgramOfChoice")
                        .HasColumnType("int")
                        .HasColumnName("ProgramOfChoice");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Reference");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<Guid?>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StaffSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("URL");

                    b.HasKey("ProgramId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_Client_Program", null, t =>
                        {
                            t.Property("ClientId")
                                .HasColumnName("ClientId1");
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientPulseRate", b =>
                {
                    b.Property<int>("PulseRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PulseRateId"));

                    b.Property<string>("Chart")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Chart");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Comment");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentPulse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CurrentPulse");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhysicianResponse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PhysicianResponse");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<int>("SeeChart")
                        .HasColumnType("int")
                        .HasColumnName("SeeChart");

                    b.Property<string>("SeeChartAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SeeChartAttach");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<int>("TargetPulse")
                        .HasColumnType("int")
                        .HasColumnName("TargetPulse");

                    b.Property<string>("TargetPulseAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TargetPulseAttach");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2")
                        .HasColumnName("Time");

                    b.HasKey("PulseRateId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_Client_PulseRate", null, t =>
                        {
                            t.Property("ClientId")
                                .HasColumnName("ClientId1");
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientRegulatoryContact", b =>
                {
                    b.Property<int>("ClientRegulatoryContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientRegulatoryContactId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientRegulatoryContactId"));

                    b.Property<int>("BaseRecordItemId")
                        .HasColumnType("int")
                        .HasColumnName("BaseRecordItemId");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DatePerformed")
                        .HasColumnType("datetime2")
                        .HasColumnName("DatePerformed");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DueDate");

                    b.Property<string>("Evidence")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Evidence");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("ClientRegulatoryContactId");

                    b.HasIndex("BaseRecordItemId");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_ClientRegulatoryContact", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientRota", b =>
                {
                    b.Property<int>("ClientRotaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientRotaId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientRotaId"));

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<int>("ClientRotaTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ClientRotaTypeId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("ClientRotaId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ClientRotaTypeId");

                    b.ToTable("tbl_ClientRota", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientRotaDays", b =>
                {
                    b.Property<int>("ClientRotaDaysId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientRotaDaysId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientRotaDaysId"));

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("ClientRotaId")
                        .HasColumnType("int")
                        .HasColumnName("ClientRotaId");

                    b.Property<int?>("ClientRotaTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ClientRotaTypeId");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("RotaDayofWeekId")
                        .HasColumnType("int")
                        .HasColumnName("RotaDayofWeekId");

                    b.Property<int>("RotaId")
                        .HasColumnType("int")
                        .HasColumnName("RotaId");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("StartTime");

                    b.Property<string>("StopTime")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("StopTime");

                    b.Property<string>("WeekDay")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("WeekDay");

                    b.HasKey("ClientRotaDaysId");

                    b.HasIndex("ClientRotaId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("RotaDayofWeekId");

                    b.HasIndex("RotaId");

                    b.ToTable("tbl_ClientRotaDays", null, t =>
                        {
                            t.Property("ClientId")
                                .HasColumnName("ClientId1");
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientRotaTask", b =>
                {
                    b.Property<int>("ClientRotaTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientRotaTaskId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientRotaTaskId"));

                    b.Property<int>("ClientRotaDaysId")
                        .HasColumnType("int")
                        .HasColumnName("ClientRotaDaysId");

                    b.Property<int>("RotaTaskId")
                        .HasColumnType("int")
                        .HasColumnName("RotaTaskId");

                    b.HasKey("ClientRotaTaskId");

                    b.HasIndex("ClientRotaDaysId");

                    b.HasIndex("RotaTaskId");

                    b.ToTable("tbl_ClientRotaTask", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientRotaType", b =>
                {
                    b.Property<int>("ClientRotaTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientRotaTypeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientRotaTypeId"));

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasColumnName("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("RotaType")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("RotaType");

                    b.HasKey("ClientRotaTypeId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("RotaType")
                        .IsUnique()
                        .HasDatabaseName("IX_tbl_ClientRotaType_RotaType");

                    b.ToTable("tbl_ClientRotaType", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientSeizure", b =>
                {
                    b.Property<int>("SeizureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeizureId"));

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Often")
                        .HasColumnType("int")
                        .HasColumnName("Often");

                    b.Property<string>("PhysicianResponse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PhysicianResponse");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<int>("SeizureLength")
                        .HasColumnType("int")
                        .HasColumnName("SeizureLength");

                    b.Property<string>("SeizureLengthAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SeizureLengthAttach");

                    b.Property<int>("SeizureType")
                        .HasColumnType("int")
                        .HasColumnName("SeizureType");

                    b.Property<string>("SeizureTypeAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SeizureTypeAttach");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("StatusAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StatusAttach");

                    b.Property<int>("StatusImage")
                        .HasColumnType("int")
                        .HasColumnName("StatusImage");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2")
                        .HasColumnName("Time");

                    b.Property<string>("WhatHappened")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WhatHappened");

                    b.HasKey("SeizureId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_Client_Seizure", null, t =>
                        {
                            t.Property("ClientId")
                                .HasColumnName("ClientId1");
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientServiceDetail", b =>
                {
                    b.Property<int>("ClientServiceDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientServiceDetailId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientServiceDetailId"));

                    b.Property<decimal>("AmountGiven")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("AmountGiven");

                    b.Property<decimal>("AmountReturned")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("AmountReturned");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTimeOffset>("ServiceDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("ServiceDate");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("ClientServiceDetailId");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_ClientServiceDetail", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientServiceDetailItem", b =>
                {
                    b.Property<int>("ClientServiceDetailItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientServiceDetailItemId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientServiceDetailItemId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Amount");

                    b.Property<int>("ClientServiceDetailId")
                        .HasColumnType("int")
                        .HasColumnName("ClientServiceDetailId");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("ItemName");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("Quantity");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Rate");

                    b.HasKey("ClientServiceDetailItemId");

                    b.HasIndex("ClientServiceDetailId");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_ClientServiceDetailItem", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientServiceDetailReceipt", b =>
                {
                    b.Property<int>("ClientServiceDetailReceiptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientServiceDetailReceiptId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientServiceDetailReceiptId"));

                    b.Property<string>("Attachment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attachment");

                    b.Property<int>("ClientServiceDetailId")
                        .HasColumnType("int")
                        .HasColumnName("ClientServiceDetailId");

                    b.HasKey("ClientServiceDetailReceiptId");

                    b.HasIndex("ClientServiceDetailId");

                    b.ToTable("tbl_ClientServiceDetailReceipt", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientServiceWatch", b =>
                {
                    b.Property<int>("WatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WatchId"));

                    b.Property<string>("ActionRequired")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ActionRequired");

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attachment");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<int>("Contact")
                        .HasColumnType("int")
                        .HasColumnName("Contact");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Details")
                        .HasColumnType("int")
                        .HasColumnName("Details");

                    b.Property<int>("Incident")
                        .HasColumnType("int")
                        .HasColumnName("Incident");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ManagerSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NextCheckDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("NextCheckDate");

                    b.Property<string>("Observation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Observation");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Reference");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<Guid?>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StaffSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("URL");

                    b.HasKey("WatchId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_Client_ServiceWatch", null, t =>
                        {
                            t.Property("ClientId")
                                .HasColumnName("ClientId1");
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientShopping", b =>
                {
                    b.Property<int>("ShoppingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ShoppingId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShoppingId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Amount");

                    b.Property<DateTime>("DATEFROM")
                        .HasColumnType("datetime2")
                        .HasColumnName("DATEFROM");

                    b.Property<DateTime>("DATETO")
                        .HasColumnType("datetime2")
                        .HasColumnName("DATETO");

                    b.Property<string>("DAYOFSHOPPING")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DAYOFSHOPPING");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Description");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Image");

                    b.Property<string>("Item")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Item");

                    b.Property<string>("LocationOfPurchase")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("LocationOfPurchase");

                    b.Property<string>("MeansOfPurchase")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("MeansOfPurchase");

                    b.Property<int>("NutritionId")
                        .HasColumnType("int")
                        .HasColumnName("NutritionId");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("Quantity");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("STAFFId");

                    b.HasKey("ShoppingId");

                    b.HasIndex("NutritionId");

                    b.HasIndex("StaffId");

                    b.ToTable("tbl_Client_Shopping", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientSupportPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessCommunity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AccessCommunity");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("HabitateHomeEnvironment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("HabitateHomeEnvironment");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("MentalHealth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MentalHealth");

                    b.Property<string>("PersonalHygiene")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PersonalHygiene");

                    b.Property<string>("Reltaionship")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Reltaionship");

                    b.Property<string>("SocialCareNeeds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SocialCareNeeds");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_ClientSupportPlan", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientSupportPlanGoal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientSupportPlanId")
                        .HasColumnType("int")
                        .HasColumnName("ClientSupportPlanId");

                    b.Property<string>("Goal")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Goal");

                    b.Property<string>("Help")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Help");

                    b.Property<string>("Important")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Important");

                    b.Property<string>("Success")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Success");

                    b.HasKey("Id");

                    b.HasIndex("ClientSupportPlanId");

                    b.ToTable("tbl_ClientSupportPlanGoal", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientSupportPlanGoalAchieve", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientSupportPlanGoalId")
                        .HasColumnType("int")
                        .HasColumnName("ClientSupportPlanGoalId");

                    b.Property<string>("DeliveryPlan")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DeliveryPlan");

                    b.Property<DateTime?>("ReviewDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ReviewDate");

                    b.Property<DateTime?>("TargetDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("TargetDate");

                    b.HasKey("Id");

                    b.HasIndex("ClientSupportPlanGoalId");

                    b.ToTable("tbl_ClientSupportPlanGoalAchieve", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientVoice", b =>
                {
                    b.Property<int>("VoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VoiceId"));

                    b.Property<string>("ActionRequired")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ActionRequired");

                    b.Property<string>("ActionsTakenByMPCC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ActionsTakenByMPCC");

                    b.Property<string>("AreasOfImprovements")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AreasOfImprovements");

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attachment");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("EvidenceOfActionTaken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EvidenceOfActionTaken");

                    b.Property<string>("HealthGoalLongTerm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("HealthGoalLongTerm");

                    b.Property<string>("HealthGoalShortTerm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("HealthGoalShortTerm");

                    b.Property<int>("InterestedInPrograms")
                        .HasColumnType("int")
                        .HasColumnName("InterestedInPrograms");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LessonLearntAndShared")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LessonLearntAndShared");

                    b.Property<string>("ManagerSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("NextCheckDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("NextCheckDate");

                    b.Property<int>("OfficeStaffSupport")
                        .HasColumnType("int")
                        .HasColumnName("OfficeStaffSupport");

                    b.Property<int>("RateServiceRecieving")
                        .HasColumnType("int")
                        .HasColumnName("RateServiceRecieving");

                    b.Property<int>("RateStaffAttending")
                        .HasColumnType("int")
                        .HasColumnName("RateStaffAttending");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Reference");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<string>("RotCause")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RotCause");

                    b.Property<string>("SomethingSpecial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SomethingSpecial");

                    b.Property<Guid?>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StaffSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("URL");

                    b.HasKey("VoiceId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_Client_Voice", null, t =>
                        {
                            t.Property("ClientId")
                                .HasColumnName("ClientId1");
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientWoundCare", b =>
                {
                    b.Property<int>("WoundCareId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WoundCareId"));

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Comment");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Goal")
                        .HasColumnType("int")
                        .HasColumnName("Goal");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Location")
                        .HasColumnType("int")
                        .HasColumnName("Location");

                    b.Property<string>("LocationAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LocationAttach");

                    b.Property<string>("MeasurementAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MeasurementAttach");

                    b.Property<int>("Measurment")
                        .HasColumnType("int")
                        .HasColumnName("Measurment");

                    b.Property<int>("PainLvl")
                        .HasColumnType("int")
                        .HasColumnName("PainLvl");

                    b.Property<string>("PhysicianResponse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PhysicianResponse");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("StatusAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StatusAttach");

                    b.Property<int>("StatusImage")
                        .HasColumnType("int")
                        .HasColumnName("StatusImage");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2")
                        .HasColumnName("Time");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("Type");

                    b.Property<string>("TypeAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TypeAttach");

                    b.Property<int>("UlcerStage")
                        .HasColumnType("int")
                        .HasColumnName("UlcerStage");

                    b.Property<string>("UlcerStageAttach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UlcerStageAttach");

                    b.Property<int>("WoundCause")
                        .HasColumnType("int")
                        .HasColumnName("WoundCause");

                    b.HasKey("WoundCareId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_Client_WoundCare", null, t =>
                        {
                            t.Property("ClientId")
                                .HasColumnName("ClientId1");
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.Communication", b =>
                {
                    b.Property<int>("CommunicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CommunicationId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommunicationId"));

                    b.Property<DateTime>("CommuncationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CommuncationDate");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FromUserId");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit")
                        .HasColumnName("IsRead");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Message");

                    b.Property<string>("Subject")
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)")
                        .HasColumnName("Subject");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ToUserId");

                    b.HasKey("CommunicationId");

                    b.ToTable("tbl_Communication", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.Company", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompanyId");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Address");

                    b.Property<int?>("AdminAdvertisementId")
                        .HasColumnType("int")
                        .HasColumnName("AdminAdvertisementId");

                    b.Property<int?>("AdminmessageId")
                        .HasColumnType("int");

                    b.Property<string>("CityOfOperation")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("CityOfOperation");

                    b.Property<string>("CompanyCode")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("CompanyCode");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("CompanyName");

                    b.Property<string>("Complaint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactUs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Country");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Currency");

                    b.Property<string>("CurrentCqcRating")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("CurrentCqcRating");

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnType("datetime2")
                        .HasColumnName("DateFrom");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("datetime2")
                        .HasColumnName("DateTo");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTrainingModule")
                        .HasColumnType("bit")
                        .HasColumnName("IsTrainingModule");

                    b.Property<string>("Language")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Language");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LogoUrl");

                    b.Property<string>("OurPhilosophy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PPE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("PostCode");

                    b.Property<string>("Purpose")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Telephone");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Website");

                    b.HasKey("CompanyId");

                    b.ToTable("tbl_Company", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.CompanyBank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountNo")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("AccountNo");

                    b.Property<string>("BankName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("BankName");

                    b.Property<Guid?>("CompanyId")
                        .HasMaxLength(450)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompanyId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("InstitudionNo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("InstitudionNo");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOperating")
                        .HasColumnType("bit")
                        .HasColumnName("IsOperating");

                    b.Property<bool>("IsUKBank")
                        .HasColumnType("bit")
                        .HasColumnName("IsUKBank");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("SortCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("SortCode");

                    b.Property<string>("Title")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Title");

                    b.Property<string>("TransitNo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("TransitNo");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_CompanyBank", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.CompanyContactModel", b =>
                {
                    b.Property<int>("CompanyContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CompanyContactId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyContactId"));

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompanyId");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ContactEmail");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ContactName");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ContactTelephone");

                    b.HasKey("CompanyContactId");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.ToTable("tbl_CompanyContact", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.CompanyMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanysMessage")
                        .IsRequired()
                        .HasMaxLength(1025)
                        .HasColumnType("nvarchar(1025)")
                        .HasColumnName("CompanysMessage");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.HasKey("Id");

                    b.ToTable("tbl_CompanyMessage", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.CompanyModel", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AdminAdvertisementId")
                        .HasColumnType("int");

                    b.Property<int?>("AdminmessageId")
                        .HasColumnType("int");

                    b.Property<string>("CityOfOperation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Complaint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactUs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentCqcRating")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsTrainingModule")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OurPhilosophy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PPE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Purpose")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyId");

                    b.HasIndex("UserId1");

                    b.ToTable("CompanyModel");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.CompanyOnlineTraining", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompanyId");

                    b.Property<int>("OnlineTrainingId")
                        .HasColumnType("int")
                        .HasColumnName("OnlineTrainingId");

                    b.HasKey("Id");

                    b.ToTable("tbl_CompanyOnlineTraining", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.CompanyPincode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Pincode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Pincode");

                    b.HasKey("Id");

                    b.ToTable("tbl_CompanyPincode", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.CompanyReception", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Email");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Name");

                    b.Property<string>("Notes")
                        .HasMaxLength(1052)
                        .HasColumnType("nvarchar(1052)");

                    b.Property<string>("logoUrl")
                        .HasMaxLength(1052)
                        .HasColumnType("nvarchar(1052)")
                        .HasColumnName("logoUrl");

                    b.HasKey("Id");

                    b.ToTable("tbl_CompanyReception", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.CompanyTrainingImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AllCoursesImg")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("AllCoursesImg");

                    b.Property<string>("BannerImg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CertificationImg")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("CertificationImg");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompanyId");

                    b.Property<string>("InductionImg")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("InductionImg");

                    b.Property<string>("LibarayImg")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("LibarayImg");

                    b.Property<string>("MyCoursesImg")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("MyCoursesImg");

                    b.Property<string>("SupportImg")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("SupportImg");

                    b.HasKey("Id");

                    b.ToTable("tbl_CompanyTrainingImage", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ComplainOfficerToAct", b =>
                {
                    b.Property<int>("ComplainOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ComplainOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComplainOfficerToActId"));

                    b.Property<int>("ComplainId")
                        .HasColumnType("int")
                        .HasColumnName("ComplainId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("ComplainOfficerToActId");

                    b.HasIndex("ComplainId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_Complain_OfficerToAct", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ComplainRegistor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Ac_Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Ac_Date");

                    b.Property<DateTime?>("Ac_DateOfIncident")
                        .HasColumnType("datetime2")
                        .HasColumnName("Ac_DateOfIncident");

                    b.Property<string>("Clc_AnyInfo")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("Clc_AnyInfo");

                    b.Property<string>("Clc_Attachment")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Clc_Attachment");

                    b.Property<DateTime?>("Clc_Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Clc_Date");

                    b.Property<string>("Clc_Status")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Clc_Status");

                    b.Property<string>("ClosingStatment")
                        .HasMaxLength(1052)
                        .HasColumnType("nvarchar(1052)")
                        .HasColumnName("ClosingStatment");

                    b.Property<string>("Cls_AnyInfo")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("Cls_AnyInfo");

                    b.Property<string>("Cls_Attachment")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Cls_Attachment");

                    b.Property<DateTime?>("Cls_Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Cls_Date");

                    b.Property<string>("Cls_Status")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Cls_Status");

                    b.Property<DateTime>("ComplainCloseDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DateComplainCloseDate");

                    b.Property<DateTime>("ComplainDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ComplainDate");

                    b.Property<string>("ContentOfOfficer")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("ContentOfOfficer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Ev_Attachment")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Ev_Attachment");

                    b.Property<DateTime?>("Ev_Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Ev_Date");

                    b.Property<string>("Ev_Decision")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("Ev_Decision");

                    b.Property<string>("Ev_Reference")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Ev_Reference");

                    b.Property<string>("Ev_Status")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Ev_Status");

                    b.Property<string>("GeneralStatus")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("GeneralStatus");

                    b.Property<string>("Ido_AnyOtherInfo")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("Ido_AnyOtherInfo");

                    b.Property<string>("Ido_Attachment")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Ido_Attachment");

                    b.Property<DateTime?>("Ido_Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Ido_Date");

                    b.Property<string>("Ido_ListOfConcern")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("Ido_ListOfConcern");

                    b.Property<bool>("Ido_Notify")
                        .HasColumnType("bit")
                        .HasColumnName("Ido_Notify");

                    b.Property<string>("Ido_StaffResponse")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("Ido_StaffResponse");

                    b.Property<string>("Ido_Status")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Ido_Status");

                    b.Property<string>("IoP_AnyOtherInfo")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("IoP_AnyOtherInfo");

                    b.Property<string>("IoP_Attachment")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("IoP_Attachment");

                    b.Property<DateTime?>("IoP_Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("IoP_Date");

                    b.Property<string>("IoP_ListOfConcern")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("IoP_ListOfConcern");

                    b.Property<bool>("IoP_Notify")
                        .HasColumnType("bit")
                        .HasColumnName("IoP_Notify");

                    b.Property<string>("IoP_Status")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("IoP_Status");

                    b.Property<string>("ListOfConcern")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ListOfConcern");

                    b.Property<bool>("M_ChecktheRecord")
                        .HasColumnType("bit")
                        .HasColumnName("M_ChecktheRecord");

                    b.Property<bool>("M_Independent")
                        .HasColumnType("bit")
                        .HasColumnName("M_Independent");

                    b.Property<bool>("M_OnetoOne")
                        .HasColumnType("bit")
                        .HasColumnName("M_OnetoOne");

                    b.Property<string>("M_Other")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("M_Other");

                    b.Property<bool>("M_SpokenToStaff")
                        .HasColumnType("bit")
                        .HasColumnName("M_SpokenToStaff");

                    b.Property<bool>("M_VisitedYou")
                        .HasColumnType("bit")
                        .HasColumnName("M_VisitedYou");

                    b.Property<bool>("M_Whistle")
                        .HasColumnType("bit")
                        .HasColumnName("M_Whistle");

                    b.Property<string>("OfficerName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("OfficerName");

                    b.Property<string>("PersonMakingComplain")
                        .HasMaxLength(1052)
                        .HasColumnType("nvarchar(1052)")
                        .HasColumnName("PersonMakingComplain");

                    b.Property<string>("Pi_AnyOther")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("Pi_AnyOther");

                    b.Property<DateTime?>("Pi_Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Pi_Date");

                    b.Property<bool>("Pi_Notify")
                        .HasColumnType("bit")
                        .HasColumnName("Pi_Notify");

                    b.Property<string>("Pi_Status")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Pi_Status");

                    b.Property<string>("RC_CasuesWithIncident")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("RC_CasuesWithIncident");

                    b.Property<string>("RC_Prevented")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("RC_Prevented");

                    b.Property<bool>("RC_Shared")
                        .HasColumnType("bit")
                        .HasColumnName("RC_Shared");

                    b.Property<string>("ReasonOfPending")
                        .HasMaxLength(1052)
                        .HasColumnType("nvarchar(1052)")
                        .HasColumnName("ReasonOfPending");

                    b.Property<string>("Reference")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Reference");

                    b.Property<string>("TypeOfComplain")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("TypeOfComplain");

                    b.HasKey("Id");

                    b.ToTable("tbl_ComplainRegistor", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ComplainRegistorClients", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<int>("ComplainRegistorId")
                        .HasColumnType("int")
                        .HasColumnName("ComplainRegistorId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ComplainRegistorId");

                    b.ToTable("tbl_ComplainRegistorClients", null, t =>
                        {
                            t.Property("ClientId")
                                .HasColumnName("ClientId1");
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ComplainRegistorStaff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ComplainRegistorId")
                        .HasColumnType("int")
                        .HasColumnName("ComplainRegistorId");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffId");

                    b.Property<string>("StaffResponse")
                        .HasMaxLength(1056)
                        .HasColumnType("nvarchar(1056)")
                        .HasColumnName("StaffResponse");

                    b.HasKey("Id");

                    b.HasIndex("ComplainRegistorId");

                    b.HasIndex("StaffId");

                    b.ToTable("tbl_ComplainRegistorStaff", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ComplainStaffName", b =>
                {
                    b.Property<int>("ComplainStaffNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ComplainStaffNameId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComplainStaffNameId"));

                    b.Property<int>("ComplainId")
                        .HasColumnType("int")
                        .HasColumnName("ComplainId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("ComplainStaffNameId");

                    b.HasIndex("ComplainId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_Complain_StaffName", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.Complements", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachment")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("Attachment");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<string>("Name")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("Name");

                    b.Property<string>("Remark")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("Remarks");

                    b.Property<string>("Subject")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("Subject");

                    b.Property<string>("Summary")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("Summary");

                    b.Property<string>("URL")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("URL");

                    b.HasKey("Id");

                    b.ToTable("tbl_Complements", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ConsentCare", b =>
                {
                    b.Property<int>("CareId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CareId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CareId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<int>("Name")
                        .HasColumnType("int")
                        .HasColumnName("Name");

                    b.Property<int>("PersonalDetailId")
                        .HasColumnType("int")
                        .HasColumnName("PersonalDetailId");

                    b.Property<int>("Signature")
                        .HasColumnType("int")
                        .HasColumnName("Signature");

                    b.HasKey("CareId");

                    b.HasIndex("PersonalDetailId")
                        .IsUnique();

                    b.ToTable("tbl_ConsentCare", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ConsentData", b =>
                {
                    b.Property<int>("DataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DataId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DataId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<int>("Name")
                        .HasColumnType("int")
                        .HasColumnName("Name");

                    b.Property<int>("PersonalDetailId")
                        .HasColumnType("int")
                        .HasColumnName("PersonalDetailId");

                    b.Property<int>("Signature")
                        .HasColumnType("int")
                        .HasColumnName("Signature");

                    b.HasKey("DataId");

                    b.HasIndex("PersonalDetailId")
                        .IsUnique();

                    b.ToTable("tbl_ConsentData", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ConsentLandLine", b =>
                {
                    b.Property<int>("LandlineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LandlineId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LandlineId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<int>("Name")
                        .HasColumnType("int")
                        .HasColumnName("Name");

                    b.Property<int>("PersonalDetailId")
                        .HasColumnType("int")
                        .HasColumnName("PersonalDetailId");

                    b.Property<int>("Signature")
                        .HasColumnType("int")
                        .HasColumnName("Signature");

                    b.HasKey("LandlineId");

                    b.HasIndex("PersonalDetailId")
                        .IsUnique();

                    b.ToTable("tbl_ConsentLandLine", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ConsentLandlineLog", b =>
                {
                    b.Property<int>("ConsentLandlineLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ConsentLandlineLogId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConsentLandlineLogId"));

                    b.Property<int>("BaseRecordId")
                        .HasColumnType("int")
                        .HasColumnName("BaseRecordId");

                    b.Property<int>("LandlineId")
                        .HasColumnType("int")
                        .HasColumnName("LandlineId");

                    b.HasKey("ConsentLandlineLogId");

                    b.HasIndex("LandlineId");

                    b.ToTable("tbl_ConsentLandlineLog", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ConsentMedication", b =>
                {
                    b.Property<int>("ConsentMedicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConsentMedicationId"));

                    b.Property<string>("AdministratorProcess")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("AdministratorProcess");

                    b.Property<string>("FamilyResponsibity")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("FamilyResponsibity");

                    b.Property<string>("OwnMedication")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("OwnMedication");

                    b.Property<int>("PersonalDetailId")
                        .HasColumnType("int")
                        .HasColumnName("PersonalDetailId");

                    b.HasKey("ConsentMedicationId");

                    b.HasIndex("PersonalDetailId")
                        .IsUnique();

                    b.ToTable("tbl_ConsentMedication", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ContractTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CreatedBy");

                    b.Property<int>("JobPositionId")
                        .HasColumnType("int")
                        .HasColumnName("JobPositionId");

                    b.Property<string>("Template")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Template");

                    b.Property<string>("TemplateName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("TemplateName");

                    b.HasKey("Id");

                    b.ToTable("tbl_ContractTemplate", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.Conversation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasColumnName("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FilePath")
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)")
                        .HasColumnName("FilePath");

                    b.Property<string>("FromUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InboxId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1025)
                        .HasColumnType("nvarchar(1025)")
                        .HasColumnName("Message");

                    b.Property<string>("OpenTokToken")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("OpenTokToken");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("SessionId");

                    b.Property<string>("ToUserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("InboxId");

                    b.ToTable("tbl_conversation", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.CreateShift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasColumnName("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFreeAccomodation")
                        .HasColumnType("bit")
                        .HasColumnName("IsFreeAccomodation");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("RatePerHour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RatePerHour");

                    b.Property<string>("RoleAndNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RoleAndNumber");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_createshift", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.CreateShiftRoles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientFacilityId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasColumnName("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndtTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("EndtTime");

                    b.Property<bool>("IsBook")
                        .HasColumnType("bit")
                        .HasColumnName("IsBook");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("ShiftId")
                        .HasColumnType("int");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StaffJobCategory")
                        .HasColumnType("int")
                        .HasColumnName("StaffJobCategory");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartTime");

                    b.HasKey("Id");

                    b.HasIndex("ClientFacilityId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ShiftId");

                    b.HasIndex("StaffId");

                    b.ToTable("tbl_createshiftuserroles", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.CreditCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CardHolderName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("CardHolderName");

                    b.Property<string>("CardNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CardNumber");

                    b.Property<int>("CardType")
                        .HasColumnType("int")
                        .HasColumnName("CardType");

                    b.Property<string>("CustomerName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("CustomerName");

                    b.Property<string>("CustomerSignature")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("CustomerSignature");

                    b.Property<string>("ExpirationDate")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("ExpirationDate");

                    b.Property<string>("OtherTypeName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("OtherTypeName");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PostalCode");

                    b.Property<DateTime?>("SignatureDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("SignatureDate");

                    b.HasKey("Id");

                    b.ToTable("tbl_CreditCard", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.CuidiBuddy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CuidiBuddyId")
                        .HasColumnType("int")
                        .HasColumnName("CuidiBuddyId");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_CuidiBuddy", null, t =>
                        {
                            t.Property("ClientId")
                                .HasColumnName("ClientId1");
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.DeductionForAllStaff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("EndDate");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("StaffId");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartDate");

                    b.HasKey("Id");

                    b.ToTable("tbl_DeductionForAllStaff", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.DeductionValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DeductionAmount")
                        .HasColumnType("int");

                    b.Property<int>("DeductionForAllStaffId")
                        .HasColumnType("int")
                        .HasColumnName("DeductionForAllStaffId");

                    b.Property<int>("DeductionType")
                        .HasColumnType("int")
                        .HasColumnName("DeductionType");

                    b.HasKey("Id");

                    b.HasIndex("DeductionForAllStaffId");

                    b.ToTable("tbl_DeductionValue", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.DefaultStaffSupport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffId");

                    b.Property<string>("SupportType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SupportType");

                    b.HasKey("Id");

                    b.ToTable("tbl_DefaultStaffSupport", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.Directors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("Address");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("FirstName");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("MiddleName");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Password");

                    b.Property<string>("PostCode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("PostCode");

                    b.Property<string>("Telephone")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Telephone");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserId");

                    b.Property<string>("lastName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("lastName");

                    b.HasKey("Id");

                    b.ToTable("tbl_Directors", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.DutyOnCall", b =>
                {
                    b.Property<int>("DutyOnCallId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DutyOnCallId"));

                    b.Property<string>("ActionTaken")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasColumnName("ActionTaken");

                    b.Property<string>("Attachment")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("Attachment");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("ClientInitial")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("ClientInitial");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfIncident")
                        .HasColumnType("datetime2")
                        .HasColumnName("DateOfIncident");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DetailsOfIncident")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasColumnName("DetailsOfIncident");

                    b.Property<string>("DetailsRequired")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasColumnName("DetailsRequired");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("RefNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("RefNo");

                    b.Property<string>("Remarks")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasColumnName("Remarks");

                    b.Property<string>("ReportedBy")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("ReportedBy");

                    b.Property<string>("StaffSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Subject");

                    b.Property<int?>("TypeOfDutyCall")
                        .HasColumnType("int");

                    b.HasKey("DutyOnCallId");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_DutyOnCall", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.DutyOnCallPersonResponsible", b =>
                {
                    b.Property<int>("PersonResponsibleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PersonResponsibleId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonResponsibleId"));

                    b.Property<int>("DutyOnCallId")
                        .HasColumnType("int")
                        .HasColumnName("DutyOnCallId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("PersonResponsibleId");

                    b.HasIndex("DutyOnCallId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_DutyOnCallPersonResponsible", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.DutyOnCallPersonToAct", b =>
                {
                    b.Property<int>("PersonToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PersonToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonToActId"));

                    b.Property<int>("DutyOnCallId")
                        .HasColumnType("int")
                        .HasColumnName("DutyOnCallId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("PersonToActId");

                    b.HasIndex("DutyOnCallId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_DutyOnCallPersonToAct", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.EmailMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Category")
                        .HasColumnType("int")
                        .HasColumnName("Category");

                    b.Property<string>("CompanyId")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("CompanyId");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Message");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("SendDate");

                    b.Property<string>("Subject")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("Subject");

                    b.HasKey("Id");

                    b.ToTable("tbl_EmailMessage", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.EmailMessageUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EmailMessageId")
                        .HasColumnType("int")
                        .HasColumnName("EmailMessageId");

                    b.Property<string>("IncludeCC")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("IncludeCC");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("StaffId");

                    b.HasKey("Id");

                    b.HasIndex("EmailMessageId");

                    b.ToTable("tbl_EmailMessageUser", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.Enotice", b =>
                {
                    b.Property<Guid>("EnoticeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<string>("Heading")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Heading");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Image");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Note");

                    b.Property<Guid>("PublishBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PublishBy");

                    b.Property<Guid>("PublishTo")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PublishTo");

                    b.Property<string>("Video")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Video");

                    b.HasKey("EnoticeId");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_Enotice_", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.Equipment", b =>
                {
                    b.Property<int>("EquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EquipmentId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EquipmentId"));

                    b.Property<string>("Attachment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attachment");

                    b.Property<int>("Location")
                        .HasColumnType("int")
                        .HasColumnName("Location");

                    b.Property<int>("Name")
                        .HasColumnType("int")
                        .HasColumnName("Name");

                    b.Property<DateTime>("NextServiceDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("NextServiceDate");

                    b.Property<Guid>("PersonToAct")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PersonToAct");

                    b.Property<int>("PersonalDetailId")
                        .HasColumnType("int")
                        .HasColumnName("PersonalDetailId");

                    b.Property<DateTime>("ServiceDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ServiceDate");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("Type");

                    b.HasKey("EquipmentId");

                    b.HasIndex("PersonToAct");

                    b.HasIndex("PersonalDetailId");

                    b.ToTable("tbl_Equipment", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.EquipmentAssessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ClientId")
                        .HasMaxLength(38)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Environment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Environment");

                    b.Property<string>("EquipmentLocation")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("EquipmentLocation");

                    b.Property<string>("EquipmentName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("EquipmentName");

                    b.Property<string>("EquipmentStatus")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("EquipmentStatus");

                    b.Property<string>("Escalation")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("Attachment");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ExpiryDate");

                    b.Property<string>("HowToUse")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("HowToUse");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("RiskControl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RiskControl");

                    b.Property<string>("RiskOfClient")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RiskOfClient");

                    b.Property<string>("RiskOfStaff")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RiskOfStaff");

                    b.Property<string>("Training")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Training");

                    b.Property<string>("Url")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("Url");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_EquipmentAssessment", null, t =>
                        {
                            t.Property("Attachment")
                                .HasColumnName("Attachment1");
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.EquipmentAssessmentData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientRisk")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("ClientRisk");

                    b.Property<int>("EquipmentAssessmentId")
                        .HasColumnType("int")
                        .HasColumnName("EquipmentAssessmentId");

                    b.Property<string>("HowToUse")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("HowToUse");

                    b.Property<string>("Image")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("Image");

                    b.Property<string>("StaffRisk")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("StaffRisk");

                    b.Property<string>("URL")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("URL");

                    b.HasKey("Id");

                    b.ToTable("tbl_EquipmentAssessmentData", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.Expenselog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("AmountGivenAdvance")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("AmountGivenAdvance");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<Guid?>("CompanyId")
                        .HasMaxLength(450)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompanyId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpenseDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("EexpenseDate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ItemOfPurchase")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("ItemOfPurchase");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LocationOfPurchase")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("LocationOfPurchase");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Price");

                    b.Property<string>("ProofOfPurchase")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ProofOfPurchase");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("PurchaseDate");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("Quantity");

                    b.Property<string>("ReceiptNo")
                        .HasMaxLength(124)
                        .HasColumnType("nvarchar(124)")
                        .HasColumnName("ReceiptNo");

                    b.Property<string>("ReferenceNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ReferenceNo");

                    b.Property<string>("Remarks")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("Remarks");

                    b.Property<decimal?>("ReturnBalance")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("ReturnBalance");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffId");

                    b.Property<string>("WhoApproved")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("WhoApproved");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_Expenselog", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ExternalRole", b =>
                {
                    b.Property<int>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExternalId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("LastName");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Password");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Telephone");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UserId");

                    b.HasKey("ExternalId");

                    b.ToTable("tbl_ExternalRole", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ExternalRoleAccess", b =>
                {
                    b.Property<int>("ExternalAccessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExternalAccessId"));

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExternalId")
                        .HasColumnType("int")
                        .HasColumnName("ExternalId");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffId");

                    b.HasKey("ExternalAccessId");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_ExternalRoleAccess", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.EyeHealthOfficerToAct", b =>
                {
                    b.Property<int>("EyeHealthOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EyeHealthOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EyeHealthOfficerToActId"));

                    b.Property<int>("EyeHealthId")
                        .HasColumnType("int")
                        .HasColumnName("EyeHealthId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("EyeHealthOfficerToActId");

                    b.HasIndex("EyeHealthId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_EyeHealth_OfficerToAct", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.EyeHealthPhysician", b =>
                {
                    b.Property<int>("EyeHealthPhysicianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EyeHealthPhysicianId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EyeHealthPhysicianId"));

                    b.Property<int>("EyeHealthId")
                        .HasColumnType("int")
                        .HasColumnName("EyeHealthId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("EyeHealthPhysicianId");

                    b.HasIndex("EyeHealthId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_EyeHealth_Physician", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.EyeHealthStaffName", b =>
                {
                    b.Property<int>("EyeHealthStaffNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EyeHealthStaffNameId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EyeHealthStaffNameId"));

                    b.Property<int>("EyeHealthId")
                        .HasColumnType("int")
                        .HasColumnName("EyeHealthId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("EyeHealthStaffNameId");

                    b.HasIndex("EyeHealthId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_EyeHealth_StaffName", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.FeedBackMatchingWords", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("tbl_FeedBackMatchingWords", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.FilesAndRecord", b =>
                {
                    b.Property<int>("FilesAndRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FilesAndRecordId"));

                    b.Property<string>("Attachment")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("Attachment");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ClientId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileFormat")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("FileFormat");

                    b.Property<string>("FileName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("FileName");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Subject");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("Type");

                    b.HasKey("FilesAndRecordId");

                    b.HasIndex("ClientId1");

                    b.HasIndex("CompanyId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_FilesAndRecord", null, t =>
                        {
                            t.Property("ClientId")
                                .HasColumnName("ClientId2");
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.FluidIntake", b =>
                {
                    b.Property<int>("FluidIntakeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FluidIntakeId"));

                    b.Property<int?>("Dose")
                        .HasColumnType("int")
                        .HasColumnName("Dose");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int?>("StaffRotaPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("StaffRotaPeriodId");

                    b.HasKey("FluidIntakeId");

                    b.ToTable("tbl_FluidIntake", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.FocusedFeedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConductedBy")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("ConductedBy");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<string>("FileURl")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("FileURl");

                    b.Property<string>("Reason")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("Reason");

                    b.Property<string>("Remark")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("Remark");

                    b.Property<string>("Topic")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("Topic");

                    b.HasKey("Id");

                    b.ToTable("tbl_FocusedFeedback", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.FoodIntakeOfficerToAct", b =>
                {
                    b.Property<int>("FoodIntakeOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FoodIntakeOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FoodIntakeOfficerToActId"));

                    b.Property<int>("FoodIntakeId")
                        .HasColumnType("int")
                        .HasColumnName("FoodIntakeId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("FoodIntakeOfficerToActId");

                    b.HasIndex("FoodIntakeId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_FoodIntake_OfficerToAct", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.FoodIntakePhysician", b =>
                {
                    b.Property<int>("FoodIntakePhysicianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FoodIntakePhysicianId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FoodIntakePhysicianId"));

                    b.Property<int>("FoodIntakeId")
                        .HasColumnType("int")
                        .HasColumnName("FoodIntakeId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("FoodIntakePhysicianId");

                    b.HasIndex("FoodIntakeId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_FoodIntake_Physician", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.FoodIntakeStaffName", b =>
                {
                    b.Property<int>("FoodIntakeStaffNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FoodIntakeStaffNameId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FoodIntakeStaffNameId"));

                    b.Property<int>("FoodIntakeId")
                        .HasColumnType("int")
                        .HasColumnName("FoodIntakeId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("FoodIntakeStaffNameId");

                    b.HasIndex("FoodIntakeId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_FoodIntake_StaffName", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.HealthAndLiving", b =>
                {
                    b.Property<int>("HLId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("HLId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HLId"));

                    b.Property<int>("AbilityToRead")
                        .HasColumnType("int")
                        .HasColumnName("AbilityToRead");

                    b.Property<int>("AlcoholicDrink")
                        .HasColumnType("int")
                        .HasColumnName("AlcoholicDrink");

                    b.Property<int>("AllowChats")
                        .HasColumnType("int")
                        .HasColumnName("AllowChats");

                    b.Property<string>("BriefHealth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("BriefHealth");

                    b.Property<string>("CareSupport")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CareSupport");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("ConstraintAttachment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ConstraintAttachment");

                    b.Property<string>("ConstraintDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ConstraintDetails");

                    b.Property<int>("ConstraintRequired")
                        .HasColumnType("int")
                        .HasColumnName("ConstraintRequired");

                    b.Property<int>("ContinenceIssue")
                        .HasColumnType("int")
                        .HasColumnName("ContinenceIssue");

                    b.Property<string>("ContinenceNeeds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ContinenceNeeds");

                    b.Property<string>("ContinenceSource")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ContinenceSource");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("DehydrationRisk")
                        .HasColumnType("int")
                        .HasColumnName("DehydrationRisk");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EatingWithStaff")
                        .HasColumnType("int")
                        .HasColumnName("EatingWithStaff");

                    b.Property<int>("Email")
                        .HasColumnType("int")
                        .HasColumnName("Email");

                    b.Property<int>("FamilyUpdate")
                        .HasColumnType("int")
                        .HasColumnName("FamilyUpdate");

                    b.Property<int>("FinanceManagement")
                        .HasColumnType("int")
                        .HasColumnName("FinanceManagement");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("LaundaryRequired")
                        .HasColumnType("int")
                        .HasColumnName("LaundaryRequired");

                    b.Property<int>("LetterOpening")
                        .HasColumnType("int")
                        .HasColumnName("LetterOpening");

                    b.Property<int>("LifeStyle")
                        .HasColumnType("int")
                        .HasColumnName("LifeStyle");

                    b.Property<int>("MeansOfComm")
                        .HasColumnType("int")
                        .HasColumnName("MeansOfComm");

                    b.Property<string>("MovingAndHandling")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MovingAndHandling");

                    b.Property<int>("NeighbourInvolment")
                        .HasColumnType("int")
                        .HasColumnName("NeighbourInvolment");

                    b.Property<string>("ObserveHealth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ObserveHealth");

                    b.Property<int>("PostalService")
                        .HasColumnType("int")
                        .HasColumnName("PostalService");

                    b.Property<int>("PressureSore")
                        .HasColumnType("int")
                        .HasColumnName("PressureSore");

                    b.Property<int>("ShoppingRequired")
                        .HasColumnType("int")
                        .HasColumnName("ShoppingRequired");

                    b.Property<int>("Smoking")
                        .HasColumnType("int")
                        .HasColumnName("Smoking");

                    b.Property<string>("SpecialCaution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SpecialCaution");

                    b.Property<int>("SpecialCleaning")
                        .HasColumnType("int")
                        .HasColumnName("SpecialCleaning");

                    b.Property<string>("SupportToBed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SupportToBed");

                    b.Property<int>("TVandMusic")
                        .HasColumnType("int")
                        .HasColumnName("TVandMusic");

                    b.Property<int>("TeaChocolateCoffee")
                        .HasColumnType("int")
                        .HasColumnName("TeaChocolateCoffee");

                    b.Property<int>("TextFontSize")
                        .HasColumnType("int")
                        .HasColumnName("TextFontSize");

                    b.Property<int>("VideoCallRequired")
                        .HasColumnType("int")
                        .HasColumnName("VideoCallRequired");

                    b.Property<string>("WakeUp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WakeUp");

                    b.HasKey("HLId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_HealthAndLiving", null, t =>
                        {
                            t.Property("ClientId")
                                .HasColumnName("ClientId1");
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.HealthCondition", b =>
                {
                    b.Property<int>("HCId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HCId"));

                    b.Property<string>("ActionRequiredToStaff")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ActionRequiredToStaff");

                    b.Property<string>("CausesAndTrigger")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CausesAndTrigger");

                    b.Property<string>("ClientManagingWithCondition")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ClientManagingWithCondition");

                    b.Property<string>("Condition")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Condition");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("EscalationsApproach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Image");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("RiskToClient")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RiskToClient");

                    b.Property<string>("RiskToStaff")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RiskToStaff");

                    b.Property<string>("Symptoms")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Symptoms");

                    b.HasKey("HCId");

                    b.ToTable("tbl_HealthCondition", null, t =>
                        {
                            t.Property("Image")
                                .HasColumnName("Image1");
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.HealthTask", b =>
                {
                    b.Property<int>("HealthTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HealthTaskId"));

                    b.Property<int>("Answer")
                        .HasColumnType("int")
                        .HasColumnName("Answer");

                    b.Property<int>("BestId")
                        .HasColumnType("int")
                        .HasColumnName("BestId");

                    b.Property<int>("HeadingId")
                        .HasColumnType("int")
                        .HasColumnName("HeadingId");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<int>("Title")
                        .HasColumnType("int")
                        .HasColumnName("Title");

                    b.HasKey("HealthTaskId");

                    b.HasIndex("BestId");

                    b.ToTable("tbl_HealthTask", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.HealthTask2", b =>
                {
                    b.Property<int>("HealthTask2Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HealthTask2Id"));

                    b.Property<int>("Answer")
                        .HasColumnType("int")
                        .HasColumnName("Answer");

                    b.Property<int>("BestId")
                        .HasColumnType("int")
                        .HasColumnName("BestId");

                    b.Property<int>("Heading2Id")
                        .HasColumnType("int")
                        .HasColumnName("Heading2Id");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remark");

                    b.Property<int>("Title")
                        .HasColumnType("int")
                        .HasColumnName("Title");

                    b.HasKey("HealthTask2Id");

                    b.HasIndex("BestId");

                    b.ToTable("tbl_HealthTask2", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.HeartRateOfficerToAct", b =>
                {
                    b.Property<int>("HeartRateOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("HeartRateOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HeartRateOfficerToActId"));

                    b.Property<int>("HeartRateId")
                        .HasColumnType("int")
                        .HasColumnName("HeartRateId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("HeartRateOfficerToActId");

                    b.HasIndex("HeartRateId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_HeartRate_OfficerToAct", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.HeartRatePhysician", b =>
                {
                    b.Property<int>("HeartRatePhysicianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("HeartRatePhysicianId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HeartRatePhysicianId"));

                    b.Property<int>("HeartRateId")
                        .HasColumnType("int")
                        .HasColumnName("HeartRateId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("HeartRatePhysicianId");

                    b.HasIndex("HeartRateId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_HeartRate_Physician", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.HeartRateStaffName", b =>
                {
                    b.Property<int>("HeartRateStaffNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("HeartRateStaffNameId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HeartRateStaffNameId"));

                    b.Property<int>("HeartRateId")
                        .HasColumnType("int")
                        .HasColumnName("HeartRateId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("HeartRateStaffNameId");

                    b.HasIndex("HeartRateId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_HeartRate_StaffName", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.HistoryOfFall", b =>
                {
                    b.Property<int>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("HistoryId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HistoryId"));

                    b.Property<string>("Cause")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Cause");

                    b.Property<string>("CauseAndTriger")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CauseAndTriger");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DetailofRisk")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DetailofRisk");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Details");

                    b.Property<string>("Escallation")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Escallation");

                    b.Property<string>("HowToControl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("HowToControl");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFallOfRisk")
                        .HasColumnType("bit")
                        .HasColumnName("IsFallOfRisk");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Prevention")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Prevention");

                    b.Property<bool>("UserAwareOfFall")
                        .HasColumnType("bit")
                        .HasColumnName("UserAwareOfFall");

                    b.HasKey("HistoryId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_HistoryOfFall", null, t =>
                        {
                            t.Property("ClientId")
                                .HasColumnName("ClientId1");
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.Hobbies", b =>
                {
                    b.Property<int>("HId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HId"));

                    b.Property<Guid?>("CompanyId")
                        .HasMaxLength(450)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("HId");

                    b.ToTable("tbl_Hobbies", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.HolidayCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CompanyId");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Name");

                    b.Property<int>("NoOfDays")
                        .HasColumnType("int")
                        .HasColumnName("NoOfDays");

                    b.HasKey("Id");

                    b.ToTable("tbl_HolidayCategory", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.HomeRiskAssessment", b =>
                {
                    b.Property<int>("HomeRiskAssessmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HomeRiskAssessmentId"));

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Heading")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Heading");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("HomeRiskAssessmentId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_HomeRiskAssessment", null, t =>
                        {
                            t.Property("ClientId")
                                .HasColumnName("ClientId1");
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.HomeRiskAssessmentTask", b =>
                {
                    b.Property<int>("HomeRiskAssessmentTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HomeRiskAssessmentTaskId"));

                    b.Property<int>("Answer")
                        .HasColumnType("int")
                        .HasColumnName("Answer");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Comment");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("HomeRiskAssessmentId")
                        .HasColumnType("int")
                        .HasColumnName("HomeRiskAssessmentId");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Title")
                        .HasColumnType("int")
                        .HasColumnName("Title");

                    b.HasKey("HomeRiskAssessmentTaskId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("HomeRiskAssessmentId");

                    b.ToTable("tbl_HomeRiskAssessmentTask", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.HospitalEntry", b =>
                {
                    b.Property<int>("HospitalEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HospitalEntryId"));

                    b.Property<string>("Attachment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attachment");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<int>("ConditionOfAdmission")
                        .HasColumnType("int")
                        .HasColumnName("ConditionOfAdmission");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateAndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("IsFamilyInformed")
                        .HasColumnType("int")
                        .HasColumnName("IsFamilyInformed");

                    b.Property<int>("IsHomeCleaned")
                        .HasColumnType("int")
                        .HasColumnName("IsHomeCleaned");

                    b.Property<DateTime>("LastDateofAdmission")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastDateofAdmission");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("MeansOfTransport")
                        .HasColumnType("int")
                        .HasColumnName("MeansOfTransport");

                    b.Property<DateTime>("PossibleDateReturn")
                        .HasColumnType("datetime2")
                        .HasColumnName("PossibleDateReturn");

                    b.Property<string>("PurposeofAdmission")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PurposeofAdmission");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Reference");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remark");

                    b.Property<string>("StaffSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.HasKey("HospitalEntryId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_HospitalEntry", null, t =>
                        {
                            t.Property("ClientId")
                                .HasColumnName("ClientId1");
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.HospitalEntryPersonToTakeAction", b =>
                {
                    b.Property<int>("HospitalEntryPersonToTakeActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("HospitalEntryPersonToTakeActionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HospitalEntryPersonToTakeActionId"));

                    b.Property<int>("HospitalEntryId")
                        .HasColumnType("int")
                        .HasColumnName("HospitalEntryId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("HospitalEntryPersonToTakeActionId");

                    b.HasIndex("HospitalEntryId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_HospitalEntryPersonToTakeAction", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.HospitalEntryStaffInvolved", b =>
                {
                    b.Property<int>("HospitalEntryStaffInvolvedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("HospitalEntryStaffInvolvedId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HospitalEntryStaffInvolvedId"));

                    b.Property<int>("HospitalEntryId")
                        .HasColumnType("int")
                        .HasColumnName("HospitalEntryId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("HospitalEntryStaffInvolvedId");

                    b.HasIndex("HospitalEntryId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_HospitalEntryStaffInvolved", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.HospitalExit", b =>
                {
                    b.Property<int>("HospitalExitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HospitalExitId"));

                    b.Property<int>("AreContinentProductNeedAndAvailable")
                        .HasColumnType("int")
                        .HasColumnName("AreContinentProductNeedAndAvailable");

                    b.Property<int>("AreEqipmentNeededAvailable")
                        .HasColumnType("int")
                        .HasColumnName("AreEqipmentNeededAvailable");

                    b.Property<int>("AreLocalSupportOrProgramNeeded")
                        .HasColumnType("int")
                        .HasColumnName("AreLocalSupportOrProgramNeeded");

                    b.Property<int>("AreStaffTrainnedOnEquipmentNeeded")
                        .HasColumnType("int")
                        .HasColumnName("AreStaffTrainnedOnEquipmentNeeded");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ConditionOnDischarge")
                        .HasColumnType("int")
                        .HasColumnName("ConditionOnDischarge");

                    b.Property<DateTime>("DateAndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("IsCarePlanUpdated")
                        .HasColumnType("int")
                        .HasColumnName("IsCarePlanUpdated");

                    b.Property<int>("IsGrosSriesAvaible")
                        .HasColumnType("int")
                        .HasColumnName("IsGrosSriesAvaible");

                    b.Property<int>("IsHomeCleaned")
                        .HasColumnType("int")
                        .HasColumnName("IsHomeCleaned");

                    b.Property<int>("IsMedicationAvaialable")
                        .HasColumnType("int")
                        .HasColumnName("IsMedicationAvaialable");

                    b.Property<int>("IsServiceUseronRota")
                        .HasColumnType("int")
                        .HasColumnName("IsServiceUseronRota");

                    b.Property<int>("ModeOfMeansOfTrasportBackHome")
                        .HasColumnType("int")
                        .HasColumnName("ModeOfMeansOfTrasportBackHome");

                    b.Property<int>("NumberOfStaffRequiredOnDischarge")
                        .HasColumnType("int")
                        .HasColumnName("NumberOfStaffRequiredOnDischarge");

                    b.Property<int>("ReablementRequired")
                        .HasColumnType("int")
                        .HasColumnName("ReablementRequired");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Reference");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remark");

                    b.Property<string>("StaffSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("WhichSupportIsNeeded")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WhichSupportIsNeeded");

                    b.Property<int>("isLittleCashAvailableForServiceUser")
                        .HasColumnType("int")
                        .HasColumnName("isLittleCashAvailableForServiceUser");

                    b.Property<int>("isRotaTeamInformed")
                        .HasColumnType("int")
                        .HasColumnName("isRotaTeamInformed");

                    b.HasKey("HospitalExitId");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_HospitalExit", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.HospitalExitOfficerToTakeAction", b =>
                {
                    b.Property<int>("HospitalExitOfficerToTakeActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("HospitalExitOfficerToTakeActionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HospitalExitOfficerToTakeActionId"));

                    b.Property<int>("HospitalExitId")
                        .HasColumnType("int")
                        .HasColumnName("HospitalExitId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("HospitalExitOfficerToTakeActionId");

                    b.HasIndex("HospitalExitId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_HospitalExitOfficerToTakeAction", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.Inbox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasColumnName("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FromUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ToUserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_Inbox", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.IncidentReporting", b =>
                {
                    b.Property<int>("IncidentReportingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IncidentReportingId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncidentReportingId"));

                    b.Property<string>("ActionTaken")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("ActionTaken");

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attachment");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("IncidentDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IncidentDetails");

                    b.Property<int>("IncidentTypeId")
                        .HasColumnType("int")
                        .HasColumnName("IncidentTypeId");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ManagerSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReportingStaffId")
                        .HasColumnType("int")
                        .HasColumnName("ReportingStaffId");

                    b.Property<int>("StaffInvolvedId")
                        .HasColumnType("int")
                        .HasColumnName("StaffInvolvedId");

                    b.Property<string>("StaffSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Witness")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Witness");

                    b.HasKey("IncidentReportingId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_IncidentReporting", null, t =>
                        {
                            t.Property("ClientId")
                                .HasColumnName("ClientId1");
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.IncomeForAllStaff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("EndDate");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("StaffId");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartDate");

                    b.HasKey("Id");

                    b.ToTable("tbl_IncomeForAllStaff", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.IncomeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IncomeAmount")
                        .HasColumnType("int");

                    b.Property<int>("IncomeForAllStaffId")
                        .HasColumnType("int")
                        .HasColumnName("IncomeForAllStaffId");

                    b.Property<int>("IncomeType")
                        .HasColumnType("int")
                        .HasColumnName("IncomeType");

                    b.HasKey("Id");

                    b.HasIndex("IncomeForAllStaffId");

                    b.ToTable("tbl_IncomeValue", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.IncomingMeds", b =>
                {
                    b.Property<int>("IncomingMedsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncomingMedsId"));

                    b.Property<string>("ChartImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ChartImage");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<string>("MedsImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MedsImage");

                    b.Property<string>("StaffName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StaffName");

                    b.Property<string>("StartDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StartDate");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<Guid>("UserName")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserName");

                    b.HasKey("IncomingMedsId");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_Incoming_Meds", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.InfectionControl", b =>
                {
                    b.Property<int>("InfectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InfectionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InfectionId"));

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Guideline")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Guideline");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("TestDate");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("Type");

                    b.Property<int>("VaccStatus")
                        .HasColumnType("int")
                        .HasColumnName("VaccStatus");

                    b.HasKey("InfectionId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_InfectionControl", null, t =>
                        {
                            t.Property("ClientId")
                                .HasColumnName("ClientId1");
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.Inspection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachment")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("Attachment");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<string>("FileName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("FileName");

                    b.Property<string>("FileURl")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("FileURl");

                    b.Property<string>("Remark")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("Remark");

                    b.HasKey("Id");

                    b.ToTable("tbl_Inspection", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.Interest", b =>
                {
                    b.Property<int>("InterestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InterestId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InterestId"));

                    b.Property<int>("CommunityActivity")
                        .HasColumnType("int")
                        .HasColumnName("CommunityActivity");

                    b.Property<int>("EventAwarness")
                        .HasColumnType("int")
                        .HasColumnName("EventAwarness");

                    b.Property<int>("GoalAndObjective")
                        .HasColumnType("int")
                        .HasColumnName("GoalAndObjective");

                    b.Property<int>("GoalId")
                        .HasColumnType("int")
                        .HasColumnName("GoalId");

                    b.Property<int>("InformalActivity")
                        .HasColumnType("int")
                        .HasColumnName("InformalActivity");

                    b.Property<int>("LeisureActivity")
                        .HasColumnType("int")
                        .HasColumnName("LeisureActivity");

                    b.Property<int>("MaintainContact")
                        .HasColumnType("int")
                        .HasColumnName("MaintainContact");

                    b.HasKey("InterestId");

                    b.HasIndex("GoalId");

                    b.ToTable("tbl_Interest", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.InterestAndObjective", b =>
                {
                    b.Property<int>("GoalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GoalId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GoalId"));

                    b.Property<string>("Brief")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Brief");

                    b.Property<string>("CareGoal")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CareGoal");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("GoalId");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_InterestAndObjective", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.InterviewQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("InterviewType")
                        .HasColumnType("int")
                        .HasColumnName("InterviewType");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("bit")
                        .HasColumnName("IsMandatory");

                    b.Property<int>("JobPosition")
                        .HasColumnType("int")
                        .HasColumnName("JobPosition");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Marks")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Marks");

                    b.Property<decimal?>("PassingMarks")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("PassingMarks");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Question");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_InterviewQuestion", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.Investigation", b =>
                {
                    b.Property<int>("InvestigationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InvestigationId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvestigationId"));

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<DateTimeOffset?>("ConclusionDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("ConclusionDate");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("IncidentClass")
                        .HasColumnType("int")
                        .HasColumnName("IncidentClass");

                    b.Property<DateTimeOffset>("IncidentDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("IncidentDate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remark");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("InvestigationId");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_Investigation", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.InvestigationAttachment", b =>
                {
                    b.Property<int>("InvestigationAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InvestigationAttachmentId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvestigationAttachmentId"));

                    b.Property<string>("Attachment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attachment");

                    b.Property<int>("InvestigationId")
                        .HasColumnType("int")
                        .HasColumnName("InvestigationId");

                    b.HasKey("InvestigationAttachmentId");

                    b.HasIndex("InvestigationId");

                    b.ToTable("tbl_InvestigationAttachment", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.JobPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CompanyId")
                        .HasMaxLength(38)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompanyId");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("tbl_JobPosition", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.JobPositionAccess", b =>
                {
                    b.Property<int>("AccessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccessId"));

                    b.Property<int>("JobPositionId")
                        .HasColumnType("int")
                        .HasColumnName("JobPositionId");

                    b.Property<int>("PageId")
                        .HasColumnType("int")
                        .HasColumnName("PageId");

                    b.HasKey("AccessId");

                    b.ToTable("tbl_JobPositionAccess", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.KeyIndicatorLog", b =>
                {
                    b.Property<int>("KeyIndicatorLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("KeyIndicatorLogId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KeyIndicatorLogId"));

                    b.Property<int>("BaseRecordId")
                        .HasColumnType("int")
                        .HasColumnName("BaseRecordId");

                    b.Property<int>("KeyId")
                        .HasColumnType("int")
                        .HasColumnName("KeyId");

                    b.HasKey("KeyIndicatorLogId");

                    b.HasIndex("KeyId");

                    b.ToTable("tbl_KeyIndicatorLog", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.KeyIndicators", b =>
                {
                    b.Property<int>("KeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("KeyId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KeyId"));

                    b.Property<string>("AboutMe")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AboutMe");

                    b.Property<int>("Debture")
                        .HasColumnType("int")
                        .HasColumnName("Debture");

                    b.Property<string>("FamilyRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FamilyRole");

                    b.Property<int>("LivingStatus")
                        .HasColumnType("int")
                        .HasColumnName("LivingStatus");

                    b.Property<int>("PersonalDetailId")
                        .HasColumnType("int")
                        .HasColumnName("PersonalDetailId");

                    b.Property<string>("ThingsILike")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ThingsILike");

                    b.HasKey("KeyId");

                    b.HasIndex("PersonalDetailId")
                        .IsUnique();

                    b.ToTable("tbl_KeyIndicators", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.KeyWorkerOfficerToAct", b =>
                {
                    b.Property<int>("KeyWorkerOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("KeyWorkerOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KeyWorkerOfficerToActId"));

                    b.Property<int>("KeyWorkerId")
                        .HasColumnType("int")
                        .HasColumnName("KeyWorkerId");

                    b.Property<int?>("StaffKeyWorkerVoiceKeyWorkerId")
                        .HasColumnType("int");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("KeyWorkerOfficerToActId");

                    b.HasIndex("StaffKeyWorkerVoiceKeyWorkerId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_KeyWorker_OfficerToAct", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.KeyWorkerWorkteam", b =>
                {
                    b.Property<int>("KeyWorkerWorkteamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("KeyWorkerWorkteamId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KeyWorkerWorkteamId"));

                    b.Property<int>("KeyWorkerId")
                        .HasColumnType("int")
                        .HasColumnName("KeyWorkerId");

                    b.Property<int?>("StaffKeyWorkerVoiceKeyWorkerId")
                        .HasColumnType("int");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("KeyWorkerWorkteamId");

                    b.HasIndex("StaffKeyWorkerVoiceKeyWorkerId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_KeyWorker_StaffName", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.LogAuditOfficerToAct", b =>
                {
                    b.Property<int>("LogAuditOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LogAuditOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogAuditOfficerToActId"));

                    b.Property<int>("LogAuditId")
                        .HasColumnType("int")
                        .HasColumnName("LogAuditId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("LogAuditOfficerToActId");

                    b.HasIndex("LogAuditId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_LogAudit_OfficerToAct", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.LogAuditSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuditClosingStatements")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("AuditClosingStatements");

                    b.Property<DateTime>("AuditDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("AuditDate");

                    b.Property<string>("AuditPeriodEnd")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("AuditPeriodEnd");

                    b.Property<string>("AuditPeriodStart")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("AuditPeriodStart");

                    b.Property<int?>("ClientWithConcern")
                        .HasColumnType("int")
                        .HasColumnName("ClientWithConcern");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("DateOfAudit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DateOfAudit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("IsDelete");

                    b.Property<string>("NameOfAuditor")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("NameOfAuditor");

                    b.Property<DateTime>("NextAuditDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("NextAuditDate");

                    b.Property<int?>("NoOfClose")
                        .HasColumnType("int")
                        .HasColumnName("NoOfClose");

                    b.Property<int?>("NoOfNoticIssueToClient")
                        .HasColumnType("int")
                        .HasColumnName("NoOfNoticIssueToClient");

                    b.Property<int?>("NoOfNoticIssueToStaff")
                        .HasColumnType("int")
                        .HasColumnName("NoOfNoticIssueToStaff");

                    b.Property<int?>("NoOfOpen")
                        .HasColumnType("int");

                    b.Property<int?>("NoOfPending")
                        .HasColumnType("int")
                        .HasColumnName("NoOfPending");

                    b.Property<int?>("StaffWithConcern")
                        .HasColumnType("int")
                        .HasColumnName("StaffWithConcern");

                    b.Property<int?>("TotalClient")
                        .HasColumnType("int")
                        .HasColumnName("TotalClient");

                    b.Property<int?>("TotalNoOfHappyClient")
                        .HasColumnType("int")
                        .HasColumnName("TotalNoOfHappyClient");

                    b.Property<int?>("TotalObjectMet")
                        .HasColumnType("int")
                        .HasColumnName("TotalObjectMet");

                    b.Property<int?>("TotalObjectNotMet")
                        .HasColumnType("int")
                        .HasColumnName("TotalObjectNotMet");

                    b.Property<int?>("TotalStaff")
                        .HasColumnType("int")
                        .HasColumnName("TotalStaff");

                    b.Property<string>("selectedClient")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("selectedClient");

                    b.Property<string>("selectedStaff")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbl_LogAuditSummary", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.LogAuditTracker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionRecommendation")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("ActionRecommendation");

                    b.Property<string>("AuditRemarks")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("AuditRemarks");

                    b.Property<bool>("ConcernWithStaff")
                        .HasMaxLength(50)
                        .HasColumnType("bit")
                        .HasColumnName("ConcernWithStaff");

                    b.Property<bool>("ConcertWithClient")
                        .HasColumnType("bit")
                        .HasColumnName("ConcertWithClient");

                    b.Property<DateTime>("DateOfAudit")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<bool>("EmailAuditToClient")
                        .HasColumnType("bit");

                    b.Property<bool>("EmailAuditToStaff")
                        .HasColumnType("bit")
                        .HasColumnName("EmailAuditToStaff");

                    b.Property<string>("EvidenceOfActionTaken")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("EvidenceOfActionTaken");

                    b.Property<string>("NameOfAuditor")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("NameOfAuditor");

                    b.Property<int>("StaffRotaPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("StaffRotaPeriodId");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.ToTable("tbl_LogAuditTracke", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ManagingTasks", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ManagingTasksId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskId"));

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Help")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Help");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<int>("Task")
                        .HasColumnType("int")
                        .HasColumnName("Task");

                    b.HasKey("TaskId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_ManagingTasks", null, t =>
                        {
                            t.Property("ClientId")
                                .HasColumnName("ClientId1");
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.MealIntake", b =>
                {
                    b.Property<int>("MealIntakeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MealIntakeId"));

                    b.Property<int?>("Dose")
                        .HasColumnType("int")
                        .HasColumnName("Dose");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int?>("StaffRotaPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("StaffRotaPeriodId");

                    b.HasKey("MealIntakeId");

                    b.ToTable("tbl_MealIntake", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.MedAuditOfficerToAct", b =>
                {
                    b.Property<int>("MedAuditOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MedAuditOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedAuditOfficerToActId"));

                    b.Property<int>("MedAuditId")
                        .HasColumnType("int")
                        .HasColumnName("MedAuditId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("MedAuditOfficerToActId");

                    b.HasIndex("MedAuditId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_MedAudit_OfficerToAct", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.MedAuditStaffName", b =>
                {
                    b.Property<int>("MedAuditStaffNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MedAuditStaffNameId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedAuditStaffNameId"));

                    b.Property<int>("MedAuditId")
                        .HasColumnType("int")
                        .HasColumnName("MedAuditId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("MedAuditStaffNameId");

                    b.HasIndex("MedAuditId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_MedAudit_AuditorName", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.MedCompOfficerToAct", b =>
                {
                    b.Property<int>("MedCompOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MedCompOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedCompOfficerToActId"));

                    b.Property<int>("MedCompId")
                        .HasColumnType("int")
                        .HasColumnName("MedCompId");

                    b.Property<int?>("StaffMedCompMedCompId")
                        .HasColumnType("int");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("MedCompOfficerToActId");

                    b.HasIndex("StaffMedCompMedCompId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_MedComp_OfficerToAct", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.Medication", b =>
                {
                    b.Property<int>("MedicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MedicationId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicationId"));

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Indication")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Indication");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("MedicationName")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("MedicationName");

                    b.Property<string>("Strength")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Strength");

                    b.HasKey("MedicationId");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_Medication", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.MedicationAuditSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuditClosingStatements")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("AuditClosingStatements");

                    b.Property<DateTime>("AuditDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("AuditDate");

                    b.Property<string>("AuditPeriodEnd")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("AuditPeriodEnd");

                    b.Property<string>("AuditPeriodStart")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("AuditPeriodStart");

                    b.Property<int?>("ClientWithConcern")
                        .HasColumnType("int")
                        .HasColumnName("ClientWithConcern");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("DateOfAudit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DateOfAudit");

                    b.Property<string>("NameOfAuditor")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("NameOfAuditor");

                    b.Property<DateTime>("NextAuditDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("NextAuditDate");

                    b.Property<int?>("NoOfClose")
                        .HasColumnType("int")
                        .HasColumnName("NoOfClose");

                    b.Property<int?>("NoOfGPContacted")
                        .HasColumnType("int")
                        .HasColumnName("NoOfGPContacted");

                    b.Property<int?>("NoOfNoticIssueToClient")
                        .HasColumnType("int")
                        .HasColumnName("NoOfNoticIssueToClient");

                    b.Property<int?>("NoOfNoticIssueToStaff")
                        .HasColumnType("int")
                        .HasColumnName("NoOfNoticIssueToStaff");

                    b.Property<int?>("NoOfOpen")
                        .HasColumnType("int");

                    b.Property<int?>("NoOfPending")
                        .HasColumnType("int")
                        .HasColumnName("NoOfPending");

                    b.Property<int?>("StaffWithConcern")
                        .HasColumnType("int")
                        .HasColumnName("StaffWithConcern");

                    b.Property<int?>("TotalClient")
                        .HasColumnType("int")
                        .HasColumnName("TotalClient");

                    b.Property<int?>("TotalStaff")
                        .HasColumnType("int")
                        .HasColumnName("TotalStaff");

                    b.Property<string>("selectedClient")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("selectedClient");

                    b.Property<string>("selectedStaff")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("selectedStaff");

                    b.HasKey("Id");

                    b.ToTable("tbl_MedicationAuditSummary", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.MedicationAuditTracker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionRecommendation")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("ActionRecommendation");

                    b.Property<string>("AuditRemarks")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("AuditRemarks");

                    b.Property<bool>("ConcernWithStaff")
                        .HasMaxLength(50)
                        .HasColumnType("bit")
                        .HasColumnName("ConcernWithStaff");

                    b.Property<bool>("ConcertWithClient")
                        .HasColumnType("bit")
                        .HasColumnName("ConcertWithClient");

                    b.Property<bool>("ContactEstablishedWithGP")
                        .HasColumnType("bit")
                        .HasColumnName("ContactEstablishedWithGP");

                    b.Property<DateTime>("DateOfAudit")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<bool>("EmailAuditToClient")
                        .HasColumnType("bit");

                    b.Property<bool>("EmailAuditToStaff")
                        .HasColumnType("bit")
                        .HasColumnName("EmailAuditToStaff");

                    b.Property<string>("EvidenceOfActionTaken")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("EvidenceOfActionTaken");

                    b.Property<string>("NameOfAuditor")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("NameOfAuditor");

                    b.Property<int>("StaffRotaId")
                        .HasColumnType("int")
                        .HasColumnName("StaffRotaId");

                    b.Property<string>("StateDisuccGP")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("StateDisuccGP");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.ToTable("tbl_MedicationAuditTracker", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.MedicationManufacturer", b =>
                {
                    b.Property<int>("MedicationManufacturerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MedicationManufacturerId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicationManufacturerId"));

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasColumnName("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Manufacturer");

                    b.HasKey("MedicationManufacturerId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Manufacturer")
                        .IsUnique()
                        .HasDatabaseName("IX_tbl_MedicationManufacturer_Manufacturer");

                    b.ToTable("tbl_MedicationManufacturer", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.MedicationRoute", b =>
                {
                    b.Property<int>("MedicationRoutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicationRoutId"));

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("RouteName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RouteName");

                    b.HasKey("MedicationRoutId");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_MedicationRoute", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.MedicationTrackerDelete", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<int>("StaffRotaId")
                        .HasColumnType("int")
                        .HasColumnName("StaffRotaId");

                    b.Property<int>("clientMedicationPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("clientMedicationPeriodId");

                    b.HasKey("Id");

                    b.ToTable("tbl_MedicationTrackerDelete", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.MeetingActionableItem", b =>
                {
                    b.Property<int>("MeetingActionableItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MeetingActionableItemId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MeetingActionableItemId"));

                    b.Property<string>("ActionableItem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ActionableItem");

                    b.Property<int>("MeetingLogId")
                        .HasColumnType("int")
                        .HasColumnName("MeetingLogId");

                    b.HasKey("MeetingActionableItemId");

                    b.HasIndex("MeetingLogId");

                    b.ToTable("tbl_MeetingActionableItem", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.MeetingAgenda", b =>
                {
                    b.Property<int>("MeetingAgendaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MeetingAgendaId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MeetingAgendaId"));

                    b.Property<string>("Agenda")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Agenda");

                    b.Property<int>("MeetingLogId")
                        .HasColumnType("int")
                        .HasColumnName("MeetingLogId");

                    b.HasKey("MeetingAgendaId");

                    b.HasIndex("MeetingLogId");

                    b.ToTable("tbl_MeetingAgenda", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.MeetingDiscussions", b =>
                {
                    b.Property<int>("MeetingDiscussionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MeetingDiscussionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MeetingDiscussionId"));

                    b.Property<string>("Discussion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Discussion");

                    b.Property<int>("MeetingLogId")
                        .HasColumnType("int")
                        .HasColumnName("MeetingLogId");

                    b.HasKey("MeetingDiscussionId");

                    b.HasIndex("MeetingLogId");

                    b.ToTable("tbl_MeetingDiscussions", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.MeetingLog", b =>
                {
                    b.Property<int>("MeetingLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MeetingLogId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MeetingLogId"));

                    b.Property<string>("ClosingRemark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ClosingRemark");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("DeadLineForFeedback")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeadLineForFeedback");

                    b.Property<string>("LocationOfMeeting")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LocationOfMeeting");

                    b.Property<DateTime>("NextMeetingDueDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("NextMeetingDueDate");

                    b.Property<string>("NoteTakerContact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NoteTakerContact");

                    b.Property<int>("NoteTakerId")
                        .HasColumnType("int")
                        .HasColumnName("NoteTakerId");

                    b.Property<string>("TimeAllocated")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TimeAllocated");

                    b.Property<DateTime>("TimeOFMeeting")
                        .HasColumnType("datetime2")
                        .HasColumnName("TimeOFMeeting");

                    b.Property<int>("TypeOfMeeting")
                        .HasColumnType("int")
                        .HasColumnName("TypeOfMeeting");

                    b.HasKey("MeetingLogId");

                    b.ToTable("tbl_MeetingLog", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.MeetingLogAttende", b =>
                {
                    b.Property<int>("MeetingLogAttendeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MeetingLogAttendeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MeetingLogAttendeId"));

                    b.Property<int>("MeetingLogId")
                        .HasColumnType("int")
                        .HasColumnName("MeetingLogId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("MeetingLogAttendeId");

                    b.HasIndex("MeetingLogId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_MeetingLogAttende", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.MeetingLogFacilitator", b =>
                {
                    b.Property<int>("MeetingLogFacilitatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MeetingLogFacilitatorId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MeetingLogFacilitatorId"));

                    b.Property<int>("MeetingLogId")
                        .HasColumnType("int")
                        .HasColumnName("MeetingLogId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("MeetingLogFacilitatorId");

                    b.HasIndex("MeetingLogId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_MeetingLogFacilitator", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.MeetingLogResponsibleToAct", b =>
                {
                    b.Property<int>("MeetingLogResponsibleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MeetingLogResponsibleId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MeetingLogResponsibleId"));

                    b.Property<int>("MeetingLogId")
                        .HasColumnType("int")
                        .HasColumnName("MeetingLogId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("MeetingLogResponsibleId");

                    b.HasIndex("MeetingLogId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_MeetingLogResponsibleToAct", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.MeetingType", b =>
                {
                    b.Property<int>("MeetingTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MeetingTypeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MeetingTypeId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("MeetingName")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("MeetingName");

                    b.HasKey("MeetingTypeId");

                    b.ToTable("tbl_MeetingType", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.MentalHealthSupport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DayAndTimeSuit")
                        .HasColumnType("bit")
                        .HasColumnName("DayAndTimeSuit");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DoThisAgain")
                        .HasColumnType("bit")
                        .HasColumnName("DoThisAgain");

                    b.Property<string>("DoesNotWorkAndLike")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DoesNotWorkAndLike");

                    b.Property<string>("DoneInTheirLive")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DoneInTheirLive");

                    b.Property<bool>("EligibleSocialCare")
                        .HasColumnType("bit")
                        .HasColumnName("EligibleSocialCare");

                    b.Property<string>("ImportantCloseThem")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ImportantCloseThem");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Keyworker")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Keyworker");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("MethodAndApproach")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MethodAndApproach");

                    b.Property<string>("OftenNeedSupport")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("OftenNeedSupport");

                    b.Property<bool>("PersonNameOrPhoto")
                        .HasColumnType("bit")
                        .HasColumnName("PersonNameOrPhoto");

                    b.Property<string>("SomethingEnjoyed")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SomethingEnjoyed");

                    b.Property<string>("StaffPreference")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StaffPreference");

                    b.Property<string>("StrengthBases")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StrengthBases");

                    b.Property<bool>("SupportPlan")
                        .HasColumnType("bit")
                        .HasColumnName("SupportPlan");

                    b.Property<string>("TowardTheirGoals")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TowardTheirGoals");

                    b.Property<string>("WiderWorkHealthCare")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WiderWorkHealthCare");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_MentalHealthSupport", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.OfficeAttendance", b =>
                {
                    b.Property<int>("AttendanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttendanceId"));

                    b.Property<string>("ClockDiff")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ClockDiff");

                    b.Property<DateTimeOffset?>("ClockIn")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("ClockIn");

                    b.Property<string>("ClockInAddress")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ClockInAddress");

                    b.Property<string>("ClockInDistance")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ClockInDistance");

                    b.Property<string>("ClockInMethod")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ClockInMethod");

                    b.Property<DateTimeOffset?>("ClockOut")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("ClockOut");

                    b.Property<string>("ClockOutAddress")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ClockOutAddress");

                    b.Property<string>("ClockOutDistance")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ClockOutDistance");

                    b.Property<string>("ClockOutMethod")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ClockOutMethod");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("JobTitle");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Location");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remark");

                    b.Property<int>("Staff")
                        .HasColumnType("int")
                        .HasColumnName("Staff");

                    b.Property<Guid?>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StartTime")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StartTime");

                    b.Property<string>("StopTime")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StopTime");

                    b.HasKey("AttendanceId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_OfficeAttendance", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.OfficeLocation", b =>
                {
                    b.Property<int>("OfficeLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OfficeLocationId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfficeLocationId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Address");

                    b.Property<string>("ContactPersonEmail")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ContactPersonEmail");

                    b.Property<string>("ContactPersonFullName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ContactPersonFullName");

                    b.Property<string>("ContactPersonPhoneNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ContactPersonPhoneNumber");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Latitude")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Latitude");

                    b.Property<string>("Longitude")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Longitude");

                    b.Property<string>("UniqueId")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("UniqueId");

                    b.HasKey("OfficeLocationId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("tbl_OfficeLocation", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.OneToOneOfficerToAct", b =>
                {
                    b.Property<int>("OneToOneOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OneToOneOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OneToOneOfficerToActId"));

                    b.Property<int>("OneToOneId")
                        .HasColumnType("int")
                        .HasColumnName("OneToOneId");

                    b.Property<int?>("StaffOneToOneOneToOneId")
                        .HasColumnType("int");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("OneToOneOfficerToActId");

                    b.HasIndex("StaffOneToOneOneToOneId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_OneToOne_OfficerToAct", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.OnlineClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("tbl_OnlineClass", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.OnlineLogQuestionResults", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AfterAnswer")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AfterAnswer");

                    b.Property<string>("BeforeAnswer")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("BeforeAnswer");

                    b.Property<int?>("BundleId")
                        .HasColumnType("int")
                        .HasColumnName("BundleId");

                    b.Property<string>("DuringAnswer")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DuringAnswer");

                    b.Property<int>("LogQuestionId")
                        .HasColumnType("int")
                        .HasColumnName("LogQuestionId");

                    b.Property<decimal?>("ObtainMark")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("ObtainMark");

                    b.Property<int>("OnlineTrainingId")
                        .HasColumnType("int")
                        .HasColumnName("OnlineTrainingId");

                    b.Property<int?>("staffId")
                        .HasColumnType("int")
                        .HasColumnName("staffId");

                    b.HasKey("Id");

                    b.ToTable("tbl_OnlineLogQuestionResults", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.OnlineMaterialType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("tbl_OnlineMaterialType", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.OnlineQuestionResults", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BundleResultId")
                        .HasColumnType("int")
                        .HasColumnName("BundleResultId");

                    b.Property<int>("OnlineTrainingId")
                        .HasColumnType("int")
                        .HasColumnName("OnlineTrainingId");

                    b.Property<int>("OptionId")
                        .HasColumnType("int")
                        .HasColumnName("OptionId");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("QuestionId");

                    b.Property<int?>("staffId")
                        .HasColumnType("int")
                        .HasColumnName("staffId");

                    b.HasKey("Id");

                    b.ToTable("tbl_OnlineQuestionResults", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.OnlineTrainingAssignStaff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("Comments");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<bool>("EligibleForTest")
                        .HasColumnType("bit")
                        .HasColumnName("EligibleForTest");

                    b.Property<int?>("ObtainMarks")
                        .HasColumnType("int")
                        .HasColumnName("ObtainMarks");

                    b.Property<int>("OnlineTrainingId")
                        .HasColumnType("int")
                        .HasColumnName("OnlineTrainingId");

                    b.Property<string>("PaymentEvidence")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("PaymentEvidence");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffId");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.ToTable("tbl_OnlineTrainingAssignStaff", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.OnlineTrainingBundle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CreatedBy");

                    b.Property<decimal?>("Fee")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Fee");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit")
                        .HasColumnName("IsPaid");

                    b.Property<string>("Name")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Name");

                    b.Property<string>("StripePaymentLinkId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StripePaymentLinkId");

                    b.Property<string>("StripeProductId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StripeProductId");

                    b.Property<int>("TrainingType")
                        .HasColumnType("int")
                        .HasColumnName("TrainingType");

                    b.HasKey("Id");

                    b.ToTable("tbl_OnlineTrainingBundle", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.OnlineTrainingBundleAssignStaff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("Comments");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<bool>("EligibleForTest")
                        .HasColumnType("bit")
                        .HasColumnName("EligibleForTest");

                    b.Property<int?>("NoOfCompleteCourse")
                        .HasColumnType("int")
                        .HasColumnName("NoOfCompleteCourse");

                    b.Property<int>("OnlineTrainingBundleId")
                        .HasColumnType("int")
                        .HasColumnName("OnlineTrainingBundleId");

                    b.Property<string>("PaymentEvidence")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("PaymentEvidence");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffId");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.ToTable("tbl_OnlineTrainingBundleAssignStaff", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.OnlineTrainingBundleCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OnlineTrainingBundleId")
                        .HasColumnType("int")
                        .HasColumnName("OnlineTrainingBundleId");

                    b.Property<int>("OnlineTrainingId")
                        .HasColumnType("int")
                        .HasColumnName("OnlineTraningId");

                    b.Property<int?>("OnlineTraningId")
                        .HasColumnType("int");

                    b.Property<int?>("StaffBundleCourseResultId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OnlineTrainingBundleId");

                    b.HasIndex("OnlineTraningId");

                    b.HasIndex("StaffBundleCourseResultId");

                    b.ToTable("tbl_OnlineTrainingBundleCourse", null, t =>
                        {
                            t.Property("OnlineTraningId")
                                .HasColumnName("OnlineTraningId1");
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.OnlineTraininglogQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AfterQuestion")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AfterQuestion");

                    b.Property<string>("BeforeQuestion")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("BeforeQuestion");

                    b.Property<string>("DuringQuestion")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DuringQuestion");

                    b.Property<int>("OnlineTraningId")
                        .HasColumnType("int")
                        .HasColumnName("OnlineTraningId");

                    b.HasKey("Id");

                    b.HasIndex("OnlineTraningId");

                    b.ToTable("tbl_OnlineTraininglogQuestion", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.OnlineTraning", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachment")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Attachment");

                    b.Property<string>("Author")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Author");

                    b.Property<string>("AuthorSignature")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("AuthorSignature");

                    b.Property<int>("ClassId")
                        .HasColumnType("int")
                        .HasColumnName("ClassId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CreatedBy");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("time")
                        .HasColumnName("Duration");

                    b.Property<decimal?>("Fee")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Fee");

                    b.Property<bool>("IsHasLogQuestion")
                        .HasColumnType("bit")
                        .HasColumnName("IsHasLogQuestion");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit")
                        .HasColumnName("IsPaid");

                    b.Property<int?>("MaterialId")
                        .HasColumnType("int")
                        .HasColumnName("MaterialId");

                    b.Property<string>("Name")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Name");

                    b.Property<int?>("PassingMarks")
                        .HasColumnType("int")
                        .HasColumnName("PassingMarks");

                    b.Property<string>("PaymentURL")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PaymentURL");

                    b.Property<DateTime?>("RenewalDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("RenewalDate");

                    b.Property<string>("StripePaymentLinkId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StripePaymentLinkId");

                    b.Property<string>("StripeProductId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StripeProductId");

                    b.Property<int>("TrainingType")
                        .HasColumnType("int")
                        .HasColumnName("TrainingType");

                    b.Property<string>("Video")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Video");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("MaterialId");

                    b.ToTable("tbl_OnlineTraning", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.OnlineTraningQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OnlineTraningId")
                        .HasColumnType("int")
                        .HasColumnName("OnlineTraningId");

                    b.Property<string>("Question")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("Question");

                    b.Property<int>("QuestionMarks")
                        .HasColumnType("int")
                        .HasColumnName("QuestionMarks");

                    b.HasKey("Id");

                    b.HasIndex("OnlineTraningId");

                    b.ToTable("tbl_OnlineTraningQuestion", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.OnlineTraningQuestionOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OnlineTraningQuestionId")
                        .HasColumnType("int")
                        .HasColumnName("OnlineTraningQuestionId");

                    b.Property<string>("Option")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("Option");

                    b.Property<int>("OptionMarks")
                        .HasColumnType("int")
                        .HasColumnName("OptionMarks");

                    b.HasKey("Id");

                    b.HasIndex("OnlineTraningQuestionId");

                    b.ToTable("tbl_OnlineTraningQuestionOptions", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.OralCare", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AnyBarriers")
                        .HasColumnType("bit")
                        .HasColumnName("AnyBarriers");

                    b.Property<string>("AnyBarriersFinding")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("AnyBarriersFinding");

                    b.Property<bool>("AnyOralRelatedProblem")
                        .HasColumnType("bit")
                        .HasColumnName("AnyOralRelatedProblem");

                    b.Property<string>("AnyOralRelatedProblemDetail")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("AnyOralRelatedProblemDetail");

                    b.Property<bool>("AssistedDentalAppointment")
                        .HasColumnType("bit")
                        .HasColumnName("AssistedDentalAppointment");

                    b.Property<bool>("AssistedWithCleaning")
                        .HasColumnType("bit")
                        .HasColumnName("AssistedWithCleaning");

                    b.Property<bool>("AssistedWithDailyActivities")
                        .HasColumnType("bit")
                        .HasColumnName("AssistedWithDailyActivities");

                    b.Property<bool>("AssistedWithOralCare")
                        .HasColumnType("bit")
                        .HasColumnName("AssistedWithOralCare");

                    b.Property<bool>("BurushTeeth")
                        .HasColumnType("bit")
                        .HasColumnName("BurushTeeth");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<bool>("ConfirmDentist")
                        .HasColumnType("bit")
                        .HasColumnName("ConfirmDentist");

                    b.Property<bool>("ConfirmInvolingParties")
                        .HasColumnType("bit")
                        .HasColumnName("ConfirmInvolingParties");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DentureCleanAny")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("DentureCleanAny");

                    b.Property<bool>("DenturePot")
                        .HasColumnType("bit")
                        .HasColumnName("DenturePot");

                    b.Property<string>("DenturePotLocated")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("DenturePotLocated");

                    b.Property<bool>("DryMouth")
                        .HasColumnType("bit")
                        .HasColumnName("DryMouth");

                    b.Property<bool>("FoamEnded")
                        .HasColumnType("bit")
                        .HasColumnName("FoamEnded");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LookIntoMouth")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("LookIntoMouth");

                    b.Property<bool>("LowerDenture")
                        .HasColumnType("bit")
                        .HasColumnName("LowerDenture");

                    b.Property<string>("ManyTimeClean")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("ManyTimeClean");

                    b.Property<bool>("NoTeeth")
                        .HasColumnType("bit")
                        .HasColumnName("NoTeeth");

                    b.Property<bool>("Nonfoaming")
                        .HasColumnType("bit")
                        .HasColumnName("Nonfoaming");

                    b.Property<string>("OtherMouthCareItems")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("OtherMouthCareItems");

                    b.Property<string>("OtherTypes")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("OtherTypes");

                    b.Property<bool>("RecordOfMouthProduct")
                        .HasColumnType("bit")
                        .HasColumnName("RecordOfMouthProduct");

                    b.Property<bool>("RequireOralSupport")
                        .HasColumnType("bit")
                        .HasColumnName("RequireOralSupport");

                    b.Property<bool>("SmallHeadedToothBrush")
                        .HasColumnType("bit")
                        .HasColumnName("SmallHeadedToothBrush");

                    b.Property<bool>("StoreProduct")
                        .HasColumnType("bit")
                        .HasColumnName("StoreProduct");

                    b.Property<string>("Summary")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("Summary");

                    b.Property<bool>("ToothPaste")
                        .HasColumnType("bit")
                        .HasColumnName("ToothPaste");

                    b.Property<bool>("TrainingInAssessing")
                        .HasColumnType("bit")
                        .HasColumnName("TrainingInAssessing");

                    b.Property<bool>("TypeDenturePot")
                        .HasColumnType("bit")
                        .HasColumnName("TypeDenturePot");

                    b.Property<bool>("Uncomfortable")
                        .HasColumnType("bit")
                        .HasColumnName("Uncomfortable");

                    b.Property<string>("UncomfortableDetail")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("UncomfortableDetail");

                    b.Property<bool>("UpperDenture")
                        .HasColumnType("bit")
                        .HasColumnName("UpperDenture");

                    b.Property<bool>("WearDentures")
                        .HasColumnType("bit")
                        .HasColumnName("WearDentures");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_OralCare", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.OxygenLvlOfficerToAct", b =>
                {
                    b.Property<int>("OxygenLvlOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OxygenLvlOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OxygenLvlOfficerToActId"));

                    b.Property<int>("OxygenLvlId")
                        .HasColumnType("int")
                        .HasColumnName("OxygenLvlId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("OxygenLvlOfficerToActId");

                    b.HasIndex("OxygenLvlId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_OxygenLvl_OfficerToAct", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.OxygenLvlPhysician", b =>
                {
                    b.Property<int>("OxygenLvlPhysicianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OxygenLvlPhysicianId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OxygenLvlPhysicianId"));

                    b.Property<int>("OxygenLvlId")
                        .HasColumnType("int")
                        .HasColumnName("OxygenLvlId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("OxygenLvlPhysicianId");

                    b.HasIndex("OxygenLvlId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_OxygenLvl_Physician", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.OxygenLvlStaffName", b =>
                {
                    b.Property<int>("OxygenLvlStaffNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OxygenLvlStaffNameId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OxygenLvlStaffNameId"));

                    b.Property<int>("OxygenLvlId")
                        .HasColumnType("int")
                        .HasColumnName("OxygenLvlId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("OxygenLvlStaffNameId");

                    b.HasIndex("OxygenLvlId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_OxygenLvl_StaffName", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.PainChartOfficerToAct", b =>
                {
                    b.Property<int>("PainChartOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PainChartOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PainChartOfficerToActId"));

                    b.Property<int>("PainChartId")
                        .HasColumnType("int")
                        .HasColumnName("PainChartId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("PainChartOfficerToActId");

                    b.HasIndex("PainChartId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_PainChart_OfficerToAct", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.PainChartPhysician", b =>
                {
                    b.Property<int>("PainChartPhysicianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PainChartPhysicianId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PainChartPhysicianId"));

                    b.Property<int>("PainChartId")
                        .HasColumnType("int")
                        .HasColumnName("PainChartId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("PainChartPhysicianId");

                    b.HasIndex("PainChartId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_PainChart_Physician", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.PainChartStaffName", b =>
                {
                    b.Property<int>("PainChartStaffNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PainChartStaffNameId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PainChartStaffNameId"));

                    b.Property<int>("PainChartId")
                        .HasColumnType("int")
                        .HasColumnName("PainChartId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("PainChartStaffNameId");

                    b.HasIndex("PainChartId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_PainChart_StaffName", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.PayrollSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryofStaff")
                        .HasColumnType("int")
                        .HasColumnName("CategoryofStaff");

                    b.Property<string>("Createdby")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Createdby");

                    b.Property<string>("EndDate")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("EndDate");

                    b.Property<string>("Staff")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("Staff");

                    b.Property<int?>("StaffClass")
                        .HasColumnType("int")
                        .HasColumnName("StaffClass");

                    b.Property<string>("StartDate")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("StartDate");

                    b.Property<int?>("TypeofStaffService")
                        .HasColumnType("int")
                        .HasColumnName("TypeofStaffService");

                    b.HasKey("Id");

                    b.ToTable("tbl_PayrollSummary", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.PerformanceIndicator", b =>
                {
                    b.Property<int>("PerformanceIndicatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PerformanceIndicatorId"));

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DueDate");

                    b.Property<string>("Heading")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Heading");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("Rating");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.HasKey("PerformanceIndicatorId");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_PerformanceIndicator", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.PerformanceIndicatorTask", b =>
                {
                    b.Property<int>("PerformanceIndicatorTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PerformanceIndicatorTaskId"));

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PerformanceIndicatorId")
                        .HasColumnType("int")
                        .HasColumnName("StaffCompetenceTestId");

                    b.Property<int>("Score")
                        .HasColumnType("int")
                        .HasColumnName("Score");

                    b.Property<int>("Title")
                        .HasColumnType("int")
                        .HasColumnName("Title");

                    b.HasKey("PerformanceIndicatorTaskId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PerformanceIndicatorId");

                    b.ToTable("tbl_PerformanceIndicatorTask", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.PersonCentred", b =>
                {
                    b.Property<int>("PersonCentredId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PersonCentredId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonCentredId"));

                    b.Property<int>("Class")
                        .HasColumnType("int")
                        .HasColumnName("Class");

                    b.Property<string>("ExpSupport")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExpSupport");

                    b.Property<int>("PersonalDetailId")
                        .HasColumnType("int")
                        .HasColumnName("PersonalDetailId");

                    b.HasKey("PersonCentredId");

                    b.HasIndex("PersonalDetailId");

                    b.ToTable("tbl_PersonCentred", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.PersonCentredFocus", b =>
                {
                    b.Property<int>("PersonCentredFocusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PersonCentredFocusId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonCentredFocusId"));

                    b.Property<int>("BaseRecordId")
                        .HasColumnType("int")
                        .HasColumnName("BaseRecordId");

                    b.Property<int>("PersonCentredId")
                        .HasColumnType("int")
                        .HasColumnName("PersonCentredId");

                    b.HasKey("PersonCentredFocusId");

                    b.HasIndex("PersonCentredId");

                    b.ToTable("tbl_PersonCentredFocus", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.Personal", b =>
                {
                    b.Property<int>("PersonalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PersonalId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonalId"));

                    b.Property<int>("DNR")
                        .HasColumnType("int")
                        .HasColumnName("DNR");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Nationality");

                    b.Property<int>("PersonalDetailId")
                        .HasColumnType("int")
                        .HasColumnName("PersonalDetailId");

                    b.Property<string>("Religion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Religion");

                    b.Property<int>("Smoking")
                        .HasColumnType("int")
                        .HasColumnName("Smoking");

                    b.HasKey("PersonalId");

                    b.HasIndex("PersonalDetailId")
                        .IsUnique();

                    b.ToTable("tbl_Personal", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.PersonalDetail", b =>
                {
                    b.Property<int>("PersonalDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PersonalDetailId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonalDetailId"));

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ManagerSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffSignature")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonalDetailId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_PersonalDetail", null, t =>
                        {
                            t.Property("ClientId")
                                .HasColumnName("ClientId1");
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.PersonalHygiene", b =>
                {
                    b.Property<int>("HygieneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("HygieneId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HygieneId"));

                    b.Property<int>("Cleaning")
                        .HasColumnType("int")
                        .HasColumnName("Cleaning");

                    b.Property<int>("CleaningFreq")
                        .HasColumnType("int")
                        .HasColumnName("CleaningFreq");

                    b.Property<int>("CleaningTools")
                        .HasColumnType("int")
                        .HasColumnName("CleaningTools");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("DesiredCleaning")
                        .HasColumnType("int")
                        .HasColumnName("DesiredCleaning");

                    b.Property<int>("DirtyLaundry")
                        .HasColumnType("int")
                        .HasColumnName("DirtyLaundry");

                    b.Property<int>("DryLaundry")
                        .HasColumnType("int")
                        .HasColumnName("DryLaundry");

                    b.Property<int>("GeneralAppliance")
                        .HasColumnType("int")
                        .HasColumnName("GeneralAppliance");

                    b.Property<int>("Ironing")
                        .HasColumnType("int")
                        .HasColumnName("Ironing");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LaundryGuide")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LaundryGuide");

                    b.Property<string>("LaundrySupport")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LaundrySupport");

                    b.Property<int>("WashingMachine")
                        .HasColumnType("int")
                        .HasColumnName("WashingMachine");

                    b.Property<int>("WhoClean")
                        .HasColumnType("int")
                        .HasColumnName("WhoClean");

                    b.HasKey("HygieneId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_PersonalHygiene", null, t =>
                        {
                            t.Property("ClientId")
                                .HasColumnName("ClientId1");
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.PersonalityTest", b =>
                {
                    b.Property<int>("TestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TestId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestId"));

                    b.Property<int>("Answer")
                        .HasColumnType("int")
                        .HasColumnName("Answer");

                    b.Property<int>("GoalId")
                        .HasColumnType("int")
                        .HasColumnName("GoalId");

                    b.Property<int>("Question")
                        .HasColumnType("int")
                        .HasColumnName("Question");

                    b.HasKey("TestId");

                    b.HasIndex("GoalId");

                    b.ToTable("tbl_PersonalityTest", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.Pets", b =>
                {
                    b.Property<int>("PetsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PetsId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PetsId"));

                    b.Property<string>("Age")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Age");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int")
                        .HasColumnName("Gender");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("MealPattern")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MealPattern");

                    b.Property<int>("MealStorage")
                        .HasColumnType("int")
                        .HasColumnName("MealStorage");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("PetActivities")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PetActivities");

                    b.Property<string>("PetCare")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PetCare");

                    b.Property<int>("PetInsurance")
                        .HasColumnType("int")
                        .HasColumnName("PetInsurance");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("Type");

                    b.Property<int>("VetVisit")
                        .HasColumnType("int")
                        .HasColumnName("VetVisit");

                    b.HasKey("PetsId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_Pets", null, t =>
                        {
                            t.Property("ClientId")
                                .HasColumnName("ClientId1");
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.PettyCash", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Ammount");

                    b.Property<Guid>("CompanyId")
                        .HasMaxLength(450)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<string>("Detail")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("Detail");

                    b.Property<int?>("MethodId")
                        .HasColumnType("int")
                        .HasColumnName("MethodId");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffId");

                    b.HasKey("Id");

                    b.ToTable("tbl_PettyCash", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.PettyCashHeading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CompanyId")
                        .HasMaxLength(450)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompanyId");

                    b.Property<bool>("IsMethod")
                        .HasColumnType("bit")
                        .HasColumnName("IsMethod");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("tbl_PettyCashHeading", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.PettyCashUsage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Data");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<string>("Detail")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("Detail");

                    b.Property<int>("PettyCashId")
                        .HasColumnType("int")
                        .HasColumnName("PettyCashId");

                    b.Property<string>("ReceiptNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ReceiptNo");

                    b.Property<decimal?>("Total")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Total");

                    b.HasKey("Id");

                    b.HasIndex("PettyCashId");

                    b.ToTable("tbl_PettyCashUsage", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.PhysicalAbility", b =>
                {
                    b.Property<int>("PhysicalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PhysicalId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhysicalId"));

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Mobility")
                        .HasColumnType("int")
                        .HasColumnName("Mobility");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.HasKey("PhysicalId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_PhysicalAbility", null, t =>
                        {
                            t.Property("ClientId")
                                .HasColumnName("ClientId1");
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.PlannedDeduction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AmountToDeduct")
                        .HasColumnType("int")
                        .HasColumnName("AmountToDeduct");

                    b.Property<int>("DeductionId")
                        .HasColumnType("int")
                        .HasColumnName("DeductionId");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("FromDate");

                    b.Property<float>("GrossAmount")
                        .HasColumnType("real")
                        .HasColumnName("GrossAmount");

                    b.Property<string>("PercentageOfGross")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PercentageOfGross");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffId");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ToDate");

                    b.HasKey("Id");

                    b.ToTable("tbl_PlannedDeduction", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.PlannedIncome", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AmountToAdd")
                        .HasColumnType("int")
                        .HasColumnName("AmountToAdd");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("FromDate");

                    b.Property<float>("GrossAmount")
                        .HasColumnType("real")
                        .HasColumnName("GrossAmount");

                    b.Property<int>("IncomeId")
                        .HasColumnType("int")
                        .HasColumnName("IncomeId");

                    b.Property<string>("PercentageOfGross")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PercentageOfGross");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffId");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ToDate");

                    b.HasKey("Id");

                    b.ToTable("tbl_PlannedIncome", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.Policies", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastReview")
                        .HasColumnType("datetime2");

                    b.Property<string>("Link")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("Link");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Name");

                    b.Property<string>("PolicyOwner")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("PolicyOwner");

                    b.Property<int>("PolicyType")
                        .HasColumnType("int");

                    b.Property<string>("Ref")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Ref");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("tbl_Policies", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.Policy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachment")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("Attachment");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ExpireDate");

                    b.Property<string>("PolicyName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("PolicyName");

                    b.Property<string>("PolicyURl")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("PolicyURl");

                    b.Property<string>("Remark")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("Remark");

                    b.HasKey("Id");

                    b.ToTable("tbl_Policy", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ProgramOfficerToAct", b =>
                {
                    b.Property<int>("ProgramOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProgramOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgramOfficerToActId"));

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("ProgramOfficerToActId");

                    b.HasIndex("ProgramId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_Program_OfficerToAct", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.PulseRateOfficerToAct", b =>
                {
                    b.Property<int>("PulseRateOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PulseRateOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PulseRateOfficerToActId"));

                    b.Property<int>("PulseRateId")
                        .HasColumnType("int")
                        .HasColumnName("PulseRateId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("PulseRateOfficerToActId");

                    b.HasIndex("PulseRateId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_PulseRate_OfficerToAct", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.PulseRatePhysician", b =>
                {
                    b.Property<int>("PulseRatePhysicianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PulseRatePhysicianId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PulseRatePhysicianId"));

                    b.Property<int>("PulseRateId")
                        .HasColumnType("int")
                        .HasColumnName("PulseRateId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("PulseRatePhysicianId");

                    b.HasIndex("PulseRateId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_PulseRate_Physician", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.PulseRateStaffName", b =>
                {
                    b.Property<int>("PulseRateStaffNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PulseRateStaffNameId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PulseRateStaffNameId"));

                    b.Property<int>("PulseRateId")
                        .HasColumnType("int")
                        .HasColumnName("PulseRateId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("PulseRateStaffNameId");

                    b.HasIndex("PulseRateId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_PulseRate_StaffName", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.RecentProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int>("Progress")
                        .HasColumnType("int")
                        .HasColumnName("Progress");

                    b.HasKey("Id");

                    b.ToTable("tbl_RecentProject", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.RegisterDeduction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("DeductionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DeductionName");

                    b.HasKey("Id");

                    b.ToTable("tbl_RegisterDeduction", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.RegisterIncome", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("IncomeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IncomeName");

                    b.HasKey("Id");

                    b.ToTable("tbl_RegisterIncome", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.Resources", b =>
                {
                    b.Property<int>("ResourcesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResourcesId"));

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<string>("Heading")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Heading");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Image");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Note");

                    b.Property<string>("PublishBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PublishBy");

                    b.Property<Guid>("PublishTo")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PublishTo");

                    b.Property<string>("Video")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Video");

                    b.HasKey("ResourcesId");

                    b.HasIndex("ClientId");

                    b.ToTable("tbl_Resources_", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReviewId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<DateTime>("CP_PreDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CP_PreDate");

                    b.Property<DateTime>("CP_ReviewDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CP_ReviewDate");

                    b.Property<string>("CarePlanStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CarePlanStatus");

                    b.Property<int>("PersonalDetailId")
                        .HasColumnType("int")
                        .HasColumnName("PersonalDetailId");

                    b.Property<DateTime>("RA_PreDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("RA_PreDate");

                    b.Property<DateTime>("RA_ReviewDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("RA_ReviewDate");

                    b.Property<string>("RisAssistmentStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("RisAssistmentStatus");

                    b.HasKey("ReviewId");

                    b.HasIndex("PersonalDetailId")
                        .IsUnique();

                    b.ToTable("tbl_Review", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.Rota", b =>
                {
                    b.Property<int>("RotaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RotaId"));

                    b.Property<string>("Area")
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("Area");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasColumnName("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("Gender");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberOfStaff")
                        .HasColumnType("int")
                        .HasColumnName("NumberOfStaff");

                    b.Property<string>("RotaName")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("RotaName");

                    b.HasKey("RotaId");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_ClientRotaName", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.RotaDayofWeek", b =>
                {
                    b.Property<int>("RotaDayofWeekId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RotaDayofWeekId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RotaDayofWeekId"));

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DayofWeek")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("DayofWeek");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasColumnName("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("RotaDayofWeekId");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_RotaDayofWeek", (string)null);

                    b.HasData(
                        new
                        {
                            RotaDayofWeekId = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayofWeek = "Monday",
                            Deleted = false,
                            IsDeleted = false
                        },
                        new
                        {
                            RotaDayofWeekId = 2,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayofWeek = "Tuesday",
                            Deleted = false,
                            IsDeleted = false
                        },
                        new
                        {
                            RotaDayofWeekId = 3,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayofWeek = "Wednesday",
                            Deleted = false,
                            IsDeleted = false
                        },
                        new
                        {
                            RotaDayofWeekId = 4,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayofWeek = "Thursday",
                            Deleted = false,
                            IsDeleted = false
                        },
                        new
                        {
                            RotaDayofWeekId = 5,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayofWeek = "Friday",
                            Deleted = false,
                            IsDeleted = false
                        },
                        new
                        {
                            RotaDayofWeekId = 6,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayofWeek = "Saturday",
                            Deleted = false,
                            IsDeleted = false
                        },
                        new
                        {
                            RotaDayofWeekId = 7,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayofWeek = "Sunday",
                            Deleted = false,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.RotaPin", b =>
                {
                    b.Property<int>("PinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PinId"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Key");

                    b.Property<int>("Pin")
                        .HasColumnType("int")
                        .HasColumnName("Pin");

                    b.HasKey("PinId");

                    b.ToTable("tbl_RotaPin", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.RotaStaff", b =>
                {
                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StaffMedRotaId")
                        .HasColumnType("int");

                    b.HasKey("StaffId", "StaffMedRotaId");

                    b.HasIndex("StaffMedRotaId");

                    b.ToTable("tbl_RotaStaff", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.RotaTask", b =>
                {
                    b.Property<int>("RotaTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RotaTaskId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RotaTaskId"));

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasColumnName("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("GivenAcronym")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("GivenAcronym");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NotGivenAcronym")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NotGivenAcronym");

                    b.Property<string>("Remark")
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)")
                        .HasColumnName("Remark");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)")
                        .HasColumnName("TaskName");

                    b.HasKey("RotaTaskId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("GivenAcronym")
                        .IsUnique()
                        .HasDatabaseName("IX_tbl_RotaTask_GivenAcronym");

                    b.HasIndex("NotGivenAcronym")
                        .IsUnique()
                        .HasDatabaseName("IX_tbl_RotaTask_NotGivenAcronym");

                    b.HasIndex("TaskName")
                        .IsUnique()
                        .HasDatabaseName("IX_tbl_RotaTask_TaskName");

                    b.ToTable("tbl_RotaTask", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.SalaryAllowance", b =>
                {
                    b.Property<int>("SalaryAllowanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalaryAllowanceId"));

                    b.Property<int>("AllowanceType")
                        .HasColumnType("int")
                        .HasColumnName("AllowanceType");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Amount");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("EndDate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Percentage");

                    b.Property<string>("Reoccurent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Reoccurent");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartDate");

                    b.HasKey("SalaryAllowanceId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_SalaryAllowance", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.SalaryDeduction", b =>
                {
                    b.Property<int>("SalaryDeductionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalaryDeductionId"));

                    b.Property<int>("AllowanceType")
                        .HasColumnType("int")
                        .HasColumnName("AllowanceType");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Amount");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("EndDate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Percentage");

                    b.Property<string>("Reoccurent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Reoccurent");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartDate");

                    b.HasKey("SalaryDeductionId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_SalaryDeduction", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.SeizureOfficerToAct", b =>
                {
                    b.Property<int>("SeizureOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SeizureOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeizureOfficerToActId"));

                    b.Property<int>("SeizureId")
                        .HasColumnType("int")
                        .HasColumnName("SeizureId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("SeizureOfficerToActId");

                    b.HasIndex("SeizureId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_Seizure_OfficerToAct", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.SeizurePhysician", b =>
                {
                    b.Property<int>("SeizurePhysicianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SeizurePhysicianId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeizurePhysicianId"));

                    b.Property<int>("SeizureId")
                        .HasColumnType("int")
                        .HasColumnName("SeizureId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("SeizurePhysicianId");

                    b.HasIndex("SeizureId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_Seizure_Physician", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.SeizureStaffName", b =>
                {
                    b.Property<int>("SeizureStaffNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SeizureStaffNameId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeizureStaffNameId"));

                    b.Property<int>("SeizureId")
                        .HasColumnType("int")
                        .HasColumnName("SeizureId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("SeizureStaffNameId");

                    b.HasIndex("SeizureId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_Seizure_StaffName", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ServiceOfficerToAct", b =>
                {
                    b.Property<int>("ServiceOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ServiceOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceOfficerToActId"));

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("ServiceOfficerToActId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_Service_OfficerToAct", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ServiceStaffName", b =>
                {
                    b.Property<int>("ServiceStaffNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ServiceStaffNameId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceStaffNameId"));

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("ServiceStaffNameId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_Service_StaffName", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ServiceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CompanyId")
                        .HasMaxLength(38)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompanyId");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("tbl_ServiceType", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ServiceWeek", b =>
                {
                    b.Property<int>("ServiceWeekId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ServiceWeekId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceWeekId"));

                    b.Property<string>("WeekName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ServiceWeekId");

                    b.ToTable("tbl_ServiceWeek", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.SetupStaffHoliday", b =>
                {
                    b.Property<int>("SetupHolidayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SetupHolidayId"));

                    b.Property<string>("Attachment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attachment");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("HoursSoFar")
                        .HasColumnType("int")
                        .HasColumnName("HoursSoFar");

                    b.Property<int>("IncrementalDailyHolidayByHrs")
                        .HasColumnType("int")
                        .HasColumnName("IncrementalDailyHolidayByHrs");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberOfDays")
                        .HasColumnType("int")
                        .HasColumnName("NumberOfDays");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remark");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<int>("TypeOfHoliday")
                        .HasColumnType("int")
                        .HasColumnName("TypeOfHoliday");

                    b.Property<DateTime>("YearEndPeriodStartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("YearEndPeriodStartDate");

                    b.Property<DateTime>("YearOfEmployment")
                        .HasColumnType("datetime2")
                        .HasColumnName("YearOfEmployment");

                    b.HasKey("SetupHolidayId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_SetupStaffHoliday", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ShiftBooking", b =>
                {
                    b.Property<int>("ShiftBookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ShiftBookingId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShiftBookingId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("DriverRequired")
                        .HasColumnType("bit")
                        .HasColumnName("DriverRequired");

                    b.Property<int>("NumberOfStaff")
                        .HasColumnType("int")
                        .HasColumnName("NumberOfStaff");

                    b.Property<int?>("PublishTo")
                        .HasColumnType("int")
                        .HasColumnName("PublishTo");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("Remark");

                    b.Property<int>("Rota")
                        .HasColumnType("int")
                        .HasColumnName("Rota");

                    b.Property<string>("ShiftDate")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("ShiftDate");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("StartTime");

                    b.Property<string>("StopTime")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("StopTime");

                    b.Property<int>("Team")
                        .HasColumnType("int")
                        .HasColumnName("Team_StaffPersonalInfoId");

                    b.HasKey("ShiftBookingId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("tbl_ShiftBooking", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ShiftBookingBlockedDays", b =>
                {
                    b.Property<int>("ShiftBookingBlockedDaysId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ShiftBookingBlockedDaysId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShiftBookingBlockedDaysId"));

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasColumnName("Day");

                    b.Property<int>("ShiftBookingId")
                        .HasColumnType("int")
                        .HasColumnName("ShiftBookingId");

                    b.Property<string>("WeekDay")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("WeekDay");

                    b.HasKey("ShiftBookingBlockedDaysId");

                    b.HasIndex("ShiftBookingId");

                    b.ToTable("tbl_ShiftBookingBlockedDays", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.SideMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("ActionName");

                    b.Property<string>("ControllerName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("ControllerName");

                    b.Property<string>("Icon")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Icon");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<int>("Level")
                        .HasColumnType("int")
                        .HasColumnName("Level");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Name");

                    b.Property<int?>("parentsId")
                        .HasColumnType("int")
                        .HasColumnName("parentsId");

                    b.HasKey("Id");

                    b.ToTable("tbl_SideMenu", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.SpecialHealthAndMedication", b =>
                {
                    b.Property<int>("SHMId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SHMId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SHMId"));

                    b.Property<int>("AccessMedication")
                        .HasColumnType("int")
                        .HasColumnName("AccessMedication");

                    b.Property<int>("AdminLvl")
                        .HasColumnType("int")
                        .HasColumnName("AdminLvl");

                    b.Property<string>("By")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("By");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<int>("Consent")
                        .HasColumnType("int")
                        .HasColumnName("Consent");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("FamilyMeds")
                        .HasColumnType("int")
                        .HasColumnName("FamilyMeds");

                    b.Property<int>("FamilyReturnMed")
                        .HasColumnType("int")
                        .HasColumnName("FamilyReturnMed");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("LeftoutMedicine")
                        .HasColumnType("int")
                        .HasColumnName("LeftoutMedicine");

                    b.Property<int>("MedAccessDenial")
                        .HasColumnType("int")
                        .HasColumnName("MedAccessDenial");

                    b.Property<string>("MedKeyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MedKeyCode");

                    b.Property<int>("MedicationAllergy")
                        .HasColumnType("int")
                        .HasColumnName("MedicationAllergy");

                    b.Property<string>("MedicationStorage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MedicationStorage");

                    b.Property<int>("MedsGPOrder")
                        .HasColumnType("int")
                        .HasColumnName("MedsGPOrder");

                    b.Property<int>("NameFormMedicaiton")
                        .HasColumnType("int")
                        .HasColumnName("NameFormMedicaiton");

                    b.Property<int>("NoMedAccess")
                        .HasColumnType("int")
                        .HasColumnName("NoMedAccess");

                    b.Property<int>("OverdoseContact")
                        .HasColumnType("int")
                        .HasColumnName("OverdoseContact");

                    b.Property<int>("PNRDoses")
                        .HasColumnType("int")
                        .HasColumnName("PNRDoses");

                    b.Property<string>("PNRMedList")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PNRMedList");

                    b.Property<int>("PNRMedReq")
                        .HasColumnType("int")
                        .HasColumnName("PNRMedReq");

                    b.Property<int>("PNRMedsAdmin")
                        .HasColumnType("int")
                        .HasColumnName("PNRMedsAdmin");

                    b.Property<string>("PNRMedsMissing")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PNRMedsMissing");

                    b.Property<int>("PharmaMARChart")
                        .HasColumnType("int")
                        .HasColumnName("PharmaMARChart");

                    b.Property<int>("SpecialStorage")
                        .HasColumnType("int")
                        .HasColumnName("SpecialStorage");

                    b.Property<int>("TempMARChart")
                        .HasColumnType("int")
                        .HasColumnName("TempMARChart");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("Type");

                    b.Property<int>("WhoAdminister")
                        .HasColumnType("int")
                        .HasColumnName("WhoAdminister");

                    b.HasKey("SHMId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_SpecialHealthAndMedication", null, t =>
                        {
                            t.Property("ClientId")
                                .HasColumnName("ClientId1");
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.SpecialHealthCondition", b =>
                {
                    b.Property<int>("HealthCondId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("HealthCondId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HealthCondId"));

                    b.Property<string>("ClientAction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ClientAction");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClinicRecommendation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ClinicRecommendation");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("ConditionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ConditionName");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeelingAfterIncident")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FeelingAfterIncident");

                    b.Property<string>("FeelingBeforeIncident")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FeelingBeforeIncident");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Frequency");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LifestyleSupport")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LifestyleSupport");

                    b.Property<string>("LivingActivities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LivingActivities");

                    b.Property<string>("PlanningHealthCondition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PlanningHealthCondition");

                    b.Property<string>("SourceInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SourceInformation");

                    b.Property<string>("Trigger")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Trigger");

                    b.HasKey("HealthCondId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_SpecialHealthCondition", null, t =>
                        {
                            t.Property("ClientId")
                                .HasColumnName("ClientId1");
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.SpotCheckOfficerToAct", b =>
                {
                    b.Property<int>("SpotCheckOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SpotCheckOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpotCheckOfficerToActId"));

                    b.Property<int>("SpotCheckId")
                        .HasColumnType("int")
                        .HasColumnName("SpotCheckId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<int?>("StaffSpotCheckSpotCheckId")
                        .HasColumnType("int");

                    b.HasKey("SpotCheckOfficerToActId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.HasIndex("StaffSpotCheckSpotCheckId");

                    b.ToTable("tbl_SpotCheck_OfficerToAct", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffAdlObs", b =>
                {
                    b.Property<int>("ObservationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ObservationID"));

                    b.Property<string>("ActionRequired")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ActionRequired");

                    b.Property<string>("Attachment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attachment");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Comments");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Details");

                    b.Property<int>("FivePrinciples")
                        .HasColumnType("int")
                        .HasColumnName("FivePrinciples");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ManagerSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("NextCheckDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("NextCheckDate");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Reference");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffId");

                    b.Property<string>("StaffSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("URL");

                    b.Property<int>("UnderstandingofControl")
                        .HasColumnType("int")
                        .HasColumnName("UnderstandingofControl");

                    b.Property<int>("UnderstandingofEquipment")
                        .HasColumnType("int")
                        .HasColumnName("UnderstandingofEquipment");

                    b.Property<int>("UnderstandingofService")
                        .HasColumnType("int")
                        .HasColumnName("UnderstandingofService");

                    b.HasKey("ObservationID");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("StaffId");

                    b.ToTable("tbl_Staff_AdlObs", null, t =>
                        {
                            t.Property("ClientId")
                                .HasColumnName("ClientId1");
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffAlert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasColumnName("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Heading")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Heading");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSet")
                        .HasColumnType("bit")
                        .HasColumnName("IsSet");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Text");

                    b.Property<string>("TimeDuration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TimeDuration");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_staffalert", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffAlertCountMatrix", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AboutToExpired")
                        .HasColumnType("int")
                        .HasColumnName("AboutToExpired");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasColumnName("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Expired")
                        .HasColumnType("int")
                        .HasColumnName("Expired");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Missed")
                        .HasColumnType("int")
                        .HasColumnName("Missed");

                    b.Property<int>("StaffAlertId")
                        .HasColumnType("int");

                    b.Property<int>("TotalCouts")
                        .HasColumnType("int")
                        .HasColumnName("TotalCouts");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("StaffAlertId");

                    b.ToTable("tbl_staffalertcountmatrix", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffBlackList", b =>
                {
                    b.Property<int>("StaffBlackListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StaffBlackListId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffBlackListId"));

                    b.Property<Guid>("ClentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("Comment");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("StaffBlackListId");

                    b.HasIndex("ClientId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_StaffBlackList", null, t =>
                        {
                            t.Property("ClientId")
                                .HasColumnName("ClientId1");
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffBundleCourseResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BundleId")
                        .HasColumnType("int")
                        .HasColumnName("BundleId");

                    b.Property<bool>("IsEligibleForTest")
                        .HasColumnType("bit")
                        .HasColumnName("IsEligibleForTest");

                    b.Property<decimal?>("ObtainMarks")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("ObtainMarks");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffId");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Status");

                    b.Property<int>("TrainingCourseId")
                        .HasColumnType("int")
                        .HasColumnName("TrainingCourseId");

                    b.HasKey("Id");

                    b.ToTable("tbl_StaffBundleCourseResult", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffCommunication", b =>
                {
                    b.Property<int>("StaffCommunicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StaffCommunicationId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffCommunicationId"));

                    b.Property<string>("ActionTaken")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ActionTaken");

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attachment");

                    b.Property<int>("CommunicationClassId")
                        .HasColumnType("int")
                        .HasColumnName("CommunicationClass");

                    b.Property<string>("Concern")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Concern");

                    b.Property<string>("ExpectedAction")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ExpectedAction");

                    b.Property<int>("PersonInvolved")
                        .HasColumnType("int")
                        .HasColumnName("PersonInvolved");

                    b.Property<int>("PersonResponsibleForAction")
                        .HasColumnType("int")
                        .HasColumnName("PersonResponsibleForAction");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Telephone");

                    b.Property<DateTime>("ValueDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ValueDate");

                    b.HasKey("StaffCommunicationId");

                    b.ToTable("tbl_StaffCommunication", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffCompetenceTest", b =>
                {
                    b.Property<int>("StaffCompetenceTestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffCompetenceTestId"));

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Heading")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Heading");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("StaffCompetenceTestId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_StaffCompetenceTest", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffCompetenceTestTask", b =>
                {
                    b.Property<int>("StaffCompetenceTestTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffCompetenceTestTaskId"));

                    b.Property<int>("Answer")
                        .HasColumnType("int")
                        .HasColumnName("Answer");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Comment");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Point")
                        .HasColumnType("int")
                        .HasColumnName("Point");

                    b.Property<int>("Score")
                        .HasColumnType("int")
                        .HasColumnName("Score");

                    b.Property<int>("StaffCompetenceTestId")
                        .HasColumnType("int")
                        .HasColumnName("StaffCompetenceTestId");

                    b.Property<int>("Title")
                        .HasColumnType("int")
                        .HasColumnName("Title");

                    b.HasKey("StaffCompetenceTestTaskId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("StaffCompetenceTestId");

                    b.ToTable("tbl_StaffCompetenceTestTask", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffContract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContactId")
                        .HasColumnType("int")
                        .HasColumnName("ContactId");

                    b.Property<string>("HRSignature")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("HRSignature");

                    b.Property<DateTime?>("HRSignatureDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("HRSignatureDate");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffId");

                    b.Property<string>("StaffSignature")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("StaffSignature");

                    b.Property<DateTime?>("StaffSignatureDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("StaffSignatureDate");

                    b.Property<string>("Template")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Template");

                    b.HasKey("Id");

                    b.ToTable("tbl_StaffContract", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffEducation", b =>
                {
                    b.Property<int>("StaffEducationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StaffEducationId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffEducationId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Address");

                    b.Property<string>("Certificate")
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)")
                        .HasColumnName("Certificate");

                    b.Property<string>("CertificateAttachment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CertificateAttachment");

                    b.Property<string>("EndDate")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("EndDate");

                    b.Property<string>("Institution")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Institution");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Location");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<string>("StartDate")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("StartDate");

                    b.HasKey("StaffEducationId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_StaffEducation", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffEmergencyContact", b =>
                {
                    b.Property<int>("StaffEmergencyContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StaffEmergencyContactId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffEmergencyContactId"));

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Address");

                    b.Property<string>("ContactName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ContactName");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Email");

                    b.Property<string>("Relationship")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Relationship");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Telephone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Telephone");

                    b.HasKey("StaffEmergencyContactId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_StaffEmergencyContact", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffHealth", b =>
                {
                    b.Property<int>("StaffHealthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffHealthId"));

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Heading")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Heading");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("StaffHealthId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_StaffHealth", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffHealthTask", b =>
                {
                    b.Property<int>("StaffHealthTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffHealthTaskId"));

                    b.Property<int>("Answer")
                        .HasColumnType("int")
                        .HasColumnName("Answer");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Comment");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Point")
                        .HasColumnType("int")
                        .HasColumnName("Point");

                    b.Property<int>("Score")
                        .HasColumnType("int")
                        .HasColumnName("Score");

                    b.Property<int>("StaffHealthId")
                        .HasColumnType("int")
                        .HasColumnName("StaffHealthId");

                    b.Property<int>("Title")
                        .HasColumnType("int")
                        .HasColumnName("Title");

                    b.HasKey("StaffHealthTaskId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("StaffHealthId");

                    b.ToTable("tbl_StaffHealthTask", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffHoliday", b =>
                {
                    b.Property<int>("StaffHolidayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffHolidayId"));

                    b.Property<decimal>("AllocatedDays")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("AllocatedDays");

                    b.Property<string>("Attachment")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("Attachment");

                    b.Property<int>("Class")
                        .HasColumnType("int")
                        .HasColumnName("Class");

                    b.Property<Guid?>("CompanyId")
                        .HasMaxLength(450)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompanyId");

                    b.Property<string>("CopyOfHandover")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CopyOfHandover");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Days")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Days");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("EndDate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("PersonOnResponsibility")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PersonOnResponsibility");

                    b.Property<string>("Purpose")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Purpose");

                    b.Property<string>("Remark")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("Remark");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartDate");

                    b.Property<string>("Status")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Status");

                    b.Property<decimal>("YearOfService")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("YearOfService");

                    b.HasKey("StaffHolidayId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_StaffHoliday", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffIncidentReporting", b =>
                {
                    b.Property<int>("StaffIncidentReportingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StaffIncidentReportingId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffIncidentReportingId"));

                    b.Property<string>("ActionTaken")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("ActionTaken");

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attachment");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("IncidentDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IncidentDetails");

                    b.Property<string>("IncidentType")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("IncidentType");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LoggedById")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("LoggedById");

                    b.Property<DateTimeOffset>("LoggedDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("LoggedDate");

                    b.Property<int?>("ReportingStaffId")
                        .HasColumnType("int")
                        .HasColumnName("ReportingStaffId");

                    b.Property<int>("StaffInvolvedId")
                        .HasColumnType("int")
                        .HasColumnName("StaffInvolvedId");

                    b.Property<string>("Status")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("Status");

                    b.Property<string>("Witness")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Witness");

                    b.HasKey("StaffIncidentReportingId");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_StaffIncidentReporting", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffInfectionControl", b =>
                {
                    b.Property<int>("InfectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InfectionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InfectionId"));

                    b.Property<string>("Guideline")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Guideline");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("TestDate");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("Type");

                    b.Property<int>("VaccStatus")
                        .HasColumnType("int")
                        .HasColumnName("VaccStatus");

                    b.HasKey("InfectionId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_StaffInfectionControl", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffInterview", b =>
                {
                    b.Property<int>("StaffInterviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffInterviewId"));

                    b.Property<string>("ClientSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Heading")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Heading");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ManagerSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<string>("StaffSignature")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StaffInterviewId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_StaffInterview", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffInterviewTask", b =>
                {
                    b.Property<int>("StaffInterviewTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffInterviewTaskId"));

                    b.Property<int>("Answer")
                        .HasColumnType("int")
                        .HasColumnName("Answer");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Comment");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Point")
                        .HasColumnType("int")
                        .HasColumnName("Point");

                    b.Property<int>("Score")
                        .HasColumnType("int")
                        .HasColumnName("Score");

                    b.Property<int>("StaffInterviewId")
                        .HasColumnType("int")
                        .HasColumnName("StaffInterviewId");

                    b.Property<int>("Title")
                        .HasColumnType("int")
                        .HasColumnName("Title");

                    b.HasKey("StaffInterviewTaskId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("StaffInterviewId");

                    b.ToTable("tbl_StaffInterviewTask", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffKeyWorkerVoice", b =>
                {
                    b.Property<int>("KeyWorkerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KeyWorkerId"));

                    b.Property<string>("ActionRequired")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ActionRequired");

                    b.Property<string>("Attachment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attachment");

                    b.Property<string>("ChangesWeNeed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ChangesWeNeed");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Details");

                    b.Property<string>("HealthAndWellNessChanges")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("HealthAndWellNessChanges");

                    b.Property<string>("ManagerSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicationChanges")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MedicationChanges");

                    b.Property<string>("MovingAndHandling")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MovingAndHandling");

                    b.Property<DateTime?>("NextCheckDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("NextCheckDate");

                    b.Property<int>("NotComfortableServices")
                        .HasColumnType("int")
                        .HasColumnName("NotComfortableServices");

                    b.Property<string>("NutritionalChanges")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NutritionalChanges");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Reference");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<string>("RiskAssessment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RiskAssessment");

                    b.Property<Guid>("ServicesRequiresServices")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ServicesRequiresServices");

                    b.Property<int>("ServicesRequiresTime")
                        .HasColumnType("int")
                        .HasColumnName("ServicesRequiresTime");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffId");

                    b.Property<string>("StaffSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("URL");

                    b.Property<int>("WellSupportedServices")
                        .HasColumnType("int")
                        .HasColumnName("WellSupportedServices");

                    b.HasKey("KeyWorkerId");

                    b.HasIndex("ClientId");

                    b.HasIndex("StaffId");

                    b.ToTable("tbl_Staff_KeyWorkerVoice", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffLateness", b =>
                {
                    b.Property<int>("StaffLatenessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffLatenessId"));

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Reason");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Response");

                    b.Property<int>("Rota")
                        .HasColumnType("int")
                        .HasColumnName("Rota");

                    b.Property<int>("SN")
                        .HasColumnType("int")
                        .HasColumnName("SN");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<DateTime>("TimeCritical")
                        .HasColumnType("datetime2")
                        .HasColumnName("TimeCritical");

                    b.HasKey("StaffLatenessId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_StaffLateness", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffMedComp", b =>
                {
                    b.Property<int>("MedCompId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedCompId"));

                    b.Property<string>("ActionRequired")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ActionRequired");

                    b.Property<string>("Attachment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attachment");

                    b.Property<int>("CarePlan")
                        .HasColumnType("int")
                        .HasColumnName("CarePlan");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Details");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ManagerSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("NextCheckDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("NextCheckDate");

                    b.Property<int>("RateStaff")
                        .HasColumnType("int")
                        .HasColumnName("RateStaff");

                    b.Property<int>("ReadingMedicalPrescriptions")
                        .HasColumnType("int")
                        .HasColumnName("ReadingMedicalPrescriptions");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Reference");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffId");

                    b.Property<string>("StaffSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("URL");

                    b.Property<int>("UnderstandingofMedication")
                        .HasColumnType("int")
                        .HasColumnName("UnderstandingofMedication");

                    b.Property<int>("UnderstandingofRights")
                        .HasColumnType("int")
                        .HasColumnName("UnderstandingofRights");

                    b.HasKey("MedCompId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("StaffId");

                    b.ToTable("tbl_Staff_MedCompObs", null, t =>
                        {
                            t.Property("ClientId")
                                .HasColumnName("ClientId1");
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffMedRota", b =>
                {
                    b.Property<int>("StaffRotaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StaffRotaId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffRotaId"));

                    b.Property<string>("Attachment")
                        .HasMaxLength(226)
                        .HasColumnType("nvarchar(226)")
                        .HasColumnName("Attachment");

                    b.Property<bool>("Certify")
                        .HasColumnType("bit")
                        .HasColumnName("Certify");

                    b.Property<string>("ClockInLocation")
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("ClockInLocation");

                    b.Property<DateTimeOffset?>("ClockInTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("ClockInTime");

                    b.Property<string>("ClockOutLocation")
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("ClockOutLocation");

                    b.Property<DateTimeOffset?>("ClockOutTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("ClockOutTime");

                    b.Property<bool>("ConfirmMedicationRoute")
                        .HasColumnType("bit")
                        .HasColumnName("ConfirmMedicationRoute");

                    b.Property<bool>("ConfirmRightDoseGiven")
                        .HasColumnType("bit")
                        .HasColumnName("ConfirmRightDoseGiven");

                    b.Property<bool>("ConfirmToGivenRightPerson")
                        .HasColumnType("bit")
                        .HasColumnName("ConfirmToGivenRightPerson");

                    b.Property<bool>("ConfirmToGivenRightPersonTime")
                        .HasColumnType("bit")
                        .HasColumnName("ConfirmToGivenRightPersonTime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DoseGiven")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DoseGiven");

                    b.Property<string>("DosePrescribed")
                        .HasMaxLength(550)
                        .HasColumnType("nvarchar(550)")
                        .HasColumnName("DosePrescribed");

                    b.Property<string>("Feedback")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Feedback");

                    b.Property<string>("GivenMedicationNotInChart")
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("GivenMedicationNotInChart");

                    b.Property<string>("Location")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Location");

                    b.Property<string>("Measurement")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Measurement");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ReferenceNumber");

                    b.Property<string>("Remark")
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("Remark");

                    b.Property<DateTime>("RotaDate")
                        .HasColumnType("date")
                        .HasColumnName("RotaDate");

                    b.Property<int?>("RotaDayofWeekId")
                        .HasColumnType("int")
                        .HasColumnName("RotaDayofWeekId");

                    b.Property<int>("RotaId")
                        .HasColumnType("int")
                        .HasColumnName("RotaId");

                    b.Property<int?>("Staff")
                        .HasColumnType("int")
                        .HasColumnName("Staff");

                    b.Property<string>("StaffCommentsOrConcern")
                        .HasMaxLength(550)
                        .HasColumnType("nvarchar(550)")
                        .HasColumnName("StaffCommentsOrConcern");

                    b.Property<string>("Time")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Time");

                    b.HasKey("StaffRotaId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("RotaId");

                    b.ToTable("tbl_StaffMedRota", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffMedRotaAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionRecommendation")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("ActionRecommendation");

                    b.Property<string>("AuditRemarks")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("AuditRemarks");

                    b.Property<bool>("ConcernWithStaff")
                        .HasMaxLength(50)
                        .HasColumnType("bit")
                        .HasColumnName("ConcernWithStaff");

                    b.Property<bool>("ConcertWithClient")
                        .HasColumnType("bit")
                        .HasColumnName("ConcertWithClient");

                    b.Property<bool>("ContactEstablishedWithGP")
                        .HasColumnType("bit")
                        .HasColumnName("ContactEstablishedWithGP");

                    b.Property<DateTime>("DateOfAudit")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<bool>("EmailAuditToClient")
                        .HasColumnType("bit");

                    b.Property<bool>("EmailAuditToStaff")
                        .HasColumnType("bit")
                        .HasColumnName("EmailAuditToStaff");

                    b.Property<string>("EvidenceOfActionTaken")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("EvidenceOfActionTaken");

                    b.Property<string>("NameOfAuditor")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("NameOfAuditor");

                    b.Property<int>("StaffRotaId")
                        .HasColumnType("int")
                        .HasColumnName("StaffRotaId");

                    b.Property<string>("StateDisuccGP")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("StateDisuccGP");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.ToTable("tbl_StaffMedRotaAudit", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffMedTracker", b =>
                {
                    b.Property<int>("StaffMedTrackerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffMedTrackerId"));

                    b.Property<int>("ClientMedId")
                        .HasColumnType("int")
                        .HasColumnName("ClientMedId");

                    b.Property<string>("DoseGiven")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DoseGiven");

                    b.Property<DateTime>("MedTrackDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("MedTrackDate");

                    b.Property<int>("RotaId")
                        .HasColumnType("int")
                        .HasColumnName("RotaId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.HasKey("StaffMedTrackerId");

                    b.ToTable("tbl_StaffMedTracker", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffOfficeLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Location")
                        .HasColumnType("int")
                        .HasColumnName("Location");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Staff");

                    b.Property<Guid?>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Location");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_StaffOfficeLocation", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffOneToOne", b =>
                {
                    b.Property<int>("OneToOneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OneToOneId"));

                    b.Property<string>("ActionRequired")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ActionRequired");

                    b.Property<string>("Attachment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attachment");

                    b.Property<string>("ClientSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentEventArea")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CurrentEventArea");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<string>("DecisionsReached")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DecisionsReached");

                    b.Property<string>("ImprovementRecorded")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ImprovementRecorded");

                    b.Property<string>("ManagerSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("NextCheckDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("NextCheckDate");

                    b.Property<int>("PreviousSupervision")
                        .HasColumnType("int")
                        .HasColumnName("PreviousSupervision");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Purpose");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Reference");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<string>("StaffConclusion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StaffConclusion");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffId");

                    b.Property<string>("StaffImprovedInAreas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StaffImprovedInAreas");

                    b.Property<string>("StaffSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("URL");

                    b.HasKey("OneToOneId");

                    b.HasIndex("StaffId");

                    b.ToTable("tbl_Staff_OneToOne", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffPayRollSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryOfStaffId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryOfStaffId");

                    b.Property<int>("ClassOfStaffId")
                        .HasColumnType("int")
                        .HasColumnName("ClassOfStaffId");

                    b.Property<decimal>("FixedAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("FixedAmount");

                    b.Property<int>("FixedAmountTypeId")
                        .HasColumnType("int")
                        .HasColumnName("FixedAmountTypeId");

                    b.Property<decimal?>("MaxHr")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("MaxHr");

                    b.Property<decimal?>("MinHr")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("MinHr");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffId");

                    b.Property<int>("StaffRateTypeId")
                        .HasColumnType("int")
                        .HasColumnName("StaffRateTypeId");

                    b.Property<int>("TeamOfStaffId")
                        .HasColumnType("int")
                        .HasColumnName("TeamOfStaffId");

                    b.Property<int>("TypeOfStaffServiceId")
                        .HasColumnType("int")
                        .HasColumnName("TypeOfStaffServiceId");

                    b.HasKey("Id");

                    b.ToTable("tbl_StaffPayRollSetting", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffPerformance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Data");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Expectation")
                        .HasColumnType("int")
                        .HasColumnName("Expectation");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PerformanceSummaryId")
                        .HasColumnType("int")
                        .HasColumnName("PerformanceSummaryId");

                    b.Property<int?>("PositionId")
                        .HasColumnType("int")
                        .HasColumnName("PositionId");

                    b.Property<string>("Rating")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Rating");

                    b.Property<string>("Remarks")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Remarks");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("StaffId");

                    b.Property<int?>("TotalObtain")
                        .HasColumnType("int")
                        .HasColumnName("TotalObtain");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PerformanceSummaryId");

                    b.ToTable("tbl_StaffPerformance", null, t =>
                        {
                            t.Property("ClientId")
                                .HasColumnName("ClientId1");
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffPerformanceHeading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CreatedBy");

                    b.Property<bool>("IsClientHeading")
                        .HasColumnType("bit")
                        .HasColumnName("IsClientHeading");

                    b.Property<int?>("JobPositionId")
                        .HasColumnType("int")
                        .HasColumnName("JobPositionId");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.HasIndex("JobPositionId");

                    b.ToTable("tbl_StaffPerformanceHeading", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffPerformanceSummary", b =>
                {
                    b.Property<int>("SummaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SummaryId"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Feedback")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("Feedback");

                    b.Property<bool>("IsClientSummary")
                        .HasColumnType("bit")
                        .HasColumnName("IsClientSummary");

                    b.Property<string>("NoOfPerformance")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NoOfPerformance");

                    b.Property<string>("StartDate")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("StartDate");

                    b.Property<string>("StopDate")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("StopDate");

                    b.Property<int?>("WithoutJob")
                        .HasColumnType("int")
                        .HasColumnName("WithoutJob");

                    b.HasKey("SummaryId");

                    b.ToTable("tbl_StaffPerformanceSummary", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffPersonalInfo", b =>
                {
                    b.Property<Guid>("StaffPersonalInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AboutMe")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasColumnName("AboutMe");

                    b.Property<string>("Address")
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("Address");

                    b.Property<string>("BRPAttachment")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("BRPAttachment");

                    b.Property<string>("COSNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("COSNo");

                    b.Property<string>("CV")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("CV");

                    b.Property<bool>("CanDrive")
                        .HasColumnType("bit");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ClassOfStaff")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("ClassOfStaff");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CoverLetter")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("CoverLetter");

                    b.Property<bool>("DBS")
                        .HasColumnType("bit");

                    b.Property<string>("DBSAttachment")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("DBSAttachment");

                    b.Property<DateTime?>("DBSExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DBSUpdateNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DBSUpdateNo");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrivingLicense")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("DrivingLicense");

                    b.Property<DateTime?>("DrivingLicenseExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("Email");

                    b.Property<DateTime?>("EmploymentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FirstName");

                    b.Property<string>("Gender")
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasColumnName("Gender");

                    b.Property<decimal?>("GrossSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("HasIdCard")
                        .HasColumnType("bit");

                    b.Property<bool>("HasUniform")
                        .HasColumnType("bit");

                    b.Property<string>("Hobbies")
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("Hobbies");

                    b.Property<string>("HomeOfficeDecisionLetter")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("HomeOfficeDecisionLetter");

                    b.Property<string>("IdNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("IdNumber");

                    b.Property<bool>("IsAgencyStaff")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApplicant")
                        .HasColumnType("bit");

                    b.Property<bool>("IsKeyWorker")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOfficeStaff")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTeamLeader")
                        .HasColumnType("bit");

                    b.Property<int?>("JobPositionId")
                        .HasColumnType("int")
                        .HasColumnName("JobPositionId");

                    b.Property<string>("Keyworker")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Keyworker");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LastName");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("MiddleName");

                    b.Property<bool>("NI")
                        .HasColumnType("bit");

                    b.Property<string>("NIAttachment")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("NIAttachment");

                    b.Property<DateTime?>("NIExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Passcode")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("Passcode");

                    b.Property<string>("PassportAttachment")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("PassportAttachment");

                    b.Property<string>("PlaceOfBirth")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PlaceOfBirth");

                    b.Property<string>("PostCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PostCode");

                    b.Property<string>("ProfilePix")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("ProfilePix");

                    b.Property<decimal?>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RegistrationId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("RegistrationId");

                    b.Property<string>("RegistrationNo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("RegistrationNo");

                    b.Property<bool>("RightToPractice")
                        .HasColumnType("bit");

                    b.Property<string>("RightToPracticeAttachment")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("RightToPracticeAttachment");

                    b.Property<string>("RightToPracticeCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("RightToPracticeCode");

                    b.Property<DateTime?>("RightToPracticeExpiryDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("RightToPracticeExpiryDate");

                    b.Property<bool>("RightToWork")
                        .HasColumnType("bit");

                    b.Property<string>("RightToWorkAttachment")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("RightToWorkAttachment");

                    b.Property<DateTime?>("RightToWorkExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Self_PYE")
                        .HasColumnType("bit");

                    b.Property<string>("Self_PYEAttachment")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("Self_PYEAttachment");

                    b.Property<string>("StaffManager")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("StaffManager");

                    b.Property<int?>("StaffWorkTeamId")
                        .HasColumnType("int")
                        .HasColumnName("StaffWorkTeamId");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TeamLeader")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("TeamLeader");

                    b.Property<string>("Telephone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Telephone");

                    b.Property<string>("WorkTeam")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("WorkTeam");

                    b.HasKey("StaffPersonalInfoId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("JobPositionId");

                    b.HasIndex("RegistrationId")
                        .IsUnique()
                        .HasDatabaseName("IX_tbl_StaffPersonalInfo_RegistrationId")
                        .HasFilter("[RegistrationId] IS NOT NULL");

                    b.HasIndex("StaffWorkTeamId");

                    b.ToTable("tbl_StaffPersonalInfo", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffPersonalInfoComment", b =>
                {
                    b.Property<int>("StaffPersonalInfoCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StaffPersonalInfoCommentId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffPersonalInfoCommentId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Comment");

                    b.Property<int?>("CommentBy_UserId")
                        .HasColumnType("int")
                        .HasColumnName("CommentBy_UserId");

                    b.Property<DateTime>("CommentOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("CommentOn");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("StaffPersonalInfoCommentId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_StaffPersonalInfoComment", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffPersonalityTest", b =>
                {
                    b.Property<int>("TestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TestId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestId"));

                    b.Property<int>("Answer")
                        .HasColumnType("int")
                        .HasColumnName("Answer");

                    b.Property<int>("Question")
                        .HasColumnType("int")
                        .HasColumnName("Question");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("TestId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_StaffPersonalityTest", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffRating", b =>
                {
                    b.Property<int>("StaffRatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StaffRatingId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffRatingId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Comment");

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CommentDate");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("Rating");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<int>("SubmittedBy")
                        .HasColumnType("int")
                        .HasColumnName("SubmittedBy");

                    b.HasKey("StaffRatingId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_StaffRating", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffReferee", b =>
                {
                    b.Property<int>("StaffRefereeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StaffRefereeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffRefereeId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Address");

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attachment");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)")
                        .HasColumnName("CompanyName");

                    b.Property<string>("Email")
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)")
                        .HasColumnName("Email");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PhoneNumber");

                    b.Property<string>("PositionofReferee")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("PositionofReferee");

                    b.Property<string>("Referee")
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)")
                        .HasColumnName("Referee");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("StaffRefereeId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_StaffReferee", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffReference", b =>
                {
                    b.Property<int>("StaffReferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffReferenceId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Address");

                    b.Property<Guid>("ApplicantRole")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ApplicantRole");

                    b.Property<string>("Attachment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attachment");

                    b.Property<int>("Caring")
                        .HasColumnType("int")
                        .HasColumnName("Caring");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ConfirmedBy")
                        .HasColumnType("int")
                        .HasColumnName("ConfirmedBy");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Contact");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<int>("DateofEmployement")
                        .HasColumnType("int")
                        .HasColumnName("DateofEmployement");

                    b.Property<string>("DateofExit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DateofExit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Email");

                    b.Property<int>("Integrity")
                        .HasColumnType("int")
                        .HasColumnName("Integrity");

                    b.Property<int>("Knowledgeable")
                        .HasColumnType("int")
                        .HasColumnName("Knowledgeable");

                    b.Property<int>("PreviousExperience")
                        .HasColumnType("int")
                        .HasColumnName("PreviousExperience");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Reference");

                    b.Property<string>("RefreeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RefreeName");

                    b.Property<string>("RehireStaff")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RehireStaff");

                    b.Property<string>("Relationship")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Relationship");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffId");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<int>("TeamWork")
                        .HasColumnType("int")
                        .HasColumnName("TeamWork");

                    b.Property<int>("WorkUnderPressure")
                        .HasColumnType("int")
                        .HasColumnName("WorkUnderPressure");

                    b.HasKey("StaffReferenceId");

                    b.HasIndex("ClientId");

                    b.HasIndex("StaffId");

                    b.ToTable("tbl_Staff_Reference", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffRegulatoryContact", b =>
                {
                    b.Property<int>("StaffRegulatoryContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StaffRegulatoryContactId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffRegulatoryContactId"));

                    b.Property<int>("BaseRecordItemId")
                        .HasColumnType("int")
                        .HasColumnName("BaseRecordItemId");

                    b.Property<DateTime?>("DatePerformed")
                        .HasColumnType("datetime2")
                        .HasColumnName("DatePerformed");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DueDate");

                    b.Property<string>("Evidence")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Evidence");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("StaffRegulatoryContactId");

                    b.HasIndex("BaseRecordItemId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_StaffRegulatoryContact", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffRota", b =>
                {
                    b.Property<int>("StaffRotaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StaffRotaId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffRotaId"));

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ReferenceNumber");

                    b.Property<string>("Remark")
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("Remark");

                    b.Property<DateTime>("RotaDate")
                        .HasColumnType("date")
                        .HasColumnName("RotaDate");

                    b.Property<int?>("RotaDayofWeekId")
                        .HasColumnType("int")
                        .HasColumnName("RotaDayofWeekId");

                    b.Property<int>("RotaId")
                        .HasColumnType("int")
                        .HasColumnName("RotaId");

                    b.Property<int>("Staff")
                        .HasColumnType("int")
                        .HasColumnName("Staff");

                    b.HasKey("StaffRotaId");

                    b.HasIndex("RotaId");

                    b.ToTable("tbl_StaffRota", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffRotaDynamicAddition", b =>
                {
                    b.Property<int>("StaffRotaDynamicAdditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StaffRotaDynamicAdditionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffRotaDynamicAdditionId"));

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasColumnName("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ItemName");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("StaffRotaDynamicAdditionId");

                    b.HasIndex("CompanyId");

                    b.ToTable("tbl_StaffRotaDynamicAddition", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffRotaForceRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Signature")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Signature");

                    b.Property<int?>("StaffRotaPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("StaffRotaPeriodId");

                    b.Property<string>("UpcomingplannedTask")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("UpcomingplannedTask");

                    b.Property<string>("forcedEntry")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("forcedEntry");

                    b.Property<string>("reasonExceeding")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("reasonExceeding");

                    b.HasKey("Id");

                    b.ToTable("tbl_StaffRotaForceRecord", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffRotaItem", b =>
                {
                    b.Property<int>("StaffRotaItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StaffRotaItemId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffRotaItemId"));

                    b.Property<int>("StaffRotaDynamicAdditionId")
                        .HasColumnType("int");

                    b.Property<int>("StaffRotaId")
                        .HasColumnType("int")
                        .HasColumnName("StaffRotaId");

                    b.HasKey("StaffRotaItemId");

                    b.HasIndex("StaffRotaId");

                    b.ToTable("tbl_StaffRotaItem", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffRotaMedAuditSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuditClosingStatements")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("AuditClosingStatements");

                    b.Property<string>("AuditPeriodEnd")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("AuditPeriodEnd");

                    b.Property<string>("AuditPeriodStart")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("AuditPeriodStart");

                    b.Property<int?>("ClientWithConcern")
                        .HasColumnType("int")
                        .HasColumnName("ClientWithConcern");

                    b.Property<string>("DateOfAudit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DateOfAudit");

                    b.Property<string>("NameOfAuditor")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("NameOfAuditor");

                    b.Property<int?>("NoOfClose")
                        .HasColumnType("int")
                        .HasColumnName("NoOfClose");

                    b.Property<int?>("NoOfGPContacted")
                        .HasColumnType("int")
                        .HasColumnName("NoOfGPContacted");

                    b.Property<int?>("NoOfNoticIssueToClient")
                        .HasColumnType("int")
                        .HasColumnName("NoOfNoticIssueToClient");

                    b.Property<int?>("NoOfNoticIssueToStaff")
                        .HasColumnType("int")
                        .HasColumnName("NoOfNoticIssueToStaff");

                    b.Property<int?>("NoOfOpen")
                        .HasColumnType("int");

                    b.Property<int?>("NoOfPending")
                        .HasColumnType("int")
                        .HasColumnName("NoOfPending");

                    b.Property<int?>("StaffWithConcern")
                        .HasColumnType("int")
                        .HasColumnName("StaffWithConcern");

                    b.Property<int?>("TotalClient")
                        .HasColumnType("int")
                        .HasColumnName("TotalClient");

                    b.Property<int?>("TotalStaff")
                        .HasColumnType("int")
                        .HasColumnName("TotalStaff");

                    b.HasKey("Id");

                    b.ToTable("tbl_StaffRotaMedAuditSummary", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffRotaPartner", b =>
                {
                    b.Property<int>("StaffRotaPartnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StaffRotaPartnerId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffRotaPartnerId"));

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffId");

                    b.Property<int>("StaffRotaId")
                        .HasColumnType("int")
                        .HasColumnName("StaffRotaId");

                    b.HasKey("StaffRotaPartnerId");

                    b.HasIndex("StaffRotaId");

                    b.ToTable("tbl_StaffRotaPartner", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffRotaPeriod", b =>
                {
                    b.Property<int>("StaffRotaPeriodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StaffRotaPeriodId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffRotaPeriodId"));

                    b.Property<string>("AlertComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("AlertComment");

                    b.Property<string>("BodyMap")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("BodyMap");

                    b.Property<string>("BowelMovement")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("BowelMovement");

                    b.Property<bool?>("Certify")
                        .HasColumnType("bit")
                        .HasColumnName("Certify");

                    b.Property<bool?>("ClientHappyWithServiceOrStaff")
                        .HasColumnType("bit")
                        .HasColumnName("ClientHappyWithServiceOrStaff");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("ClientRotaTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ClientRotaTypeId");

                    b.Property<string>("ClockInAddress")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("ClockInAddress");

                    b.Property<string>("ClockInClientTelephone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ClockInClientTelephone");

                    b.Property<int?>("ClockInCount")
                        .HasColumnType("int")
                        .HasColumnName("ClockInCount");

                    b.Property<string>("ClockInDistance")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ClockInDistance");

                    b.Property<string>("ClockInGeolocation")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("ClockInGeolocation");

                    b.Property<string>("ClockInMode")
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("ClockInMode");

                    b.Property<DateTimeOffset?>("ClockInTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("ClockInTime");

                    b.Property<string>("ClockOutAddress")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("ClockOutAddress");

                    b.Property<string>("ClockOutClientTelephone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ClockOutClientTelephone");

                    b.Property<int?>("ClockOutCount")
                        .HasColumnType("int")
                        .HasColumnName("ClockOutCount");

                    b.Property<string>("ClockOutDistance")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ClockOutDistance");

                    b.Property<string>("ClockOutGeolocation")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("ClockOutGeolocation");

                    b.Property<string>("ClockOutMode")
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("ClockOutMode");

                    b.Property<DateTimeOffset?>("ClockOutTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("ClockOutTime");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Comment");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Feedback");

                    b.Property<string>("FluidIntake")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("FluidIntake");

                    b.Property<string>("HandOver")
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("HandOver");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("IsDelete");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LatenessComments")
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("LatenessComments");

                    b.Property<string>("MealIntake")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MealIntake");

                    b.Property<bool>("NotifyManager")
                        .HasColumnType("bit")
                        .HasColumnName("NotifyManager");

                    b.Property<bool?>("ObjectiveOfCareMeet")
                        .HasColumnType("bit")
                        .HasColumnName("ObjectiveOfCareMeet");

                    b.Property<string>("OralCare")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("OralCare");

                    b.Property<bool>("OtherTask")
                        .HasColumnType("bit")
                        .HasColumnName("OtherTask");

                    b.Property<bool>("RaseConcern")
                        .HasColumnType("bit")
                        .HasColumnName("RaseConcern");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Signature")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Signature");

                    b.Property<int>("StaffRotaId")
                        .HasColumnType("int")
                        .HasColumnName("StaffRotaId");

                    b.Property<string>("StartTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("StartTime");

                    b.Property<string>("StopTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("StopTime");

                    b.Property<string>("UpcomingplannedTask")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UpcomingplannedTask");

                    b.Property<string>("forcedEntry")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("forcedEntry");

                    b.Property<string>("forcedExit")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("forcedExit");

                    b.Property<string>("reasonExceeding")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reasonExceeding");

                    b.HasKey("StaffRotaPeriodId");

                    b.HasIndex("ClientRotaTypeId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("StaffRotaId");

                    b.ToTable("tbl_StaffRotaPeriod", null, t =>
                        {
                            t.Property("ClientId")
                                .HasColumnName("ClientId1");
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffRotaTask", b =>
                {
                    b.Property<int>("StaffRotaTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StaffRotaTaskId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffRotaTaskId"));

                    b.Property<bool>("IsGiven")
                        .HasColumnType("bit")
                        .HasColumnName("IsGiven");

                    b.Property<int>("RotaTaskId")
                        .HasColumnType("int")
                        .HasColumnName("RotaTaskId");

                    b.Property<int>("StaffRotaPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("StaffRotaPeriodId");

                    b.HasKey("StaffRotaTaskId");

                    b.HasIndex("StaffRotaPeriodId");

                    b.ToTable("tbl_StaffRotaTask", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffShadowing", b =>
                {
                    b.Property<int>("StaffShadowingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffShadowingId"));

                    b.Property<string>("ClientSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Heading")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Heading");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ManagerSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<string>("StaffSignature")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StaffShadowingId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_StaffShadowing", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffShadowingTask", b =>
                {
                    b.Property<int>("StaffShadowingTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffShadowingTaskId"));

                    b.Property<int>("Answer")
                        .HasColumnType("int")
                        .HasColumnName("Answer");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Comment");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Point")
                        .HasColumnType("int")
                        .HasColumnName("Point");

                    b.Property<int>("Score")
                        .HasColumnType("int")
                        .HasColumnName("Score");

                    b.Property<int>("StaffShadowingId")
                        .HasColumnType("int")
                        .HasColumnName("StaffShadowingId");

                    b.Property<int>("Title")
                        .HasColumnType("int")
                        .HasColumnName("Title");

                    b.HasKey("StaffShadowingTaskId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("StaffShadowingId");

                    b.ToTable("tbl_StaffShadowingTask", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffShiftBooking", b =>
                {
                    b.Property<int>("StaffShiftBookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StaffShiftBookingId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffShiftBookingId"));

                    b.Property<int?>("RotaId")
                        .HasColumnType("int");

                    b.Property<int>("ShiftBookingId")
                        .HasColumnType("int")
                        .HasColumnName("ShiftBookingId");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("StaffShiftBookingId");

                    b.HasIndex("RotaId");

                    b.HasIndex("ShiftBookingId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_StaffShiftBooking", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffShiftBookingDay", b =>
                {
                    b.Property<int>("StaffShiftBookingDayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StaffShiftBookingDayId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffShiftBookingDayId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasColumnName("Day");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("IsDelete");

                    b.Property<int>("StaffShiftBookingId")
                        .HasColumnType("int")
                        .HasColumnName("StaffShiftBookingId");

                    b.Property<string>("WeekDay")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("WeekDay");

                    b.HasKey("StaffShiftBookingDayId");

                    b.HasIndex("StaffShiftBookingId");

                    b.ToTable("tbl_StaffShiftBookingDay", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffSpotCheck", b =>
                {
                    b.Property<int>("SpotCheckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpotCheckId"));

                    b.Property<string>("ActionRequired")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ActionRequired");

                    b.Property<string>("AreaComments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AreaComments");

                    b.Property<string>("Attachment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attachment");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Details");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ManagerSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("NextCheckDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("NextCheckDate");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Reference");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<int>("StaffArriveOnTime")
                        .HasColumnType("int")
                        .HasColumnName("StaffArriveOnTime");

                    b.Property<int>("StaffDressCode")
                        .HasColumnType("int")
                        .HasColumnName("StaffDressCode");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffId");

                    b.Property<string>("StaffSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("URL");

                    b.HasKey("SpotCheckId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("StaffId");

                    b.ToTable("tbl_Staff_SpotCheck", null, t =>
                        {
                            t.Property("ClientId")
                                .HasColumnName("ClientId1");
                        });
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffSupervisionAppraisal", b =>
                {
                    b.Property<int>("StaffSupervisionAppraisalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffSupervisionAppraisalId"));

                    b.Property<string>("Accomplishment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Accomplishment");

                    b.Property<string>("ActionRequired")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ActionRequired");

                    b.Property<string>("Anyquestions")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Anyquestions");

                    b.Property<string>("AreThereAnyChallenges")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AreThereAnyChallenges");

                    b.Property<string>("ArethereAnyChanges")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ArethereAnyChanges");

                    b.Property<string>("Areyouhappyworking")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Areyouhappyworking");

                    b.Property<string>("Attachment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attachment");

                    b.Property<string>("BiggestAchievement")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("BiggestAchievement");

                    b.Property<string>("CRBinfo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CRBinfo");

                    b.Property<string>("ClientSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Companyvalue")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Companyvalue");

                    b.Property<string>("CondourAndWhistleBlowing")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CondourAndWhistleBlowing");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Details");

                    b.Property<string>("DoYouHaveAnyQuestions")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DoYouHaveAnyQuestions");

                    b.Property<string>("FeedbackFromManager")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FeedbackFromManager");

                    b.Property<string>("FeedbackFromSupervisor")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FeedbackFromSupervisor");

                    b.Property<string>("FiveStarRating")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FiveStarRating");

                    b.Property<string>("Goingforward")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Goingforward");

                    b.Property<string>("Isthereanytraining")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Isthereanytraining");

                    b.Property<string>("Likemostaboutthisjob")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Likemostaboutthisjob");

                    b.Property<string>("Managementhelped")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Managementhelped");

                    b.Property<string>("ManagerSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("NextCheckDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("NextCheckDate");

                    b.Property<string>("NoAbilityToSupport")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NoAbilityToSupport");

                    b.Property<string>("NoCondourAndWhistleBlowing")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NoCondourAndWhistleBlowing");

                    b.Property<string>("PreventionofAbuseAndSafeguarding")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PreventionofAbuseAndSafeguarding");

                    b.Property<int>("ProfessionalDevelopment")
                        .HasColumnType("int")
                        .HasColumnName("ProfessionalDevelopment");

                    b.Property<string>("PromoteIndependence")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PromoteIndependence");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Reference");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<string>("StaffAbility")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StaffAbility");

                    b.Property<int>("StaffComplaints")
                        .HasColumnType("int")
                        .HasColumnName("StaffComplaints");

                    b.Property<string>("StaffDevelopment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StaffDevelopment");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffId");

                    b.Property<Guid?>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StaffRating")
                        .HasColumnType("int")
                        .HasColumnName("StaffRating");

                    b.Property<string>("StaffSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StaffSupportAreas")
                        .HasColumnType("int")
                        .HasColumnName("StaffSupportAreas");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("Topthreepriorities")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Topthreepriorities");

                    b.Property<string>("Trainingdoyouwish")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Trainingdoyouwish");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Type");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("URL");

                    b.Property<string>("WantToAchieve")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WantToAchieve");

                    b.Property<string>("WhatChallenges")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WhatChallenges");

                    b.Property<string>("WhatLearningAndDevelopment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WhatLearningAndDevelopment");

                    b.Property<string>("Wouldyourecommend")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Wouldyourecommend");

                    b.Property<string>("YouContinueToDisplay")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("YouContinueToDisplay");

                    b.HasKey("StaffSupervisionAppraisalId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_Staff_SupervisionAppraisal", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffSurvey", b =>
                {
                    b.Property<int>("StaffSurveyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffSurveyId"));

                    b.Property<int>("AccessToPolicies")
                        .HasColumnType("int")
                        .HasColumnName("AccessToPolicies");

                    b.Property<string>("ActionRequired")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ActionRequired");

                    b.Property<int>("AdequateTrainingReceived")
                        .HasColumnType("int")
                        .HasColumnName("AdequateTrainingReceived");

                    b.Property<string>("AreaRequiringImprovements")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AreaRequiringImprovements");

                    b.Property<string>("Attachment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attachment");

                    b.Property<string>("ClientSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyManagement")
                        .HasColumnType("int")
                        .HasColumnName("CompanyManagement");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Details");

                    b.Property<int>("HealthCareServicesSatisfaction")
                        .HasColumnType("int")
                        .HasColumnName("HealthCareServicesSatisfaction");

                    b.Property<string>("ManagerSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NextCheckDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("NextCheckDate");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Reference");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffId");

                    b.Property<string>("StaffSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<int>("SupportFromCompany")
                        .HasColumnType("int")
                        .HasColumnName("SupportFromCompany");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("URL");

                    b.Property<string>("WorkEnvironmentSuggestions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WorkEnvironmentSuggestions");

                    b.HasKey("StaffSurveyId");

                    b.HasIndex("StaffId");

                    b.ToTable("tbl_Staff_Survey", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffTax", b =>
                {
                    b.Property<int>("StaffTaxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffTaxId"));

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("NI")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("NI");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Tax");

                    b.HasKey("StaffTaxId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_StaffTax", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffTeamLead", b =>
                {
                    b.Property<int>("TeamLeadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamLeadId"));

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientInvolved")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientInvolved");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DidYouDo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DidYouDo");

                    b.Property<string>("DidYouObserved")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DidYouObserved");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("OfficeToDo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("OfficeToDo");

                    b.Property<int>("Rota")
                        .HasColumnType("int")
                        .HasColumnName("Rota");

                    b.Property<Guid>("StaffInvolved")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffInvolved");

                    b.Property<int>("StaffStoppedWorking")
                        .HasColumnType("int")
                        .HasColumnName("StaffStoppedWorking");

                    b.HasKey("TeamLeadId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("StaffInvolved");

                    b.ToTable("tbl_StaffTeamLead", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffTeamLeadTasks", b =>
                {
                    b.Property<int>("TeamLeadTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamLeadTaskId"));

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Comments");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Status");

                    b.Property<int>("TeamLeadId")
                        .HasColumnType("int")
                        .HasColumnName("TeamLeadId");

                    b.Property<int>("Title")
                        .HasColumnType("int")
                        .HasColumnName("Title");

                    b.HasKey("TeamLeadTaskId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("TeamLeadId");

                    b.ToTable("tbl_StaffTeamLeadTasks", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffTraining", b =>
                {
                    b.Property<int>("StaffTrainingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StaffTrainingId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffTrainingId"));

                    b.Property<string>("Certificate")
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)")
                        .HasColumnName("Certificate");

                    b.Property<string>("CertificateAttachment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CertificateAttachment");

                    b.Property<string>("ExpiredDate")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("ExpiredDate");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Location");

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<string>("StartDate")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("StartDate");

                    b.Property<string>("Trainer")
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)")
                        .HasColumnName("Trainer");

                    b.Property<string>("Training")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Training");

                    b.Property<string>("TrainingType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("TrainingType");

                    b.HasKey("StaffTrainingId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_StaffTraining", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffTrainingMatrix", b =>
                {
                    b.Property<int>("MatrixId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MatrixId"));

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.HasKey("MatrixId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.ToTable("tbl_StaffTrainingMatrix", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffTrainingMatrixList", b =>
                {
                    b.Property<int>("TrainingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrainingId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<int>("MatrixId")
                        .HasColumnType("int")
                        .HasColumnName("MatrixId");

                    b.HasKey("TrainingId");

                    b.HasIndex("MatrixId");

                    b.ToTable("tbl_StaffTrainingMatrixList", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffWorkTeam", b =>
                {
                    b.Property<int>("StaffWorkTeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StaffWorkTeamId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffWorkTeamId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WorkTeam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WorkTeam");

                    b.HasKey("StaffWorkTeamId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("tbl_StaffWorkTeam", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.SupervisionOfficerToAct", b =>
                {
                    b.Property<int>("SupervisionOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SupervisionOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupervisionOfficerToActId"));

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<int>("StaffSupervisionAppraisalId")
                        .HasColumnType("int")
                        .HasColumnName("StaffSupervisionAppraisalId");

                    b.HasKey("SupervisionOfficerToActId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.HasIndex("StaffSupervisionAppraisalId");

                    b.ToTable("tbl_Supervision_OfficerToAct", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.SupervisionWorkteam", b =>
                {
                    b.Property<int>("SupervisionWorkteamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SupervisionWorkteamId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupervisionWorkteamId"));

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<int>("StaffSupervisionAppraisalId")
                        .HasColumnType("int")
                        .HasColumnName("StaffSupervisionAppraisalId");

                    b.HasKey("SupervisionWorkteamId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.HasIndex("StaffSupervisionAppraisalId");

                    b.ToTable("tbl_Supervision_StaffName", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.SurveyOfficerToAct", b =>
                {
                    b.Property<int>("SurveyOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SurveyOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SurveyOfficerToActId"));

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<int?>("StaffSurveyId")
                        .HasColumnType("int");

                    b.HasKey("SurveyOfficerToActId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.HasIndex("StaffSurveyId");

                    b.ToTable("tbl_Survey_OfficerToAct", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.SurveyWorkteam", b =>
                {
                    b.Property<int>("SurveyWorkteamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SurveyWorkteamId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SurveyWorkteamId"));

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<int>("StaffSurveyId")
                        .HasColumnType("int")
                        .HasColumnName("StaffSurveyId");

                    b.HasKey("SurveyWorkteamId");

                    b.HasIndex("StaffSurveyId");

                    b.ToTable("tbl_Survey_StaffName", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.TaskBoard", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskId"));

                    b.Property<int>("AssignedBy")
                        .HasColumnType("int")
                        .HasColumnName("AssignedBy");

                    b.Property<string>("Attachment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attachment");

                    b.Property<DateTime>("CompletionDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CompletionDate");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Note");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("TaskImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TaskImage");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TaskName");

                    b.HasKey("TaskId");

                    b.ToTable("tbl_TaskBoard", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.TaskBoardAssignedTo", b =>
                {
                    b.Property<int>("TaskBoardAssignedToId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TaskBoardAssignedToId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskBoardAssignedToId"));

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<int>("TaskBoardId")
                        .HasColumnType("int")
                        .HasColumnName("TaskBoardId");

                    b.HasKey("TaskBoardAssignedToId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.HasIndex("TaskBoardId");

                    b.ToTable("tbl_TaskBoardAssignedTo", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.Territory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CompanyId")
                        .HasMaxLength(38)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompanyId");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("tbl_Territory", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.TrackingConcernManager", b =>
                {
                    b.Property<int>("TrackingConcernManagerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TrackingConcernManagerId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrackingConcernManagerId"));

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<int>("TrackingConcernNoteId")
                        .HasColumnType("int")
                        .HasColumnName("TrackingConcernNoteId");

                    b.HasKey("TrackingConcernManagerId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.HasIndex("TrackingConcernNoteId");

                    b.ToTable("tbl_TrackingConcernManager", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.TrackingConcernNote", b =>
                {
                    b.Property<int>("Ref")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Ref"));

                    b.Property<string>("ActionRequired")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ActionRequired");

                    b.Property<string>("Attachment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Attachment");

                    b.Property<string>("ConcernNote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ConcernNote");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("DateOfIncident")
                        .HasColumnType("datetime2")
                        .HasColumnName("DateOfIncident");

                    b.Property<DateTime>("ExpectedDeadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("ExpectedDeadline");

                    b.Property<int>("ManagerCopied")
                        .HasColumnType("int")
                        .HasColumnName("ManagerCopied");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<int>("StaffNotify")
                        .HasColumnType("int")
                        .HasColumnName("StaffNotify");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.HasKey("Ref");

                    b.ToTable("tbl_TrackingConcernNote", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.TrackingConcernStaff", b =>
                {
                    b.Property<int>("TrackingConcernStaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TrackingConcernManagerId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrackingConcernStaffId"));

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<int>("TrackingConcernNoteId")
                        .HasColumnType("int")
                        .HasColumnName("TrackingConcernNoteId");

                    b.HasKey("TrackingConcernStaffId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.HasIndex("TrackingConcernNoteId");

                    b.ToTable("tbl_TrackingConcernStaff", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.Training", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachment")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("Attachment");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<string>("Remark")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("Remark");

                    b.Property<string>("Topic")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("Topic");

                    b.Property<string>("Trainer")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("Trainer");

                    b.Property<string>("TrainingURl")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("TrainingURl");

                    b.HasKey("Id");

                    b.ToTable("tbl_Training", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.TrainingRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachment")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("KeyName");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Name");

                    b.Property<string>("Notes")
                        .HasMaxLength(1052)
                        .HasColumnType("nvarchar(1052)")
                        .HasColumnName("Notes");

                    b.HasKey("Id");

                    b.ToTable("tbl_TrainingRequirement", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.TypeOfStaffService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ServiceName");

                    b.HasKey("Id");

                    b.ToTable("tbl_TypeOfStaffService", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.Untowards", b =>
                {
                    b.Property<int>("UntowardsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UntowardsId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UntowardsId"));

                    b.Property<string>("ActionRequired")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ActionRequired");

                    b.Property<string>("ActionStatus")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("ActionStatus");

                    b.Property<string>("ActionTaken")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ActionTaken");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Details");

                    b.Property<DateTime?>("ExpectedDateAndTimeOfFeedback")
                        .HasColumnType("datetime2");

                    b.Property<string>("IncidentType")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("IncidentType");

                    b.Property<string>("PersonReporting")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("PersonReporting");

                    b.Property<string>("PersonReportingEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("PersonReportingEmail");

                    b.Property<string>("PersonReportingTelephone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PersonReportingTelephone");

                    b.Property<string>("Priority")
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasColumnName("Priority");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)")
                        .HasColumnName("Subject");

                    b.Property<string>("TicketNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("TicketNumber");

                    b.Property<TimeSpan?>("TimeOfCall")
                        .HasColumnType("time");

                    b.HasKey("UntowardsId");

                    b.ToTable("tbl_Untowards", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.UpcomingMeeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CalledBy")
                        .HasColumnType("int")
                        .HasColumnName("CalledBy");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Location")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Location");

                    b.Property<DateTime>("MeetingDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("MeetingDate");

                    b.Property<TimeSpan?>("Time")
                        .HasColumnType("time")
                        .HasColumnName("Time");

                    b.HasKey("Id");

                    b.ToTable("tbl_UpcomingMeeting", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.VisitOfficerToAct", b =>
                {
                    b.Property<int>("VisitOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VisitOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitOfficerToActId"));

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<int>("VisitId")
                        .HasColumnType("int")
                        .HasColumnName("VisitId");

                    b.HasKey("VisitOfficerToActId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.HasIndex("VisitId");

                    b.ToTable("tbl_Visit_OfficerToAct", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.VisitStaffName", b =>
                {
                    b.Property<int>("VisitStaffNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VisitStaffNameId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitStaffNameId"));

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<int>("VisitId")
                        .HasColumnType("int")
                        .HasColumnName("VisitId");

                    b.HasKey("VisitStaffNameId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.HasIndex("VisitId");

                    b.ToTable("tbl_Visit_StaffName", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.VoiceCallerName", b =>
                {
                    b.Property<int>("VoiceCallerNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VoiceCallerNameId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VoiceCallerNameId"));

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<int>("VoiceId")
                        .HasColumnType("int")
                        .HasColumnName("VoiceId");

                    b.HasKey("VoiceCallerNameId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.HasIndex("VoiceId");

                    b.ToTable("tbl_Voice_CallerName", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.VoiceGoodStaff", b =>
                {
                    b.Property<int>("VoiceGoodStaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VoiceGoodStaffId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VoiceGoodStaffId"));

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<int>("VoiceId")
                        .HasColumnType("int")
                        .HasColumnName("VoiceId");

                    b.HasKey("VoiceGoodStaffId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.HasIndex("VoiceId");

                    b.ToTable("tbl_Voice_GoodStaff", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.VoiceOfficerToAct", b =>
                {
                    b.Property<int>("VoiceOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VoiceOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VoiceOfficerToActId"));

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<int>("VoiceId")
                        .HasColumnType("int")
                        .HasColumnName("VoiceId");

                    b.HasKey("VoiceOfficerToActId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.HasIndex("VoiceId");

                    b.ToTable("tbl_Voice_OfficerToAct", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.VoicePoorStaff", b =>
                {
                    b.Property<int>("VoicePoorStaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VoicePoorStaffId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VoicePoorStaffId"));

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<int>("VoiceId")
                        .HasColumnType("int")
                        .HasColumnName("VoiceId");

                    b.HasKey("VoicePoorStaffId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.HasIndex("VoiceId");

                    b.ToTable("tbl_Voice_PoorStaff", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.WhisttleBlower", b =>
                {
                    b.Property<int>("WhisttleBlowerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WhisttleBlowerId"));

                    b.Property<string>("ActionTaken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CandourAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("ClientName");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Happening")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("Image");

                    b.Property<DateTime>("IncidentDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("IncidentDate");

                    b.Property<string>("IncidentType")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("IncidentType");

                    b.Property<string>("IsThereWitness")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("IsThereWitness");

                    b.Property<string>("LikeCalling")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("LikeCalling");

                    b.Property<string>("NameOfHandlingPerson")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("NameOfHandlingPerson");

                    b.Property<string>("NameOfHandlingPersonTel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonReportingName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("PersonReportingName");

                    b.Property<string>("PhoneNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PhoneNo");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ReferenceNumber");

                    b.Property<string>("Status")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("Status");

                    b.Property<string>("WitnessDetail")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WitnessDetail");

                    b.HasKey("WhisttleBlowerId");

                    b.ToTable("tbl_Whisttle_Blower", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.WoundCareOfficerToAct", b =>
                {
                    b.Property<int>("WoundCareOfficerToActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WoundCareOfficerToActId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WoundCareOfficerToActId"));

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<int>("WoundCareId")
                        .HasColumnType("int")
                        .HasColumnName("WoundCareId");

                    b.HasKey("WoundCareOfficerToActId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.HasIndex("WoundCareId");

                    b.ToTable("tbl_WoundCare_OfficerToAct", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.WoundCarePhysician", b =>
                {
                    b.Property<int>("WoundCarePhysicianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WoundCarePhysicianId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WoundCarePhysicianId"));

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<int>("WoundCareId")
                        .HasColumnType("int")
                        .HasColumnName("WoundCareId");

                    b.HasKey("WoundCarePhysicianId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.HasIndex("WoundCareId");

                    b.ToTable("tbl_WoundCare_Physician", (string)null);
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.WoundCareStaffName", b =>
                {
                    b.Property<int>("WoundCareStaffNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WoundCareStaffNameId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WoundCareStaffNameId"));

                    b.Property<Guid>("StaffPersonalInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StaffPersonalInfoId");

                    b.Property<int>("WoundCareId")
                        .HasColumnType("int")
                        .HasColumnName("WoundCareId");

                    b.HasKey("WoundCareStaffNameId");

                    b.HasIndex("StaffPersonalInfoId");

                    b.HasIndex("WoundCareId");

                    b.ToTable("tbl_WoundCare_StaffName", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.AdlObsOfficerToAct", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.StaffAdlObs", "AdlObs")
                        .WithMany("OfficerToAct")
                        .HasForeignKey("ObservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdlObs");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ApplicationUser", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId");

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithOne("ApplicationUser")
                        .HasForeignKey("JomarHealthCare.Domain.Entities.ApplicationUser", "StaffId");

                    b.Navigation("Company");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.AssignAlertStaff", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffAlert", "StaffAlert")
                        .WithMany("AssignAlertStaff")
                        .HasForeignKey("StaffAlertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany("AssignAlertStaff")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("StaffAlert");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.AuditTrail", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("AuditTrail")
                        .HasForeignKey("ClientId");

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.BMIChartOfficerToAct", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientBMIChart", "BMIChart")
                        .WithMany("OfficerToAct")
                        .HasForeignKey("BMIChartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BMIChart");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.BMIChartPhysician", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientBMIChart", "BMIChart")
                        .WithMany("Physician")
                        .HasForeignKey("BMIChartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BMIChart");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.BMIChartStaffName", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientBMIChart", "BMIChart")
                        .WithMany("StaffName")
                        .HasForeignKey("BMIChartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BMIChart");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.Balance", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("Balance")
                        .HasForeignKey("ClientId");

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.BaseRecordItemModel", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.BaseRecordModel", "BaseRecord")
                        .WithMany("BaseRecordItems")
                        .HasForeignKey("BaseRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("BaseRecord");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.BaseRecordItems", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.BaseRecords", "BaseRecord")
                        .WithMany("BaseRecordItems")
                        .HasForeignKey("BaseRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseRecord");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.BelieveTask", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.BestInterestAssessment", "BestInterestAssessment")
                        .WithMany("BelieveTask")
                        .HasForeignKey("BestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BestInterestAssessment");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.BestInterestAssessment", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", "Client")
                        .WithOne("BestInterestAssessment")
                        .HasForeignKey("JomarHealthCare.Domain.Entities.BestInterestAssessment", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Client");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.BloodCoagOfficerToAct", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientBloodCoagulationRecord", "BloodCoagulation")
                        .WithMany("OfficerToAct")
                        .HasForeignKey("BloodRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodCoagulation");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.BloodCoagPhysician", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientBloodCoagulationRecord", "BloodCoagulation")
                        .WithMany("Physician")
                        .HasForeignKey("BloodRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodCoagulation");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.BloodCoagStaffName", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientBloodCoagulationRecord", "BloodCoagulation")
                        .WithMany("StaffName")
                        .HasForeignKey("BloodRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodCoagulation");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.BloodPressureOfficerToAct", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientBloodPressure", "BloodPressure")
                        .WithMany("OfficerToAct")
                        .HasForeignKey("BloodPressureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodPressure");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.BloodPressurePhysician", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientBloodPressure", "BloodPressure")
                        .WithMany("Physician")
                        .HasForeignKey("BloodPressureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodPressure");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.BloodPressureStaffName", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientBloodPressure", "BloodPressure")
                        .WithMany("StaffName")
                        .HasForeignKey("BloodPressureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodPressure");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.BodyMap", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("BodyMap")
                        .HasForeignKey("ClientId1");

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.BodyTempOfficerToAct", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientBodyTemp", "BodyTemp")
                        .WithMany("OfficerToAct")
                        .HasForeignKey("BodyTempId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BodyTemp");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.BodyTempPhysician", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientBodyTemp", "BodyTemp")
                        .WithMany("Physician")
                        .HasForeignKey("BodyTempId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BodyTemp");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.BodyTempStaffName", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientBodyTemp", "BodyTemp")
                        .WithMany("StaffName")
                        .HasForeignKey("BodyTempId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BodyTemp");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.BowelMovementOfficerToAct", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientBowelMovement", "BowelMovement")
                        .WithMany("OfficerToAct")
                        .HasForeignKey("BowelMovementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BowelMovement");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.BowelMovementPhysician", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientBowelMovement", "BowelMovement")
                        .WithMany("Physician")
                        .HasForeignKey("BowelMovementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BowelMovement");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.BowelMovementStaffName", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientBowelMovement", "BowelMovement")
                        .WithMany("StaffName")
                        .HasForeignKey("BowelMovementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BowelMovement");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.CandidateInterview", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.Capacity", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.PersonalDetail", "PersonalDetail")
                        .WithOne("Capacity")
                        .HasForeignKey("JomarHealthCare.Domain.Entities.Capacity", "PersonalDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonalDetail");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.CapacityIndicator", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Capacity", "Capacity")
                        .WithMany("Indicator")
                        .HasForeignKey("CapacityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Capacity");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.CareIssuesTask", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.BestInterestAssessment", "BestInterestAssessment")
                        .WithMany("CareIssuesTask")
                        .HasForeignKey("BestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BestInterestAssessment");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.CareObjPersonToAct", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientCareObj", "ClientCareObj")
                        .WithMany("PersonToAct")
                        .HasForeignKey("CareObjId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientCareObj");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.CarePlanNutrition", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("CarePlanNutrition")
                        .HasForeignKey("ClientId");

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.CareReview", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("CareReview")
                        .HasForeignKey("ClientId");

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.CareobjectMonitor", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.Chat", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ChatNotification", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ChatSupport", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ChatSupportAssignedStaff", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ChatSupportConversation", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ChatSupport", "ChatSupport")
                        .WithMany("ChatSupportConversation")
                        .HasForeignKey("ChatSupportId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("ChatSupport");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.Client", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.AreaCode", "AreaCode")
                        .WithMany("Clients")
                        .HasForeignKey("AreaCodeId");

                    b.HasOne("JomarHealthCare.Domain.Entities.ClientFacility", "ClientFacility")
                        .WithMany()
                        .HasForeignKey("ClientFacilityId");

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany("Clients")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.Territory", "Territory")
                        .WithMany("Clients")
                        .HasForeignKey("TeritoryId");

                    b.Navigation("AreaCode");

                    b.Navigation("ClientFacility");

                    b.Navigation("Company");

                    b.Navigation("Territory");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientBMIChart", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("ClientBMIChart")
                        .HasForeignKey("ClientId");

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientBillTo", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", "Client")
                        .WithMany("ClientBillTo")
                        .HasForeignKey("ClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientBloodCoagulationRecord", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("ClientBloodCoagulationRecord")
                        .HasForeignKey("ClientId");

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientBloodPressure", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("ClientBloodPressure")
                        .HasForeignKey("ClientId");

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientBodyTemp", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("ClientBodyTemp")
                        .HasForeignKey("ClientId");

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientBowelMovement", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("ClientBowelMovement")
                        .HasForeignKey("ClientId");

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientCareDetails", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientCareDetailsTask", "ClientCareDetailsTask")
                        .WithMany("ClientCareDetails")
                        .HasForeignKey("ClientCareDetailsTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.Client", "Company")
                        .WithMany("ClientCareDetails")
                        .HasForeignKey("ClientId");

                    b.Navigation("ClientCareDetailsTask");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientCareDetailsHeading", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientCareDetailsTask", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientCareDetailsHeading", "ClientCareDetailsHeading")
                        .WithMany("ClientCareDetailsTasks")
                        .HasForeignKey("ClientCareDetailsHeadingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("ClientCareDetailsHeading");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientCareObj", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("ClientCareObj")
                        .HasForeignKey("ClientId");

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientCleaning", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientNutrition", "ClientNutrition")
                        .WithMany("ClientCleaning")
                        .HasForeignKey("NutritionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany("ClientCleaning")
                        .HasForeignKey("STAFFId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ClientNutrition");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientComplainRegister", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("ComplainRegister")
                        .HasForeignKey("ClientId");

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientCongnitive", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientDailyTask", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", "Client")
                        .WithMany("ClientDailyTask")
                        .HasForeignKey("ClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientEyeHealthMonitoring", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("ClientEyeHealthMonitoring")
                        .HasForeignKey("ClientId");

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientFacility", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany("Facilities")
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientFacilityRisk", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("JomarHealthCare.Domain.Entities.ClientFacility", "ClientFacility")
                        .WithMany("ClientFacilityRisk")
                        .HasForeignKey("FacilityClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientFacility");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientFacilityTask", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientFacility", "ClientFacility")
                        .WithMany("ClientFacilityTasks")
                        .HasForeignKey("FacilityClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientFacility");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientFoodIntake", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("ClientFoodIntake")
                        .HasForeignKey("ClientId");

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientHealthCondition", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", "Client")
                        .WithMany("ClientHealthCondition")
                        .HasForeignKey("ClientId");

                    b.HasOne("JomarHealthCare.Domain.Entities.HealthCondition", "HealthCondition")
                        .WithMany("ClientHealthCondition")
                        .HasForeignKey("HCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("HealthCondition");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientHeartRate", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("ClientHeartRate")
                        .HasForeignKey("ClientId");

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientHobbies", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", "Client")
                        .WithMany("ClientHobbies")
                        .HasForeignKey("ClientId");

                    b.HasOne("JomarHealthCare.Domain.Entities.Hobbies", "Hobbies")
                        .WithMany("ClientHobbies")
                        .HasForeignKey("HId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Hobbies");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientInvoice", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientInvoiceSummary", "ClientInvoiceSummary")
                        .WithMany("ClientInvoice")
                        .HasForeignKey("ClientInvoiceSummaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("ClientInvoiceSummary");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientInvoiceRate", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", "Client")
                        .WithMany("ClientInvoiceRate")
                        .HasForeignKey("ClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientInvoiceRecords", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientInvoice", "ClientInvoice")
                        .WithMany("ClientInvoiceRecords")
                        .HasForeignKey("ClientInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientInvoice");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientInvolvingParty", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", "Client")
                        .WithMany("InvolvingParties")
                        .HasForeignKey("ClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientKeyWorkerVoice", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("ClientKeyWorkerVoice")
                        .HasForeignKey("ClientId");

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientKeyworkerNotes", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientLogAudit", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("ClientLogAudit")
                        .HasForeignKey("ClientId");

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", null)
                        .WithMany("ClientLogAudit")
                        .HasForeignKey("StaffPersonalInfoId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientMatrixAudit", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("ClientMatrixAudit")
                        .HasForeignKey("ClientId");

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientMealDays", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientMealType", "ClientMealType")
                        .WithMany("ClientMeal")
                        .HasForeignKey("ClientMealTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.RotaDayofWeek", "MealDayofWeek")
                        .WithMany("ClientMealDays")
                        .HasForeignKey("MealDayofWeekId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.ClientNutrition", "ClientNutrition")
                        .WithMany("ClientMealDays")
                        .HasForeignKey("NutritionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientMealType");

                    b.Navigation("ClientNutrition");

                    b.Navigation("MealDayofWeek");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientMealType", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientMedAudit", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("ClientMedAudit")
                        .HasForeignKey("ClientId");

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", null)
                        .WithMany("ClientMedAudit")
                        .HasForeignKey("StaffPersonalInfoId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientMedication", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("ClientMedication")
                        .HasForeignKey("ClientId");

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.Medication", "Medication")
                        .WithMany()
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.MedicationManufacturer", "MedicationManufacturer")
                        .WithMany()
                        .HasForeignKey("MedicationManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.MedicationRoute", "MedicationRoute")
                        .WithOne("ClientMedication")
                        .HasForeignKey("JomarHealthCare.Domain.Entities.ClientMedication", "MedicationRouteId");

                    b.Navigation("Company");

                    b.Navigation("Medication");

                    b.Navigation("MedicationManufacturer");

                    b.Navigation("MedicationRoute");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientMedicationDay", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientMedication", null)
                        .WithMany("ClientMedicationDay")
                        .HasForeignKey("ClientMedicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.ClientMedication", "ClientMedication")
                        .WithMany()
                        .HasForeignKey("ClientMedicationId1");

                    b.HasOne("JomarHealthCare.Domain.Entities.RotaDayofWeek", "RotaDayofWeek")
                        .WithOne("ClientMedicationDay")
                        .HasForeignKey("JomarHealthCare.Domain.Entities.ClientMedicationDay", "RotaDayofWeekId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientMedication");

                    b.Navigation("RotaDayofWeek");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientMedicationPeriod", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientMedicationDay", "ClientMedicationDay")
                        .WithMany("ClientMedicationPeriod")
                        .HasForeignKey("ClientMedicationDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.ClientRotaType", "ClientRotaType")
                        .WithMany("ClientMedicationPeriod")
                        .HasForeignKey("ClientRotaTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientMedicationDay");

                    b.Navigation("ClientRotaType");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientMgtVisit", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("ClientMgtVisit")
                        .HasForeignKey("ClientId");

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", null)
                        .WithMany("ClientMgtVisit")
                        .HasForeignKey("StaffPersonalInfoId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientNutrition", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("ClientNutrition")
                        .HasForeignKey("ClientId");

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "Staff")
                        .WithMany("ClientNutrition")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientOxygenLvl", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("ClientOxygenLvl")
                        .HasForeignKey("ClientId");

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientPainChart", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("ClientPainChart")
                        .HasForeignKey("ClientId");

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientPerformanceIndicator", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientPerformanceIndicatorTask", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientPerformanceIndicator", "ClientPerformanceIndicator")
                        .WithMany("ClientPerformanceIndicatorTask")
                        .HasForeignKey("PerformanceIndicatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientPerformanceIndicator");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientProgram", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("ClientProgram")
                        .HasForeignKey("ClientId");

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", null)
                        .WithMany("ClientProgram")
                        .HasForeignKey("StaffPersonalInfoId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientPulseRate", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("ClientPulseRate")
                        .HasForeignKey("ClientId");

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientRegulatoryContact", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.BaseRecordItemModel", "BaseRecordItem")
                        .WithMany()
                        .HasForeignKey("BaseRecordItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.Client", "Client")
                        .WithMany("RegulatoryContact")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseRecordItem");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientRota", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", "Client")
                        .WithMany("ClientRota")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.ClientRotaType", "ClientRotaType")
                        .WithMany("ClientRota")
                        .HasForeignKey("ClientRotaTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("ClientRotaType");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientRotaDays", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientRota", "ClientRota")
                        .WithMany("ClientRotaDays")
                        .HasForeignKey("ClientRotaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("JomarHealthCare.Domain.Entities.RotaDayofWeek", "RotaDayofWeek")
                        .WithMany("ClientRotaDays")
                        .HasForeignKey("RotaDayofWeekId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.Rota", "Rota")
                        .WithMany("ClientRotaDays")
                        .HasForeignKey("RotaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientRota");

                    b.Navigation("Company");

                    b.Navigation("Rota");

                    b.Navigation("RotaDayofWeek");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientRotaTask", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientRotaDays", "ClientRotaDays")
                        .WithMany("ClientRotaTask")
                        .HasForeignKey("ClientRotaDaysId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.RotaTask", "RotaTask")
                        .WithMany("ClientRotaTask")
                        .HasForeignKey("RotaTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientRotaDays");

                    b.Navigation("RotaTask");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientRotaType", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientSeizure", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("ClientSeizure")
                        .HasForeignKey("ClientId");

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientServiceDetail", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientServiceDetailItem", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientServiceDetail", "ClientServiceDetail")
                        .WithMany("ClientServiceDetailItems")
                        .HasForeignKey("ClientServiceDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("ClientServiceDetail");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientServiceDetailReceipt", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientServiceDetail", "ClientServiceDetail")
                        .WithMany("ClientServiceDetailReceipts")
                        .HasForeignKey("ClientServiceDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientServiceDetail");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientServiceWatch", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("ClientServiceWatch")
                        .HasForeignKey("ClientId");

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", null)
                        .WithMany("ClientServiceWatch")
                        .HasForeignKey("StaffPersonalInfoId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientShopping", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientNutrition", "ClientNutrition")
                        .WithMany("ClientShopping")
                        .HasForeignKey("NutritionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany("ClientShopping")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ClientNutrition");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientSupportPlan", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientSupportPlanGoal", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientSupportPlan", "ClientSupportPlan")
                        .WithMany("ClientSupportPlanGoal")
                        .HasForeignKey("ClientSupportPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientSupportPlan");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientSupportPlanGoalAchieve", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientSupportPlanGoal", "ClientSupportPlanGoal")
                        .WithMany("ClientSupportPlanGoalAchieve")
                        .HasForeignKey("ClientSupportPlanGoalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientSupportPlanGoal");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientVoice", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("ClientVoice")
                        .HasForeignKey("ClientId");

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", null)
                        .WithMany("ClientVoice")
                        .HasForeignKey("StaffPersonalInfoId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientWoundCare", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("ClientWoundCare")
                        .HasForeignKey("ClientId");

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.CompanyBank", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.CompanyContactModel", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.CompanyModel", "Company")
                        .WithOne("CompanyContact")
                        .HasForeignKey("JomarHealthCare.Domain.Entities.CompanyContactModel", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.CompanyModel", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ComplainOfficerToAct", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientComplainRegister", "ComplainRegister")
                        .WithMany("OfficerToAct")
                        .HasForeignKey("ComplainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComplainRegister");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ComplainRegistorClients", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("ComplainRegistorClients")
                        .HasForeignKey("ClientId");

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("JomarHealthCare.Domain.Entities.ComplainRegistor", "ComplainRegistor")
                        .WithMany("ComplainRegistorClients")
                        .HasForeignKey("ComplainRegistorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("ComplainRegistor");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ComplainRegistorStaff", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ComplainRegistor", "ComplainRegistor")
                        .WithMany("ComplainRegistorStaff")
                        .HasForeignKey("ComplainRegistorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "Staff")
                        .WithMany("ComplainRegistorStaff")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComplainRegistor");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ComplainStaffName", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientComplainRegister", "ComplainRegister")
                        .WithMany("StaffName")
                        .HasForeignKey("ComplainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComplainRegister");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ConsentCare", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.PersonalDetail", "PersonalDetail")
                        .WithOne("ConsentCare")
                        .HasForeignKey("JomarHealthCare.Domain.Entities.ConsentCare", "PersonalDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonalDetail");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ConsentData", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.PersonalDetail", "PersonalDetail")
                        .WithOne("ConsentData")
                        .HasForeignKey("JomarHealthCare.Domain.Entities.ConsentData", "PersonalDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonalDetail");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ConsentLandLine", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.PersonalDetail", "PersonalDetail")
                        .WithOne("ConsentLandLine")
                        .HasForeignKey("JomarHealthCare.Domain.Entities.ConsentLandLine", "PersonalDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonalDetail");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ConsentLandlineLog", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ConsentLandLine", "ConsentLandLine")
                        .WithMany("LogMethod")
                        .HasForeignKey("LandlineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConsentLandLine");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ConsentMedication", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.PersonalDetail", "PersonalDetail")
                        .WithOne("ConsentMedication")
                        .HasForeignKey("JomarHealthCare.Domain.Entities.ConsentMedication", "PersonalDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonalDetail");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.Conversation", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("JomarHealthCare.Domain.Entities.Inbox", "Inbox")
                        .WithMany("Conversation")
                        .HasForeignKey("InboxId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Inbox");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.CreateShift", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.CreateShiftRoles", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientFacility", "ClientFacility")
                        .WithMany("CreateShiftRoles")
                        .HasForeignKey("ClientFacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("CreateShiftRoles")
                        .HasForeignKey("ClientId");

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("JomarHealthCare.Domain.Entities.CreateShift", "CreateShift")
                        .WithMany("CreateShiftRoles")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffUser")
                        .WithMany("CreateShiftRoles")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientFacility");

                    b.Navigation("Company");

                    b.Navigation("CreateShift");

                    b.Navigation("StaffUser");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.CuidiBuddy", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("CuidiBuddy")
                        .HasForeignKey("ClientId");

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.DeductionValue", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.DeductionForAllStaff", "DeductionForAllStaff")
                        .WithMany("DeductionValue")
                        .HasForeignKey("DeductionForAllStaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeductionForAllStaff");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.DutyOnCall", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", "Client")
                        .WithMany("DutyOnCall")
                        .HasForeignKey("ClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.DutyOnCallPersonResponsible", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.DutyOnCall", "DutyOnCall")
                        .WithMany("PersonResponsible")
                        .HasForeignKey("DutyOnCallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DutyOnCall");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.DutyOnCallPersonToAct", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.DutyOnCall", "DutyOnCall")
                        .WithMany("PersonToAct")
                        .HasForeignKey("DutyOnCallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DutyOnCall");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.EmailMessageUser", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.EmailMessage", "EmailMessage")
                        .WithMany("EmailMessageUser")
                        .HasForeignKey("EmailMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmailMessage");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.Enotice", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("Enotice")
                        .HasForeignKey("ClientId");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.Equipment", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "Staff")
                        .WithMany("Equipment")
                        .HasForeignKey("PersonToAct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.PersonalDetail", "PersonalDetail")
                        .WithMany("Equipment")
                        .HasForeignKey("PersonalDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonalDetail");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.EquipmentAssessment", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", "Client")
                        .WithMany("EquipmentAssessment")
                        .HasForeignKey("ClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.Expenselog", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ExternalRoleAccess", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.EyeHealthOfficerToAct", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientEyeHealthMonitoring", "EyeHealth")
                        .WithMany("OfficerToAct")
                        .HasForeignKey("EyeHealthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EyeHealth");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.EyeHealthPhysician", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientEyeHealthMonitoring", "EyeHealth")
                        .WithMany("Physician")
                        .HasForeignKey("EyeHealthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EyeHealth");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.EyeHealthStaffName", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientEyeHealthMonitoring", "EyeHealth")
                        .WithMany("StaffName")
                        .HasForeignKey("EyeHealthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EyeHealth");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.FilesAndRecord", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("FilesAndRecord")
                        .HasForeignKey("ClientId1");

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany("FilesAndRecord")
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.FoodIntakeOfficerToAct", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientFoodIntake", "FoodIntake")
                        .WithMany("OfficerToAct")
                        .HasForeignKey("FoodIntakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodIntake");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.FoodIntakePhysician", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientFoodIntake", "FoodIntake")
                        .WithMany("Physician")
                        .HasForeignKey("FoodIntakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodIntake");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.FoodIntakeStaffName", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientFoodIntake", "FoodIntake")
                        .WithMany("StaffName")
                        .HasForeignKey("FoodIntakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodIntake");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.HealthAndLiving", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("HealthAndLiving")
                        .HasForeignKey("ClientId");

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.HealthTask", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.BestInterestAssessment", "BestInterestAssessment")
                        .WithMany("HealthTask")
                        .HasForeignKey("BestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BestInterestAssessment");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.HealthTask2", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.BestInterestAssessment", "BestInterestAssessment")
                        .WithMany("HealthTask2")
                        .HasForeignKey("BestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BestInterestAssessment");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.HeartRateOfficerToAct", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientHeartRate", "HeartRate")
                        .WithMany("OfficerToAct")
                        .HasForeignKey("HeartRateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HeartRate");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.HeartRatePhysician", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientHeartRate", "HeartRate")
                        .WithMany("Physician")
                        .HasForeignKey("HeartRateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HeartRate");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.HeartRateStaffName", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientHeartRate", "HeartRate")
                        .WithMany("StaffName")
                        .HasForeignKey("HeartRateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HeartRate");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.HistoryOfFall", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("HistoryOfFall")
                        .HasForeignKey("ClientId");

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.HomeRiskAssessment", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("HomeRiskAssessment")
                        .HasForeignKey("ClientId");

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.HomeRiskAssessmentTask", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("JomarHealthCare.Domain.Entities.HomeRiskAssessment", "HomeRiskAssessment")
                        .WithMany("HomeRiskAssessmentTask")
                        .HasForeignKey("HomeRiskAssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("HomeRiskAssessment");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.HospitalEntry", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("HospitalEntry")
                        .HasForeignKey("ClientId");

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.HospitalEntryPersonToTakeAction", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.HospitalEntry", "HospitalEntry")
                        .WithMany("PersonToTakeAction")
                        .HasForeignKey("HospitalEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany("HospitalEntryPersonToTakeAction")
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HospitalEntry");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.HospitalEntryStaffInvolved", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.HospitalEntry", "HospitalEntry")
                        .WithMany("StaffInvolved")
                        .HasForeignKey("HospitalEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany("HospitalEntryStaffInvolved")
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HospitalEntry");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.HospitalExit", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("HospitalExit")
                        .HasForeignKey("ClientId");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.HospitalExitOfficerToTakeAction", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.HospitalExit", "HospitalExit")
                        .WithMany("OfficerToTakeAction")
                        .HasForeignKey("HospitalExitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany("HospitalExitOfficerToTakeAction")
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HospitalExit");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.Inbox", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.IncidentReporting", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("IncidentReporting")
                        .HasForeignKey("ClientId");

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.IncomeValue", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.IncomeForAllStaff", "IncomeForAllStaff")
                        .WithMany("IncomeValue")
                        .HasForeignKey("IncomeForAllStaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IncomeForAllStaff");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.IncomingMeds", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("IncomingMeds")
                        .HasForeignKey("ClientId");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.InfectionControl", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("InfectionControl")
                        .HasForeignKey("ClientId");

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.Interest", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.InterestAndObjective", "InterestAndObjective")
                        .WithMany("Interest")
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InterestAndObjective");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.InterestAndObjective", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.InterviewQuestion", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.Investigation", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.InvestigationAttachment", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Investigation", "Investigation")
                        .WithMany("InvestigationAttachments")
                        .HasForeignKey("InvestigationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Investigation");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.KeyIndicatorLog", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.KeyIndicators", "KeyIndicators")
                        .WithMany("LogMethod")
                        .HasForeignKey("KeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KeyIndicators");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.KeyIndicators", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.PersonalDetail", "PersonalDetail")
                        .WithOne("KeyIndicators")
                        .HasForeignKey("JomarHealthCare.Domain.Entities.KeyIndicators", "PersonalDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonalDetail");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.KeyWorkerOfficerToAct", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.StaffKeyWorkerVoice", null)
                        .WithMany("OfficerToAct")
                        .HasForeignKey("StaffKeyWorkerVoiceKeyWorkerId");

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.KeyWorkerWorkteam", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.StaffKeyWorkerVoice", null)
                        .WithMany("Workteam")
                        .HasForeignKey("StaffKeyWorkerVoiceKeyWorkerId");

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.LogAuditOfficerToAct", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientLogAudit", "LogAudit")
                        .WithMany("OfficerToAct")
                        .HasForeignKey("LogAuditId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LogAudit");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ManagingTasks", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("ManagingTasks")
                        .HasForeignKey("ClientId");

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.MedAuditOfficerToAct", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientMedAudit", "MedAudit")
                        .WithMany("OfficerToAct")
                        .HasForeignKey("MedAuditId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedAudit");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.MedAuditStaffName", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientMedAudit", "MedAudit")
                        .WithMany("StaffName")
                        .HasForeignKey("MedAuditId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedAudit");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.MedCompOfficerToAct", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.StaffMedComp", null)
                        .WithMany("OfficerToAct")
                        .HasForeignKey("StaffMedCompMedCompId");

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.Medication", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.MedicationManufacturer", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.MedicationRoute", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.MeetingActionableItem", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.MeetingLog", "MeetingLog")
                        .WithMany("MeetingActionableItem")
                        .HasForeignKey("MeetingLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeetingLog");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.MeetingAgenda", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.MeetingLog", "MeetingLog")
                        .WithMany("MeetingAgenda")
                        .HasForeignKey("MeetingLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeetingLog");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.MeetingDiscussions", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.MeetingLog", "MeetingLog")
                        .WithMany("MeetingDiscussions")
                        .HasForeignKey("MeetingLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeetingLog");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.MeetingLogAttende", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.MeetingLog", "MeetingLog")
                        .WithMany("MeetingLogAttende")
                        .HasForeignKey("MeetingLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany("MeetingLogAttende")
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeetingLog");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.MeetingLogFacilitator", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.MeetingLog", "MeetingLog")
                        .WithMany("MeetingLogFacilitators")
                        .HasForeignKey("MeetingLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeetingLog");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.MeetingLogResponsibleToAct", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.MeetingLog", "MeetingLog")
                        .WithMany("MeetingLogResponsibleToAct")
                        .HasForeignKey("MeetingLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeetingLog");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.MentalHealthSupport", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.OfficeAttendance", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ApplicationUser", "User")
                        .WithMany("OfficeAttendance")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId");

                    b.Navigation("StaffPersonalInfo");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.OfficeLocation", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ApplicationUser", "User")
                        .WithMany("OfficeLocation")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.OneToOneOfficerToAct", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.StaffOneToOne", null)
                        .WithMany("OfficerToAct")
                        .HasForeignKey("StaffOneToOneOneToOneId");

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.OnlineTrainingBundleCourse", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.OnlineTrainingBundle", "OnlineTrainingBundle")
                        .WithMany("OnlineTrainingBundleCourse")
                        .HasForeignKey("OnlineTrainingBundleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.OnlineTraning", "OnlineTraning")
                        .WithMany()
                        .HasForeignKey("OnlineTraningId");

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffBundleCourseResult", "StaffBundleCourseResult")
                        .WithMany()
                        .HasForeignKey("StaffBundleCourseResultId");

                    b.Navigation("OnlineTrainingBundle");

                    b.Navigation("OnlineTraning");

                    b.Navigation("StaffBundleCourseResult");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.OnlineTraininglogQuestion", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.OnlineTraning", "OnlineTraning")
                        .WithMany("OnlineTraininglogQuestion")
                        .HasForeignKey("OnlineTraningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OnlineTraning");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.OnlineTraning", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.OnlineClass", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.OnlineMaterialType", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId");

                    b.Navigation("Class");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.OnlineTraningQuestion", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.OnlineTraning", "OnlineTraning")
                        .WithMany("OnlineTraningQuestion")
                        .HasForeignKey("OnlineTraningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OnlineTraning");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.OnlineTraningQuestionOptions", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.OnlineTraningQuestion", "OnlineTraningQuestion")
                        .WithMany("OnlineTraningQuestionOptions")
                        .HasForeignKey("OnlineTraningQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OnlineTraningQuestion");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.OralCare", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.OxygenLvlOfficerToAct", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientOxygenLvl", "OxygenLvl")
                        .WithMany("OfficerToAct")
                        .HasForeignKey("OxygenLvlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OxygenLvl");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.OxygenLvlPhysician", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientOxygenLvl", "OxygenLvl")
                        .WithMany("Physician")
                        .HasForeignKey("OxygenLvlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OxygenLvl");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.OxygenLvlStaffName", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientOxygenLvl", "OxygenLvl")
                        .WithMany("StaffName")
                        .HasForeignKey("OxygenLvlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OxygenLvl");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.PainChartOfficerToAct", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientPainChart", "PainChart")
                        .WithMany("OfficerToAct")
                        .HasForeignKey("PainChartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PainChart");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.PainChartPhysician", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientPainChart", "PainChart")
                        .WithMany("Physician")
                        .HasForeignKey("PainChartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PainChart");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.PainChartStaffName", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientPainChart", "PainChart")
                        .WithMany("StaffName")
                        .HasForeignKey("PainChartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PainChart");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.PerformanceIndicator", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.PerformanceIndicatorTask", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("JomarHealthCare.Domain.Entities.PerformanceIndicator", "PerformanceIndicator")
                        .WithMany("PerformanceIndicatorTask")
                        .HasForeignKey("PerformanceIndicatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("PerformanceIndicator");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.PersonCentred", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.PersonalDetail", "PersonalDetail")
                        .WithMany("PersonCentred")
                        .HasForeignKey("PersonalDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonalDetail");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.PersonCentredFocus", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.PersonCentred", "PersonCentre")
                        .WithMany("Focus")
                        .HasForeignKey("PersonCentredId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonCentre");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.Personal", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.PersonalDetail", "PersonalDetail")
                        .WithOne("Personal")
                        .HasForeignKey("JomarHealthCare.Domain.Entities.Personal", "PersonalDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonalDetail");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.PersonalDetail", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("PersonalDetail")
                        .HasForeignKey("ClientId");

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.PersonalHygiene", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("PersonalHygiene")
                        .HasForeignKey("ClientId");

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.PersonalityTest", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.InterestAndObjective", "InterestAndObjective")
                        .WithMany("PersonalityTest")
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InterestAndObjective");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.Pets", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("Pets")
                        .HasForeignKey("ClientId");

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.PettyCashUsage", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.PettyCash", "PettyCash")
                        .WithMany("PettyCashUsage")
                        .HasForeignKey("PettyCashId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PettyCash");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.PhysicalAbility", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("PhysicalAbility")
                        .HasForeignKey("ClientId");

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ProgramOfficerToAct", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientProgram", "Program")
                        .WithMany("OfficerToAct")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Program");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.PulseRateOfficerToAct", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientPulseRate", "PulseRate")
                        .WithMany("OfficerToAct")
                        .HasForeignKey("PulseRateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PulseRate");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.PulseRatePhysician", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientPulseRate", "PulseRate")
                        .WithMany("Physician")
                        .HasForeignKey("PulseRateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PulseRate");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.PulseRateStaffName", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientPulseRate", "PulseRate")
                        .WithMany("StaffName")
                        .HasForeignKey("PulseRateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PulseRate");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.Resources", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("Resources")
                        .HasForeignKey("ClientId");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.Review", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.PersonalDetail", "PersonalDetail")
                        .WithOne("Review")
                        .HasForeignKey("JomarHealthCare.Domain.Entities.Review", "PersonalDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonalDetail");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.Rota", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.RotaDayofWeek", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.RotaStaff", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.StaffMedRota", "StaffMedRota")
                        .WithMany()
                        .HasForeignKey("StaffMedRotaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffMedRota");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.RotaTask", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.SalaryAllowance", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany("SalaryAllowance")
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.SalaryDeduction", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany("SalaryDeduction")
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.SeizureOfficerToAct", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientSeizure", "Seizure")
                        .WithMany("OfficerToAct")
                        .HasForeignKey("SeizureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seizure");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.SeizurePhysician", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientSeizure", "Seizure")
                        .WithMany("Physician")
                        .HasForeignKey("SeizureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seizure");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.SeizureStaffName", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientSeizure", "Seizure")
                        .WithMany("StaffName")
                        .HasForeignKey("SeizureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seizure");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ServiceOfficerToAct", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientServiceWatch", "Service")
                        .WithMany("OfficerToAct")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ServiceStaffName", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientServiceWatch", "Service")
                        .WithMany("StaffName")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.SetupStaffHoliday", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany("SetupStaffHoliday")
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ShiftBooking", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ApplicationUser", "User")
                        .WithMany("ShiftBooking")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ShiftBookingBlockedDays", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ShiftBooking", "ShiftBooking")
                        .WithMany("ShiftBookingBlockedDays")
                        .HasForeignKey("ShiftBookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShiftBooking");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.SpecialHealthAndMedication", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("SpecialHealthAndMedication")
                        .HasForeignKey("ClientId");

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.SpecialHealthCondition", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("SpecialHealthCondition")
                        .HasForeignKey("ClientId");

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.SpotCheckOfficerToAct", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffSpotCheck", null)
                        .WithMany("OfficerToAct")
                        .HasForeignKey("StaffSpotCheckSpotCheckId");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffAdlObs", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("StaffAdlObs")
                        .HasForeignKey("ClientId");

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "Staff")
                        .WithMany("StaffAdlObs")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffAlert", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffAlertCountMatrix", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffAlert", "StaffAlert")
                        .WithMany("StaffAlertCountMatrix")
                        .HasForeignKey("StaffAlertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("StaffAlert");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffBlackList", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", "Client")
                        .WithMany("StaffBlackList")
                        .HasForeignKey("ClientId");

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany("StaffBlackList")
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffCompetenceTest", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany("StaffCompetenceTest")
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffCompetenceTestTask", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffCompetenceTest", "StaffCompetenceTest")
                        .WithMany("StaffCompetenceTestTask")
                        .HasForeignKey("StaffCompetenceTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("StaffCompetenceTest");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffEducation", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "Staff")
                        .WithMany("Education")
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffEmergencyContact", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany("EmergencyContacts")
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffHealth", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany("StaffHealth")
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffHealthTask", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffHealth", "StaffHealth")
                        .WithMany("StaffHealthTask")
                        .HasForeignKey("StaffHealthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("StaffHealth");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffHoliday", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany("StaffHoliday")
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffIncidentReporting", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffInfectionControl", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany("StaffInfectionControl")
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffInterview", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany("StaffInterview")
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffInterviewTask", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffInterview", "StaffInterview")
                        .WithMany("StaffInterviewTask")
                        .HasForeignKey("StaffInterviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("StaffInterview");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffKeyWorkerVoice", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("StaffKeyWorkerVoice")
                        .HasForeignKey("ClientId");

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "Staff")
                        .WithMany("StaffKeyWorkerVoice")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffLateness", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany("StaffLateness")
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffMedComp", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("StaffMedCompObs")
                        .HasForeignKey("ClientId");

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "Staff")
                        .WithMany("StaffMedCompObs")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffMedRota", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ApplicationUser", "User")
                        .WithMany("StaffMedRota")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("JomarHealthCare.Domain.Entities.Rota", "Rota")
                        .WithMany()
                        .HasForeignKey("RotaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rota");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffOfficeLocation", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.OfficeLocation", "OfficeLocation")
                        .WithMany("StaffOfficeLocation")
                        .HasForeignKey("Location")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", null)
                        .WithMany("StaffOfficeLocation")
                        .HasForeignKey("StaffPersonalInfoId");

                    b.Navigation("OfficeLocation");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffOneToOne", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "Staff")
                        .WithMany("StaffOneToOne")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffPerformance", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPerformanceSummary", "PerformanceSummary")
                        .WithMany("StaffPerformance")
                        .HasForeignKey("PerformanceSummaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("PerformanceSummary");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffPerformanceHeading", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.JobPosition", "JobPosition")
                        .WithMany("StaffPerformanceHeading")
                        .HasForeignKey("JobPositionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("JobPosition");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffPersonalInfo", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.CategoryOfStaff", "CategoryOfStaff")
                        .WithMany("StaffPersonalInfo")
                        .HasForeignKey("CategoryId");

                    b.HasOne("JomarHealthCare.Domain.Entities.JobPosition", "JobPosition")
                        .WithMany("StaffPersonalInfo")
                        .HasForeignKey("JobPositionId");

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffWorkTeam", "StaffWorkTeam")
                        .WithMany("StaffPersonalInfo")
                        .HasForeignKey("StaffWorkTeamId");

                    b.Navigation("CategoryOfStaff");

                    b.Navigation("JobPosition");

                    b.Navigation("StaffWorkTeam");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffPersonalInfoComment", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany("StaffPersonalInfoComments")
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffPersonalityTest", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany("StaffPersonalityTest")
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffRating", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany("StaffRating")
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffReferee", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "Staff")
                        .WithMany("References")
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffReference", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("StaffReference")
                        .HasForeignKey("ClientId");

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "Staff")
                        .WithMany("StaffReference")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffRegulatoryContact", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.BaseRecordItemModel", "BaseRecordItem")
                        .WithMany()
                        .HasForeignKey("BaseRecordItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany("RegulatoryContact")
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseRecordItem");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffRota", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Rota", "Rota")
                        .WithMany("StaffRota")
                        .HasForeignKey("RotaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rota");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffRotaDynamicAddition", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffRotaItem", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.StaffRota", "StaffRota")
                        .WithMany("StaffRotaItem")
                        .HasForeignKey("StaffRotaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffRota");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffRotaPartner", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.StaffRota", "StaffRota")
                        .WithMany("StaffRotaPartners")
                        .HasForeignKey("StaffRotaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffRota");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffRotaPeriod", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ClientRotaType", "ClientRotaType")
                        .WithMany("StaffRotaPeriods")
                        .HasForeignKey("ClientRotaTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffRota", "StaffRota")
                        .WithMany("StaffRotaPeriods")
                        .HasForeignKey("StaffRotaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientRotaType");

                    b.Navigation("Company");

                    b.Navigation("StaffRota");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffRotaTask", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.StaffRotaPeriod", "StaffRotaPeriod")
                        .WithMany("StaffRotaTasks")
                        .HasForeignKey("StaffRotaPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffRotaPeriod");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffShadowing", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany("StaffShadowing")
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffShadowingTask", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffShadowing", "StaffShadowing")
                        .WithMany("StaffShadowingTask")
                        .HasForeignKey("StaffShadowingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("StaffShadowing");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffShiftBooking", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Rota", null)
                        .WithMany("ShiftBookings")
                        .HasForeignKey("RotaId");

                    b.HasOne("JomarHealthCare.Domain.Entities.ShiftBooking", "ShiftBooking")
                        .WithMany("StaffShiftBooking")
                        .HasForeignKey("ShiftBookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany("ShiftBookings")
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShiftBooking");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffShiftBookingDay", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.StaffShiftBooking", "ShiftBooking")
                        .WithMany("Days")
                        .HasForeignKey("StaffShiftBookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShiftBooking");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffSpotCheck", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("StaffSpotCheck")
                        .HasForeignKey("ClientId");

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "Staff")
                        .WithMany("StaffSpotCheck")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffSupervisionAppraisal", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", null)
                        .WithMany("StaffSupervisionAppraisal")
                        .HasForeignKey("StaffPersonalInfoId");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffSurvey", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "Staff")
                        .WithMany("StaffSurvey")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffTax", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany("StaffTax")
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffTeamLead", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Client", null)
                        .WithMany("StaffTeamLead")
                        .HasForeignKey("ClientId");

                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany("StaffTeamLead")
                        .HasForeignKey("StaffInvolved")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffTeamLeadTasks", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffTeamLead", "StaffTeamLead")
                        .WithMany("StaffTeamLeadTasks")
                        .HasForeignKey("TeamLeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("StaffTeamLead");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffTraining", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "Staff")
                        .WithMany("Trainings")
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffTrainingMatrix", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany("StaffTrainingMatrix")
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffTrainingMatrixList", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.StaffTrainingMatrix", "StaffTrainingMatrix")
                        .WithMany("StaffTrainingMatrixList")
                        .HasForeignKey("MatrixId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffTrainingMatrix");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffWorkTeam", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.ApplicationUser", "User")
                        .WithMany("StaffWorkTeam")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.SupervisionOfficerToAct", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffSupervisionAppraisal", "Supervision")
                        .WithMany("OfficerToAct")
                        .HasForeignKey("StaffSupervisionAppraisalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");

                    b.Navigation("Supervision");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.SupervisionWorkteam", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffSupervisionAppraisal", "Supervision")
                        .WithMany("Workteam")
                        .HasForeignKey("StaffSupervisionAppraisalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");

                    b.Navigation("Supervision");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.SurveyOfficerToAct", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.StaffSurvey", null)
                        .WithMany("OfficerToAct")
                        .HasForeignKey("StaffSurveyId");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.SurveyWorkteam", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.StaffSurvey", null)
                        .WithMany("Workteam")
                        .HasForeignKey("StaffSurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.TaskBoardAssignedTo", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.TaskBoard", "TaskBoard")
                        .WithMany("AssignedTo")
                        .HasForeignKey("TaskBoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");

                    b.Navigation("TaskBoard");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.TrackingConcernManager", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.TrackingConcernNote", "TrackingConcernNote")
                        .WithMany("ManagerInvolved")
                        .HasForeignKey("TrackingConcernNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");

                    b.Navigation("TrackingConcernNote");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.TrackingConcernStaff", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.TrackingConcernNote", "TrackingConcernNote")
                        .WithMany("StaffInvolved")
                        .HasForeignKey("TrackingConcernNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");

                    b.Navigation("TrackingConcernNote");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.VisitOfficerToAct", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.ClientMgtVisit", "Visit")
                        .WithMany("OfficerToAct")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.VisitStaffName", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.ClientMgtVisit", "Visit")
                        .WithMany("StaffName")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.VoiceCallerName", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.ClientVoice", "Voice")
                        .WithMany("CallerName")
                        .HasForeignKey("VoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");

                    b.Navigation("Voice");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.VoiceGoodStaff", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.ClientVoice", "Voice")
                        .WithMany("GoodStaff")
                        .HasForeignKey("VoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");

                    b.Navigation("Voice");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.VoiceOfficerToAct", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.ClientVoice", "Voice")
                        .WithMany("OfficerToAct")
                        .HasForeignKey("VoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");

                    b.Navigation("Voice");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.VoicePoorStaff", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.ClientVoice", "Voice")
                        .WithMany("PoorStaff")
                        .HasForeignKey("VoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");

                    b.Navigation("Voice");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.WoundCareOfficerToAct", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.ClientWoundCare", "WoundCare")
                        .WithMany("OfficerToAct")
                        .HasForeignKey("WoundCareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");

                    b.Navigation("WoundCare");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.WoundCarePhysician", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.ClientWoundCare", "WoundCare")
                        .WithMany("Physician")
                        .HasForeignKey("WoundCareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");

                    b.Navigation("WoundCare");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.WoundCareStaffName", b =>
                {
                    b.HasOne("JomarHealthCare.Domain.Entities.StaffPersonalInfo", "StaffPersonalInfo")
                        .WithMany()
                        .HasForeignKey("StaffPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JomarHealthCare.Domain.Entities.ClientWoundCare", "WoundCare")
                        .WithMany("StaffName")
                        .HasForeignKey("WoundCareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPersonalInfo");

                    b.Navigation("WoundCare");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ApplicationUser", b =>
                {
                    b.Navigation("OfficeAttendance");

                    b.Navigation("OfficeLocation");

                    b.Navigation("ShiftBooking");

                    b.Navigation("StaffMedRota");

                    b.Navigation("StaffWorkTeam");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.AreaCode", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.BaseRecordModel", b =>
                {
                    b.Navigation("BaseRecordItems");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.BaseRecords", b =>
                {
                    b.Navigation("BaseRecordItems");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.BestInterestAssessment", b =>
                {
                    b.Navigation("BelieveTask");

                    b.Navigation("CareIssuesTask");

                    b.Navigation("HealthTask");

                    b.Navigation("HealthTask2");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.Capacity", b =>
                {
                    b.Navigation("Indicator");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.CategoryOfStaff", b =>
                {
                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ChatSupport", b =>
                {
                    b.Navigation("ChatSupportConversation");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.Client", b =>
                {
                    b.Navigation("AuditTrail");

                    b.Navigation("Balance");

                    b.Navigation("BestInterestAssessment");

                    b.Navigation("BodyMap");

                    b.Navigation("CarePlanNutrition");

                    b.Navigation("CareReview");

                    b.Navigation("ClientBMIChart");

                    b.Navigation("ClientBillTo");

                    b.Navigation("ClientBloodCoagulationRecord");

                    b.Navigation("ClientBloodPressure");

                    b.Navigation("ClientBodyTemp");

                    b.Navigation("ClientBowelMovement");

                    b.Navigation("ClientCareDetails");

                    b.Navigation("ClientCareObj");

                    b.Navigation("ClientDailyTask");

                    b.Navigation("ClientEyeHealthMonitoring");

                    b.Navigation("ClientFoodIntake");

                    b.Navigation("ClientHealthCondition");

                    b.Navigation("ClientHeartRate");

                    b.Navigation("ClientHobbies");

                    b.Navigation("ClientInvoiceRate");

                    b.Navigation("ClientKeyWorkerVoice");

                    b.Navigation("ClientLogAudit");

                    b.Navigation("ClientMatrixAudit");

                    b.Navigation("ClientMedAudit");

                    b.Navigation("ClientMedication");

                    b.Navigation("ClientMgtVisit");

                    b.Navigation("ClientNutrition");

                    b.Navigation("ClientOxygenLvl");

                    b.Navigation("ClientPainChart");

                    b.Navigation("ClientProgram");

                    b.Navigation("ClientPulseRate");

                    b.Navigation("ClientRota");

                    b.Navigation("ClientSeizure");

                    b.Navigation("ClientServiceWatch");

                    b.Navigation("ClientVoice");

                    b.Navigation("ClientWoundCare");

                    b.Navigation("ComplainRegister");

                    b.Navigation("ComplainRegistorClients");

                    b.Navigation("CreateShiftRoles");

                    b.Navigation("CuidiBuddy");

                    b.Navigation("DutyOnCall");

                    b.Navigation("Enotice");

                    b.Navigation("EquipmentAssessment");

                    b.Navigation("FilesAndRecord");

                    b.Navigation("HealthAndLiving");

                    b.Navigation("HistoryOfFall");

                    b.Navigation("HomeRiskAssessment");

                    b.Navigation("HospitalEntry");

                    b.Navigation("HospitalExit");

                    b.Navigation("IncidentReporting");

                    b.Navigation("IncomingMeds");

                    b.Navigation("InfectionControl");

                    b.Navigation("InvolvingParties");

                    b.Navigation("ManagingTasks");

                    b.Navigation("PersonalDetail");

                    b.Navigation("PersonalHygiene");

                    b.Navigation("Pets");

                    b.Navigation("PhysicalAbility");

                    b.Navigation("RegulatoryContact");

                    b.Navigation("Resources");

                    b.Navigation("SpecialHealthAndMedication");

                    b.Navigation("SpecialHealthCondition");

                    b.Navigation("StaffAdlObs");

                    b.Navigation("StaffBlackList");

                    b.Navigation("StaffKeyWorkerVoice");

                    b.Navigation("StaffMedCompObs");

                    b.Navigation("StaffReference");

                    b.Navigation("StaffSpotCheck");

                    b.Navigation("StaffTeamLead");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientBMIChart", b =>
                {
                    b.Navigation("OfficerToAct");

                    b.Navigation("Physician");

                    b.Navigation("StaffName");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientBloodCoagulationRecord", b =>
                {
                    b.Navigation("OfficerToAct");

                    b.Navigation("Physician");

                    b.Navigation("StaffName");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientBloodPressure", b =>
                {
                    b.Navigation("OfficerToAct");

                    b.Navigation("Physician");

                    b.Navigation("StaffName");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientBodyTemp", b =>
                {
                    b.Navigation("OfficerToAct");

                    b.Navigation("Physician");

                    b.Navigation("StaffName");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientBowelMovement", b =>
                {
                    b.Navigation("OfficerToAct");

                    b.Navigation("Physician");

                    b.Navigation("StaffName");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientCareDetailsHeading", b =>
                {
                    b.Navigation("ClientCareDetailsTasks");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientCareDetailsTask", b =>
                {
                    b.Navigation("ClientCareDetails");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientCareObj", b =>
                {
                    b.Navigation("PersonToAct");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientComplainRegister", b =>
                {
                    b.Navigation("OfficerToAct");

                    b.Navigation("StaffName");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientEyeHealthMonitoring", b =>
                {
                    b.Navigation("OfficerToAct");

                    b.Navigation("Physician");

                    b.Navigation("StaffName");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientFacility", b =>
                {
                    b.Navigation("ClientFacilityRisk");

                    b.Navigation("ClientFacilityTasks");

                    b.Navigation("CreateShiftRoles");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientFoodIntake", b =>
                {
                    b.Navigation("OfficerToAct");

                    b.Navigation("Physician");

                    b.Navigation("StaffName");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientHeartRate", b =>
                {
                    b.Navigation("OfficerToAct");

                    b.Navigation("Physician");

                    b.Navigation("StaffName");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientInvoice", b =>
                {
                    b.Navigation("ClientInvoiceRecords");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientInvoiceSummary", b =>
                {
                    b.Navigation("ClientInvoice");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientLogAudit", b =>
                {
                    b.Navigation("OfficerToAct");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientMealType", b =>
                {
                    b.Navigation("ClientMeal");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientMedAudit", b =>
                {
                    b.Navigation("OfficerToAct");

                    b.Navigation("StaffName");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientMedication", b =>
                {
                    b.Navigation("ClientMedicationDay");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientMedicationDay", b =>
                {
                    b.Navigation("ClientMedicationPeriod");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientMgtVisit", b =>
                {
                    b.Navigation("OfficerToAct");

                    b.Navigation("StaffName");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientNutrition", b =>
                {
                    b.Navigation("ClientCleaning");

                    b.Navigation("ClientMealDays");

                    b.Navigation("ClientShopping");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientOxygenLvl", b =>
                {
                    b.Navigation("OfficerToAct");

                    b.Navigation("Physician");

                    b.Navigation("StaffName");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientPainChart", b =>
                {
                    b.Navigation("OfficerToAct");

                    b.Navigation("Physician");

                    b.Navigation("StaffName");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientPerformanceIndicator", b =>
                {
                    b.Navigation("ClientPerformanceIndicatorTask");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientProgram", b =>
                {
                    b.Navigation("OfficerToAct");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientPulseRate", b =>
                {
                    b.Navigation("OfficerToAct");

                    b.Navigation("Physician");

                    b.Navigation("StaffName");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientRota", b =>
                {
                    b.Navigation("ClientRotaDays");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientRotaDays", b =>
                {
                    b.Navigation("ClientRotaTask");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientRotaType", b =>
                {
                    b.Navigation("ClientMedicationPeriod");

                    b.Navigation("ClientRota");

                    b.Navigation("StaffRotaPeriods");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientSeizure", b =>
                {
                    b.Navigation("OfficerToAct");

                    b.Navigation("Physician");

                    b.Navigation("StaffName");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientServiceDetail", b =>
                {
                    b.Navigation("ClientServiceDetailItems");

                    b.Navigation("ClientServiceDetailReceipts");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientServiceWatch", b =>
                {
                    b.Navigation("OfficerToAct");

                    b.Navigation("StaffName");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientSupportPlan", b =>
                {
                    b.Navigation("ClientSupportPlanGoal");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientSupportPlanGoal", b =>
                {
                    b.Navigation("ClientSupportPlanGoalAchieve");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientVoice", b =>
                {
                    b.Navigation("CallerName");

                    b.Navigation("GoodStaff");

                    b.Navigation("OfficerToAct");

                    b.Navigation("PoorStaff");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ClientWoundCare", b =>
                {
                    b.Navigation("OfficerToAct");

                    b.Navigation("Physician");

                    b.Navigation("StaffName");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.Company", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Facilities");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.CompanyModel", b =>
                {
                    b.Navigation("CompanyContact");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ComplainRegistor", b =>
                {
                    b.Navigation("ComplainRegistorClients");

                    b.Navigation("ComplainRegistorStaff");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ConsentLandLine", b =>
                {
                    b.Navigation("LogMethod");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.CreateShift", b =>
                {
                    b.Navigation("CreateShiftRoles");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.DeductionForAllStaff", b =>
                {
                    b.Navigation("DeductionValue");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.DutyOnCall", b =>
                {
                    b.Navigation("PersonResponsible");

                    b.Navigation("PersonToAct");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.EmailMessage", b =>
                {
                    b.Navigation("EmailMessageUser");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.HealthCondition", b =>
                {
                    b.Navigation("ClientHealthCondition");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.Hobbies", b =>
                {
                    b.Navigation("ClientHobbies");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.HomeRiskAssessment", b =>
                {
                    b.Navigation("HomeRiskAssessmentTask");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.HospitalEntry", b =>
                {
                    b.Navigation("PersonToTakeAction");

                    b.Navigation("StaffInvolved");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.HospitalExit", b =>
                {
                    b.Navigation("OfficerToTakeAction");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.Inbox", b =>
                {
                    b.Navigation("Conversation");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.IncomeForAllStaff", b =>
                {
                    b.Navigation("IncomeValue");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.InterestAndObjective", b =>
                {
                    b.Navigation("Interest");

                    b.Navigation("PersonalityTest");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.Investigation", b =>
                {
                    b.Navigation("InvestigationAttachments");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.JobPosition", b =>
                {
                    b.Navigation("StaffPerformanceHeading");

                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.KeyIndicators", b =>
                {
                    b.Navigation("LogMethod");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.MedicationRoute", b =>
                {
                    b.Navigation("ClientMedication");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.MeetingLog", b =>
                {
                    b.Navigation("MeetingActionableItem");

                    b.Navigation("MeetingAgenda");

                    b.Navigation("MeetingDiscussions");

                    b.Navigation("MeetingLogAttende");

                    b.Navigation("MeetingLogFacilitators");

                    b.Navigation("MeetingLogResponsibleToAct");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.OfficeLocation", b =>
                {
                    b.Navigation("StaffOfficeLocation");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.OnlineTrainingBundle", b =>
                {
                    b.Navigation("OnlineTrainingBundleCourse");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.OnlineTraning", b =>
                {
                    b.Navigation("OnlineTraininglogQuestion");

                    b.Navigation("OnlineTraningQuestion");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.OnlineTraningQuestion", b =>
                {
                    b.Navigation("OnlineTraningQuestionOptions");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.PerformanceIndicator", b =>
                {
                    b.Navigation("PerformanceIndicatorTask");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.PersonCentred", b =>
                {
                    b.Navigation("Focus");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.PersonalDetail", b =>
                {
                    b.Navigation("Capacity");

                    b.Navigation("ConsentCare");

                    b.Navigation("ConsentData");

                    b.Navigation("ConsentLandLine");

                    b.Navigation("ConsentMedication");

                    b.Navigation("Equipment");

                    b.Navigation("KeyIndicators");

                    b.Navigation("PersonCentred");

                    b.Navigation("Personal");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.PettyCash", b =>
                {
                    b.Navigation("PettyCashUsage");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.Rota", b =>
                {
                    b.Navigation("ClientRotaDays");

                    b.Navigation("ShiftBookings");

                    b.Navigation("StaffRota");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.RotaDayofWeek", b =>
                {
                    b.Navigation("ClientMealDays");

                    b.Navigation("ClientMedicationDay");

                    b.Navigation("ClientRotaDays");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.RotaTask", b =>
                {
                    b.Navigation("ClientRotaTask");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.ShiftBooking", b =>
                {
                    b.Navigation("ShiftBookingBlockedDays");

                    b.Navigation("StaffShiftBooking");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffAdlObs", b =>
                {
                    b.Navigation("OfficerToAct");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffAlert", b =>
                {
                    b.Navigation("AssignAlertStaff");

                    b.Navigation("StaffAlertCountMatrix");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffCompetenceTest", b =>
                {
                    b.Navigation("StaffCompetenceTestTask");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffHealth", b =>
                {
                    b.Navigation("StaffHealthTask");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffInterview", b =>
                {
                    b.Navigation("StaffInterviewTask");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffKeyWorkerVoice", b =>
                {
                    b.Navigation("OfficerToAct");

                    b.Navigation("Workteam");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffMedComp", b =>
                {
                    b.Navigation("OfficerToAct");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffOneToOne", b =>
                {
                    b.Navigation("OfficerToAct");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffPerformanceSummary", b =>
                {
                    b.Navigation("StaffPerformance");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffPersonalInfo", b =>
                {
                    b.Navigation("ApplicationUser");

                    b.Navigation("AssignAlertStaff");

                    b.Navigation("ClientCleaning");

                    b.Navigation("ClientLogAudit");

                    b.Navigation("ClientMedAudit");

                    b.Navigation("ClientMgtVisit");

                    b.Navigation("ClientNutrition");

                    b.Navigation("ClientProgram");

                    b.Navigation("ClientServiceWatch");

                    b.Navigation("ClientShopping");

                    b.Navigation("ClientVoice");

                    b.Navigation("ComplainRegistorStaff");

                    b.Navigation("CreateShiftRoles");

                    b.Navigation("Education");

                    b.Navigation("EmergencyContacts");

                    b.Navigation("Equipment");

                    b.Navigation("FilesAndRecord");

                    b.Navigation("HospitalEntryPersonToTakeAction");

                    b.Navigation("HospitalEntryStaffInvolved");

                    b.Navigation("HospitalExitOfficerToTakeAction");

                    b.Navigation("MeetingLogAttende");

                    b.Navigation("References");

                    b.Navigation("RegulatoryContact");

                    b.Navigation("SalaryAllowance");

                    b.Navigation("SalaryDeduction");

                    b.Navigation("SetupStaffHoliday");

                    b.Navigation("ShiftBookings");

                    b.Navigation("StaffAdlObs");

                    b.Navigation("StaffBlackList");

                    b.Navigation("StaffCompetenceTest");

                    b.Navigation("StaffHealth");

                    b.Navigation("StaffHoliday");

                    b.Navigation("StaffInfectionControl");

                    b.Navigation("StaffInterview");

                    b.Navigation("StaffKeyWorkerVoice");

                    b.Navigation("StaffLateness");

                    b.Navigation("StaffMedCompObs");

                    b.Navigation("StaffOfficeLocation");

                    b.Navigation("StaffOneToOne");

                    b.Navigation("StaffPersonalInfoComments");

                    b.Navigation("StaffPersonalityTest");

                    b.Navigation("StaffRating");

                    b.Navigation("StaffReference");

                    b.Navigation("StaffShadowing");

                    b.Navigation("StaffSpotCheck");

                    b.Navigation("StaffSupervisionAppraisal");

                    b.Navigation("StaffSurvey");

                    b.Navigation("StaffTax");

                    b.Navigation("StaffTeamLead");

                    b.Navigation("StaffTrainingMatrix");

                    b.Navigation("Trainings");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffRota", b =>
                {
                    b.Navigation("StaffRotaItem");

                    b.Navigation("StaffRotaPartners");

                    b.Navigation("StaffRotaPeriods");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffRotaPeriod", b =>
                {
                    b.Navigation("StaffRotaTasks");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffShadowing", b =>
                {
                    b.Navigation("StaffShadowingTask");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffShiftBooking", b =>
                {
                    b.Navigation("Days");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffSpotCheck", b =>
                {
                    b.Navigation("OfficerToAct");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffSupervisionAppraisal", b =>
                {
                    b.Navigation("OfficerToAct");

                    b.Navigation("Workteam");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffSurvey", b =>
                {
                    b.Navigation("OfficerToAct");

                    b.Navigation("Workteam");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffTeamLead", b =>
                {
                    b.Navigation("StaffTeamLeadTasks");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffTrainingMatrix", b =>
                {
                    b.Navigation("StaffTrainingMatrixList");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.StaffWorkTeam", b =>
                {
                    b.Navigation("StaffPersonalInfo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.TaskBoard", b =>
                {
                    b.Navigation("AssignedTo");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.Territory", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("JomarHealthCare.Domain.Entities.TrackingConcernNote", b =>
                {
                    b.Navigation("ManagerInvolved");

                    b.Navigation("StaffInvolved");
                });
#pragma warning restore 612, 618
        }
    }
}
