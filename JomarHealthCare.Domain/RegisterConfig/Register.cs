using JomarHealthCare.Domain.Entities.Map;
using Microsoft.EntityFrameworkCore;

namespace AwesomeCare.Model.Models.RegisterConfig
{
    public static class RegisterModelConfig
    {
        public static void Register(this ModelBuilder modelBuilder)
        {
            modelBuilder.ApplyConfiguration(new DutyOnCallMap());
            modelBuilder.ApplyConfiguration(new DutyOnCallPersonResponsibleMap());
            modelBuilder.ApplyConfiguration(new DutyOnCallPersonToActMap());
            modelBuilder.ApplyConfiguration(new StaffPersonalInfoMap());
            // modelBuilder.ApplyConfiguration(new CompanyModelMap());
            modelBuilder.ApplyConfiguration(new BaseRecordModelMap());
            modelBuilder.ApplyConfiguration(new BaseRecordItemModelMap());
            modelBuilder.ApplyConfiguration(new BestInterestAssessmentMap());
            modelBuilder.ApplyConfiguration(new CarePlanNutritionMap());
            modelBuilder.ApplyConfiguration(new AddressHistoryMap());
            modelBuilder.ApplyConfiguration(new AdlObsOfficerToActMap());
            modelBuilder.ApplyConfiguration(new AdminAdvertisementMap());
            modelBuilder.ApplyConfiguration(new AdminMessageMap());
            modelBuilder.ApplyConfiguration(new AmountRateTypeMap());
            modelBuilder.ApplyConfiguration(new AppMessageMap());
            modelBuilder.ApplyConfiguration(new AreaCodeMap());
            modelBuilder.ApplyConfiguration(new AssignAlertStaffMap());
            modelBuilder.ApplyConfiguration(new ClientBMIChartMap());
            modelBuilder.ApplyConfiguration(new AuditTrailMap());
            modelBuilder.ApplyConfiguration(new BalanceMap());
            modelBuilder.ApplyConfiguration(new BelieveTaskMap());
            modelBuilder.ApplyConfiguration(new BestInterestAssessmentMap());
            modelBuilder.ApplyConfiguration(new BloodCoagOfficerToActMap());
            modelBuilder.ApplyConfiguration(new BloodCoagPhysicianMap());
            modelBuilder.ApplyConfiguration(new BloodCoagStaffNameMap());
            modelBuilder.ApplyConfiguration(new BloodPressureOfficerToActMap());
            modelBuilder.ApplyConfiguration(new BloodPressurePhysicianMap());
            modelBuilder.ApplyConfiguration(new BloodPressureStaffNameMap());
            modelBuilder.ApplyConfiguration(new BMIChartOfficerToActMap());
            modelBuilder.ApplyConfiguration(new BMIChartPhysicianMap());
            modelBuilder.ApplyConfiguration(new ClientBloodCoagulationRecordMap());
            modelBuilder.ApplyConfiguration(new ClientBloodPressureMap());
            modelBuilder.ApplyConfiguration(new ClientBodyTempMap());
            modelBuilder.ApplyConfiguration(new BMIChartStaffNameMap());
            modelBuilder.ApplyConfiguration(new BodyMapMap());
            modelBuilder.ApplyConfiguration(new BodyTempOfficerToActMap());
            modelBuilder.ApplyConfiguration(new BodyTempPhysicianMap());
            modelBuilder.ApplyConfiguration(new BodyTempStaffNameMap());
            modelBuilder.ApplyConfiguration(new BowelMovementOfficerToActMap());
            modelBuilder.ApplyConfiguration(new BowelMovementPhysicianMap());
            modelBuilder.ApplyConfiguration(new BowelMovementStaffNameMap());
            modelBuilder.ApplyConfiguration(new BundleTrainingResultMap());
            modelBuilder.ApplyConfiguration(new CallDetailMap());
            modelBuilder.ApplyConfiguration(new CandidateInterviewMap());
            modelBuilder.ApplyConfiguration(new CandidateInterviewResultMap());
            modelBuilder.ApplyConfiguration(new CapacityIndicatorMap());
            modelBuilder.ApplyConfiguration(new CapacityMap());
            modelBuilder.ApplyConfiguration(new CareIssuesTaskMap());
            modelBuilder.ApplyConfiguration(new CareobjectMonitorMap());
            modelBuilder.ApplyConfiguration(new CareObjPersonToActMap());
            modelBuilder.ApplyConfiguration(new CarePlanNutritionMap());
            modelBuilder.ApplyConfiguration(new CareReviewMap());
            modelBuilder.ApplyConfiguration(new CategoryOfStaffMap());
            modelBuilder.ApplyConfiguration(new ChatMap());
            modelBuilder.ApplyConfiguration(new ChatNotificationMap());
            modelBuilder.ApplyConfiguration(new ChatSupportAssignedStaffMap());
            modelBuilder.ApplyConfiguration(new ChatSupportConversationMap());
            modelBuilder.ApplyConfiguration(new ChatSupportMap());
            modelBuilder.ApplyConfiguration(new ClassOfStaffMap());
            modelBuilder.ApplyConfiguration(new ClientBillToMap());
            modelBuilder.ApplyConfiguration(new ClientBloodCoagulationRecordMap());
            modelBuilder.ApplyConfiguration(new ClientBloodPressureMap());
            modelBuilder.ApplyConfiguration(new ClientBMIChartMap());
            modelBuilder.ApplyConfiguration(new ClientBodyTempMap());
            modelBuilder.ApplyConfiguration(new ClientBowelMovementMap());
            modelBuilder.ApplyConfiguration(new ClientCareDetailsHeadingMap());
            modelBuilder.ApplyConfiguration(new ClientCareDetailsMap());
            modelBuilder.ApplyConfiguration(new ClientCareDetailsTaskMap());
            modelBuilder.ApplyConfiguration(new ClientCareObjMap());
            modelBuilder.ApplyConfiguration(new ClientCleaningMap());
            modelBuilder.ApplyConfiguration(new ClientComplainRegisterMap());
            modelBuilder.ApplyConfiguration(new ClientCongnitiveMap());
            modelBuilder.ApplyConfiguration(new ClientDailyTaskMap());
            modelBuilder.ApplyConfiguration(new ClientEyeHealthMonitoringMap());
            modelBuilder.ApplyConfiguration(new ClientFacilityMap());
            modelBuilder.ApplyConfiguration(new ClientFacilityRiskMap());
            modelBuilder.ApplyConfiguration(new ClientFacilityTaskMap());
            modelBuilder.ApplyConfiguration(new ClientFoodIntakeMap());
            modelBuilder.ApplyConfiguration(new ClientHealthConditionMap());
            modelBuilder.ApplyConfiguration(new ClientHeartRateMap());
            modelBuilder.ApplyConfiguration(new ClientHobbiesMap());
            modelBuilder.ApplyConfiguration(new ClientInvoiceMap());
            modelBuilder.ApplyConfiguration(new ClientInvoiceRateMap());
            modelBuilder.ApplyConfiguration(new ClientInvoiceRecordsMap());
            modelBuilder.ApplyConfiguration(new ClientInvoiceSummaryMap());
            modelBuilder.ApplyConfiguration(new ClientInvolvingPartyMap());
            modelBuilder.ApplyConfiguration(new ClientKeyworkerNotesMap());
            modelBuilder.ApplyConfiguration(new ClientKeyWorkerVoiceMap());
            modelBuilder.ApplyConfiguration(new ClientLogAuditMap());
            modelBuilder.ApplyConfiguration(new ClientMap());
            modelBuilder.ApplyConfiguration(new ClientMatrixAuditMap());
            modelBuilder.ApplyConfiguration(new ClientMealDaysMap());
            modelBuilder.ApplyConfiguration(new ClientMealTypeMap());
            modelBuilder.ApplyConfiguration(new ClientMedAuditMap());
            modelBuilder.ApplyConfiguration(new ClientMedicationAdditionalMap());
            modelBuilder.ApplyConfiguration(new ClientMedicationDayMap());
            modelBuilder.ApplyConfiguration(new ClientMedicationMap());
            modelBuilder.ApplyConfiguration(new ClientMedicationPeriodMap());
            modelBuilder.ApplyConfiguration(new ClientMgtVisitMap());
            modelBuilder.ApplyConfiguration(new ClientNutritionMap());
            modelBuilder.ApplyConfiguration(new ClientOxygenLvlMap());
            modelBuilder.ApplyConfiguration(new ClientPainChartMap());
            modelBuilder.ApplyConfiguration(new ClientPerformanceIndicatorMap());
            modelBuilder.ApplyConfiguration(new ClientPerformanceIndicatorTaskMap());
            modelBuilder.ApplyConfiguration(new ClientProgramMap());
            modelBuilder.ApplyConfiguration(new ClientPulseRateMap());
            modelBuilder.ApplyConfiguration(new ClientRegulatoryContactMap());
            modelBuilder.ApplyConfiguration(new ClientRotaDaysMap());
            modelBuilder.ApplyConfiguration(new ClientRotaMap());
            modelBuilder.ApplyConfiguration(new ClientRotaTaskMap());
            modelBuilder.ApplyConfiguration(new ClientRotaTypeMap());
            modelBuilder.ApplyConfiguration(new ClientSeizureMap());
            modelBuilder.ApplyConfiguration(new ClientServiceDetailItemMap());
            modelBuilder.ApplyConfiguration(new ClientServiceDetailMap());
            modelBuilder.ApplyConfiguration(new ClientServiceDetailReceiptMap());
            modelBuilder.ApplyConfiguration(new ClientServiceWatchMap());
            modelBuilder.ApplyConfiguration(new ClientShoppingMap());
            modelBuilder.ApplyConfiguration(new ClientSupportPlanGoalAchieveMap());
            modelBuilder.ApplyConfiguration(new ClientSupportPlanGoalMap());
            modelBuilder.ApplyConfiguration(new ClientSupportPlanMap());
            modelBuilder.ApplyConfiguration(new ClientVoiceMap());
            modelBuilder.ApplyConfiguration(new ClientWoundCareMap());
            modelBuilder.ApplyConfiguration(new CompanyContactModelMap());
            modelBuilder.ApplyConfiguration(new CommunicationMap());
            modelBuilder.ApplyConfiguration(new CompanyBankMap());
            modelBuilder.ApplyConfiguration(new CompanyMessageMap());
            modelBuilder.ApplyConfiguration(new CompanyOnlineTrainingMap());
            modelBuilder.ApplyConfiguration(new CompanyReceptionMap());
            modelBuilder.ApplyConfiguration(new CompanyTrainingImageMap());
            modelBuilder.ApplyConfiguration(new ComplainOfficerToActMap());
            modelBuilder.ApplyConfiguration(new ComplainRegistorClientsMap());
            modelBuilder.ApplyConfiguration(new ComplainRegistorMap());
            modelBuilder.ApplyConfiguration(new ComplainRegistorStaffMap());
            modelBuilder.ApplyConfiguration(new ComplainStaffNameMap());
            modelBuilder.ApplyConfiguration(new ConsentCareMap());
            modelBuilder.ApplyConfiguration(new ConsentDataMap());
            modelBuilder.ApplyConfiguration(new ConsentLandlineLogMap());
            modelBuilder.ApplyConfiguration(new ConsentLandLineMap());
            modelBuilder.ApplyConfiguration(new ConsentMedicationMap());
            modelBuilder.ApplyConfiguration(new ContractTemplateMap());
            modelBuilder.ApplyConfiguration(new ConversationMap());
            modelBuilder.ApplyConfiguration(new CreateShiftMap());
            modelBuilder.ApplyConfiguration(new CreateShiftRolesMap());
            modelBuilder.ApplyConfiguration(new CreditCardMap());
            modelBuilder.ApplyConfiguration(new CuidiBuddyMap());
            modelBuilder.ApplyConfiguration(new DeductionForAllStaffMap());
            modelBuilder.ApplyConfiguration(new DeductionValueMap());
            modelBuilder.ApplyConfiguration(new DefaultStaffSupportMap());
            modelBuilder.ApplyConfiguration(new DirectorsMap());
            modelBuilder.ApplyConfiguration(new EmailMessageMap());
        }
    }
}

